# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file

from typing import (
    Callable,
    Optional,
    Text,
    Type,
    TypeVar,
)

import datetime
from stone.backends.python_rsrc import stone_base as bb  # type: ignore
from stone.backends.python_rsrc import stone_validators as bv  # type: ignore

from dropbox import common  # type: ignore

T = TypeVar('T', bound=bb.AnnotationType)
U = TypeVar('U')

class GroupManagementType(bb.Union):
    user_managed: GroupManagementType = ...
    company_managed: GroupManagementType = ...
    system_managed: GroupManagementType = ...
    other: GroupManagementType = ...

    def is_user_managed(self) -> bool: ...

    def is_company_managed(self) -> bool: ...

    def is_system_managed(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupManagementType_validator: bv.Validator = ...

class GroupSummary(bb.Struct):
    def __init__(self,
                 group_name: Text = ...,
                 group_id: Text = ...,
                 group_management_type: GroupManagementType = ...,
                 group_external_id: Optional[Text] = ...,
                 member_count: Optional[int] = ...) -> None: ...
    group_name: bb.Attribute[Text] = ...
    group_id: bb.Attribute[Text] = ...
    group_management_type: bb.Attribute[GroupManagementType] = ...
    group_external_id: bb.Attribute[Optional[Text]] = ...
    member_count: bb.Attribute[Optional[int]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupSummary_validator: bv.Validator = ...

class GroupType(bb.Union):
    team: GroupType = ...
    user_managed: GroupType = ...
    other: GroupType = ...

    def is_team(self) -> bool: ...

    def is_user_managed(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupType_validator: bv.Validator = ...

class MemberSpaceLimitType(bb.Union):
    off: MemberSpaceLimitType = ...
    alert_only: MemberSpaceLimitType = ...
    stop_sync: MemberSpaceLimitType = ...
    other: MemberSpaceLimitType = ...

    def is_off(self) -> bool: ...

    def is_alert_only(self) -> bool: ...

    def is_stop_sync(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitType_validator: bv.Validator = ...

class TimeRange(bb.Struct):
    def __init__(self,
                 start_time: Optional[datetime.datetime] = ...,
                 end_time: Optional[datetime.datetime] = ...) -> None: ...
    start_time: bb.Attribute[Optional[datetime.datetime]] = ...
    end_time: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TimeRange_validator: bv.Validator = ...

GroupExternalId_validator: bv.Validator = ...
GroupId_validator: bv.Validator = ...
MemberExternalId_validator: bv.Validator = ...
ResellerId_validator: bv.Validator = ...
TeamId_validator: bv.Validator = ...
TeamMemberId_validator: bv.Validator = ...
