# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file

from typing import (
    Callable,
    Text,
    Type,
    TypeVar,
)
from stone.backends.python_rsrc import stone_base as bb  # type: ignore
from stone.backends.python_rsrc import stone_validators as bv  # type: ignore

T = TypeVar('T', bound=bb.AnnotationType)
U = TypeVar('U')

class PathRoot(bb.Union):
    home: PathRoot = ...
    other: PathRoot = ...

    def is_home(self) -> bool: ...

    def is_root(self) -> bool: ...

    def is_namespace_id(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def root(cls, val: Text) -> PathRoot: ...

    @classmethod
    def namespace_id(cls, val: Text) -> PathRoot: ...

    def get_root(self) -> Text: ...

    def get_namespace_id(self) -> Text: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PathRoot_validator: bv.Validator = ...

class PathRootError(bb.Union):
    no_permission: PathRootError = ...
    other: PathRootError = ...

    def is_invalid_root(self) -> bool: ...

    def is_no_permission(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def invalid_root(cls, val: RootInfo) -> PathRootError: ...

    def get_invalid_root(self) -> RootInfo: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PathRootError_validator: bv.Validator = ...

class RootInfo(bb.Struct):
    def __init__(self,
                 root_namespace_id: Text = ...,
                 home_namespace_id: Text = ...) -> None: ...
    root_namespace_id: bb.Attribute[Text] = ...
    home_namespace_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RootInfo_validator: bv.Validator = ...

class TeamRootInfo(RootInfo):
    def __init__(self,
                 root_namespace_id: Text = ...,
                 home_namespace_id: Text = ...,
                 home_path: Text = ...) -> None: ...
    root_namespace_id: bb.Attribute[Text] = ...
    home_namespace_id: bb.Attribute[Text] = ...
    home_path: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamRootInfo_validator: bv.Validator = ...

class UserRootInfo(RootInfo):
    def __init__(self,
                 root_namespace_id: Text = ...,
                 home_namespace_id: Text = ...) -> None: ...
    root_namespace_id: bb.Attribute[Text] = ...
    home_namespace_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserRootInfo_validator: bv.Validator = ...

Date_validator: bv.Validator = ...
DisplayName_validator: bv.Validator = ...
DisplayNameLegacy_validator: bv.Validator = ...
DropboxTimestamp_validator: bv.Validator = ...
EmailAddress_validator: bv.Validator = ...
LanguageCode_validator: bv.Validator = ...
NamePart_validator: bv.Validator = ...
NamespaceId_validator: bv.Validator = ...
OptionalNamePart_validator: bv.Validator = ...
SessionId_validator: bv.Validator = ...
SharedFolderId_validator: bv.Validator = ...
