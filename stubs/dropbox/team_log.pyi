# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file

from typing import (
    Callable,
    List,
    Optional,
    Text,
    Type,
    TypeVar,
)

import datetime
from stone.backends.python_rsrc import stone_base as bb  # type: ignore
from stone.backends.python_rsrc import stone_validators as bv  # type: ignore

from dropbox import common  # type: ignore
from dropbox import file_requests  # type: ignore
from dropbox import files  # type: ignore
from dropbox import sharing  # type: ignore
from dropbox import team  # type: ignore
from dropbox import team_common  # type: ignore
from dropbox import team_policies  # type: ignore
from dropbox import users_common  # type: ignore

T = TypeVar('T', bound=bb.AnnotationType)
U = TypeVar('U')

class AccessMethodLogInfo(bb.Union):
    other: AccessMethodLogInfo = ...

    def is_admin_console(self) -> bool: ...

    def is_api(self) -> bool: ...

    def is_content_manager(self) -> bool: ...

    def is_end_user(self) -> bool: ...

    def is_enterprise_console(self) -> bool: ...

    def is_sign_in_as(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def admin_console(cls, val: WebSessionLogInfo) -> AccessMethodLogInfo: ...

    @classmethod
    def api(cls, val: ApiSessionLogInfo) -> AccessMethodLogInfo: ...

    @classmethod
    def content_manager(cls, val: WebSessionLogInfo) -> AccessMethodLogInfo: ...

    @classmethod
    def end_user(cls, val: SessionLogInfo) -> AccessMethodLogInfo: ...

    @classmethod
    def enterprise_console(cls, val: WebSessionLogInfo) -> AccessMethodLogInfo: ...

    @classmethod
    def sign_in_as(cls, val: WebSessionLogInfo) -> AccessMethodLogInfo: ...

    def get_admin_console(self) -> WebSessionLogInfo: ...

    def get_api(self) -> ApiSessionLogInfo: ...

    def get_content_manager(self) -> WebSessionLogInfo: ...

    def get_end_user(self) -> SessionLogInfo: ...

    def get_enterprise_console(self) -> WebSessionLogInfo: ...

    def get_sign_in_as(self) -> WebSessionLogInfo: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccessMethodLogInfo_validator: bv.Validator = ...

class AccountCaptureAvailability(bb.Union):
    available: AccountCaptureAvailability = ...
    unavailable: AccountCaptureAvailability = ...
    other: AccountCaptureAvailability = ...

    def is_available(self) -> bool: ...

    def is_unavailable(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureAvailability_validator: bv.Validator = ...

class AccountCaptureChangeAvailabilityDetails(bb.Struct):
    def __init__(self,
                 new_value: AccountCaptureAvailability = ...,
                 previous_value: Optional[AccountCaptureAvailability] = ...) -> None: ...
    new_value: bb.Attribute[AccountCaptureAvailability] = ...
    previous_value: bb.Attribute[Optional[AccountCaptureAvailability]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureChangeAvailabilityDetails_validator: bv.Validator = ...

class AccountCaptureChangeAvailabilityType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureChangeAvailabilityType_validator: bv.Validator = ...

class AccountCaptureChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: AccountCapturePolicy = ...,
                 previous_value: Optional[AccountCapturePolicy] = ...) -> None: ...
    new_value: bb.Attribute[AccountCapturePolicy] = ...
    previous_value: bb.Attribute[Optional[AccountCapturePolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureChangePolicyDetails_validator: bv.Validator = ...

class AccountCaptureChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureChangePolicyType_validator: bv.Validator = ...

class AccountCaptureMigrateAccountDetails(bb.Struct):
    def __init__(self,
                 domain_name: Text = ...) -> None: ...
    domain_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureMigrateAccountDetails_validator: bv.Validator = ...

class AccountCaptureMigrateAccountType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureMigrateAccountType_validator: bv.Validator = ...

class AccountCaptureNotificationEmailsSentDetails(bb.Struct):
    def __init__(self,
                 domain_name: Text = ...,
                 notification_type: Optional[AccountCaptureNotificationType] = ...) -> None: ...
    domain_name: bb.Attribute[Text] = ...
    notification_type: bb.Attribute[Optional[AccountCaptureNotificationType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureNotificationEmailsSentDetails_validator: bv.Validator = ...

class AccountCaptureNotificationEmailsSentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureNotificationEmailsSentType_validator: bv.Validator = ...

class AccountCaptureNotificationType(bb.Union):
    actionable_notification: AccountCaptureNotificationType = ...
    proactive_warning_notification: AccountCaptureNotificationType = ...
    other: AccountCaptureNotificationType = ...

    def is_actionable_notification(self) -> bool: ...

    def is_proactive_warning_notification(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureNotificationType_validator: bv.Validator = ...

class AccountCapturePolicy(bb.Union):
    all_users: AccountCapturePolicy = ...
    disabled: AccountCapturePolicy = ...
    invited_users: AccountCapturePolicy = ...
    other: AccountCapturePolicy = ...

    def is_all_users(self) -> bool: ...

    def is_disabled(self) -> bool: ...

    def is_invited_users(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCapturePolicy_validator: bv.Validator = ...

class AccountCaptureRelinquishAccountDetails(bb.Struct):
    def __init__(self,
                 domain_name: Text = ...) -> None: ...
    domain_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureRelinquishAccountDetails_validator: bv.Validator = ...

class AccountCaptureRelinquishAccountType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountCaptureRelinquishAccountType_validator: bv.Validator = ...

class AccountLockOrUnlockedDetails(bb.Struct):
    def __init__(self,
                 previous_value: AccountState = ...,
                 new_value: AccountState = ...) -> None: ...
    previous_value: bb.Attribute[AccountState] = ...
    new_value: bb.Attribute[AccountState] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountLockOrUnlockedDetails_validator: bv.Validator = ...

class AccountLockOrUnlockedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountLockOrUnlockedType_validator: bv.Validator = ...

class AccountState(bb.Union):
    locked: AccountState = ...
    unlocked: AccountState = ...
    other: AccountState = ...

    def is_locked(self) -> bool: ...

    def is_unlocked(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AccountState_validator: bv.Validator = ...

class ActionDetails(bb.Union):
    other: ActionDetails = ...

    def is_remove_action(self) -> bool: ...

    def is_team_invite_details(self) -> bool: ...

    def is_team_join_details(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def remove_action(cls, val: MemberRemoveActionType) -> ActionDetails: ...

    @classmethod
    def team_invite_details(cls, val: TeamInviteDetails) -> ActionDetails: ...

    @classmethod
    def team_join_details(cls, val: JoinTeamDetails) -> ActionDetails: ...

    def get_remove_action(self) -> MemberRemoveActionType: ...

    def get_team_invite_details(self) -> TeamInviteDetails: ...

    def get_team_join_details(self) -> JoinTeamDetails: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ActionDetails_validator: bv.Validator = ...

class ActorLogInfo(bb.Union):
    anonymous: ActorLogInfo = ...
    dropbox: ActorLogInfo = ...
    other: ActorLogInfo = ...

    def is_admin(self) -> bool: ...

    def is_anonymous(self) -> bool: ...

    def is_app(self) -> bool: ...

    def is_dropbox(self) -> bool: ...

    def is_reseller(self) -> bool: ...

    def is_user(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def admin(cls, val: UserLogInfo) -> ActorLogInfo: ...

    @classmethod
    def app(cls, val: AppLogInfo) -> ActorLogInfo: ...

    @classmethod
    def reseller(cls, val: ResellerLogInfo) -> ActorLogInfo: ...

    @classmethod
    def user(cls, val: UserLogInfo) -> ActorLogInfo: ...

    def get_admin(self) -> UserLogInfo: ...

    def get_app(self) -> AppLogInfo: ...

    def get_reseller(self) -> ResellerLogInfo: ...

    def get_user(self) -> UserLogInfo: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ActorLogInfo_validator: bv.Validator = ...

class AdminAlertCategoryEnum(bb.Union):
    account_takeover: AdminAlertCategoryEnum = ...
    data_loss_protection: AdminAlertCategoryEnum = ...
    information_governance: AdminAlertCategoryEnum = ...
    malware_sharing: AdminAlertCategoryEnum = ...
    massive_file_operation: AdminAlertCategoryEnum = ...
    na: AdminAlertCategoryEnum = ...
    threat_management: AdminAlertCategoryEnum = ...
    other: AdminAlertCategoryEnum = ...

    def is_account_takeover(self) -> bool: ...

    def is_data_loss_protection(self) -> bool: ...

    def is_information_governance(self) -> bool: ...

    def is_malware_sharing(self) -> bool: ...

    def is_massive_file_operation(self) -> bool: ...

    def is_na(self) -> bool: ...

    def is_threat_management(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertCategoryEnum_validator: bv.Validator = ...

class AdminAlertGeneralStateEnum(bb.Union):
    active: AdminAlertGeneralStateEnum = ...
    dismissed: AdminAlertGeneralStateEnum = ...
    in_progress: AdminAlertGeneralStateEnum = ...
    na: AdminAlertGeneralStateEnum = ...
    resolved: AdminAlertGeneralStateEnum = ...
    other: AdminAlertGeneralStateEnum = ...

    def is_active(self) -> bool: ...

    def is_dismissed(self) -> bool: ...

    def is_in_progress(self) -> bool: ...

    def is_na(self) -> bool: ...

    def is_resolved(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertGeneralStateEnum_validator: bv.Validator = ...

class AdminAlertSeverityEnum(bb.Union):
    high: AdminAlertSeverityEnum = ...
    info: AdminAlertSeverityEnum = ...
    low: AdminAlertSeverityEnum = ...
    medium: AdminAlertSeverityEnum = ...
    na: AdminAlertSeverityEnum = ...
    other: AdminAlertSeverityEnum = ...

    def is_high(self) -> bool: ...

    def is_info(self) -> bool: ...

    def is_low(self) -> bool: ...

    def is_medium(self) -> bool: ...

    def is_na(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertSeverityEnum_validator: bv.Validator = ...

class AdminAlertingAlertConfiguration(bb.Struct):
    def __init__(self,
                 alert_state: Optional[AdminAlertingAlertStatePolicy] = ...,
                 sensitivity_level: Optional[AdminAlertingAlertSensitivity] = ...,
                 recipients_settings: Optional[RecipientsConfiguration] = ...) -> None: ...
    alert_state: bb.Attribute[Optional[AdminAlertingAlertStatePolicy]] = ...
    sensitivity_level: bb.Attribute[Optional[AdminAlertingAlertSensitivity]] = ...
    recipients_settings: bb.Attribute[Optional[RecipientsConfiguration]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertingAlertConfiguration_validator: bv.Validator = ...

class AdminAlertingAlertSensitivity(bb.Union):
    high: AdminAlertingAlertSensitivity = ...
    highest: AdminAlertingAlertSensitivity = ...
    invalid: AdminAlertingAlertSensitivity = ...
    low: AdminAlertingAlertSensitivity = ...
    lowest: AdminAlertingAlertSensitivity = ...
    medium: AdminAlertingAlertSensitivity = ...
    other: AdminAlertingAlertSensitivity = ...

    def is_high(self) -> bool: ...

    def is_highest(self) -> bool: ...

    def is_invalid(self) -> bool: ...

    def is_low(self) -> bool: ...

    def is_lowest(self) -> bool: ...

    def is_medium(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertingAlertSensitivity_validator: bv.Validator = ...

class AdminAlertingAlertStateChangedDetails(bb.Struct):
    def __init__(self,
                 alert_name: Text = ...,
                 alert_severity: AdminAlertSeverityEnum = ...,
                 alert_category: AdminAlertCategoryEnum = ...,
                 alert_instance_id: Text = ...,
                 previous_value: AdminAlertGeneralStateEnum = ...,
                 new_value: AdminAlertGeneralStateEnum = ...) -> None: ...
    alert_name: bb.Attribute[Text] = ...
    alert_severity: bb.Attribute[AdminAlertSeverityEnum] = ...
    alert_category: bb.Attribute[AdminAlertCategoryEnum] = ...
    alert_instance_id: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[AdminAlertGeneralStateEnum] = ...
    new_value: bb.Attribute[AdminAlertGeneralStateEnum] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertingAlertStateChangedDetails_validator: bv.Validator = ...

class AdminAlertingAlertStateChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertingAlertStateChangedType_validator: bv.Validator = ...

class AdminAlertingAlertStatePolicy(bb.Union):
    off: AdminAlertingAlertStatePolicy = ...
    on: AdminAlertingAlertStatePolicy = ...
    other: AdminAlertingAlertStatePolicy = ...

    def is_off(self) -> bool: ...

    def is_on(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertingAlertStatePolicy_validator: bv.Validator = ...

class AdminAlertingChangedAlertConfigDetails(bb.Struct):
    def __init__(self,
                 alert_name: Text = ...,
                 previous_alert_config: AdminAlertingAlertConfiguration = ...,
                 new_alert_config: AdminAlertingAlertConfiguration = ...) -> None: ...
    alert_name: bb.Attribute[Text] = ...
    previous_alert_config: bb.Attribute[AdminAlertingAlertConfiguration] = ...
    new_alert_config: bb.Attribute[AdminAlertingAlertConfiguration] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertingChangedAlertConfigDetails_validator: bv.Validator = ...

class AdminAlertingChangedAlertConfigType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertingChangedAlertConfigType_validator: bv.Validator = ...

class AdminAlertingTriggeredAlertDetails(bb.Struct):
    def __init__(self,
                 alert_name: Text = ...,
                 alert_severity: AdminAlertSeverityEnum = ...,
                 alert_category: AdminAlertCategoryEnum = ...,
                 alert_instance_id: Text = ...) -> None: ...
    alert_name: bb.Attribute[Text] = ...
    alert_severity: bb.Attribute[AdminAlertSeverityEnum] = ...
    alert_category: bb.Attribute[AdminAlertCategoryEnum] = ...
    alert_instance_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertingTriggeredAlertDetails_validator: bv.Validator = ...

class AdminAlertingTriggeredAlertType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminAlertingTriggeredAlertType_validator: bv.Validator = ...

class AdminConsoleAppPermission(bb.Union):
    default_for_listed_apps: AdminConsoleAppPermission = ...
    default_for_unlisted_apps: AdminConsoleAppPermission = ...
    other: AdminConsoleAppPermission = ...

    def is_default_for_listed_apps(self) -> bool: ...

    def is_default_for_unlisted_apps(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminConsoleAppPermission_validator: bv.Validator = ...

class AdminConsoleAppPolicy(bb.Union):
    allow: AdminConsoleAppPolicy = ...
    block: AdminConsoleAppPolicy = ...
    default: AdminConsoleAppPolicy = ...
    other: AdminConsoleAppPolicy = ...

    def is_allow(self) -> bool: ...

    def is_block(self) -> bool: ...

    def is_default(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminConsoleAppPolicy_validator: bv.Validator = ...

class AdminRole(bb.Union):
    billing_admin: AdminRole = ...
    compliance_admin: AdminRole = ...
    content_admin: AdminRole = ...
    limited_admin: AdminRole = ...
    member_only: AdminRole = ...
    reporting_admin: AdminRole = ...
    security_admin: AdminRole = ...
    support_admin: AdminRole = ...
    team_admin: AdminRole = ...
    user_management_admin: AdminRole = ...
    other: AdminRole = ...

    def is_billing_admin(self) -> bool: ...

    def is_compliance_admin(self) -> bool: ...

    def is_content_admin(self) -> bool: ...

    def is_limited_admin(self) -> bool: ...

    def is_member_only(self) -> bool: ...

    def is_reporting_admin(self) -> bool: ...

    def is_security_admin(self) -> bool: ...

    def is_support_admin(self) -> bool: ...

    def is_team_admin(self) -> bool: ...

    def is_user_management_admin(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AdminRole_validator: bv.Validator = ...

class AlertRecipientsSettingType(bb.Union):
    custom_list: AlertRecipientsSettingType = ...
    invalid: AlertRecipientsSettingType = ...
    none: AlertRecipientsSettingType = ...
    team_admins: AlertRecipientsSettingType = ...
    other: AlertRecipientsSettingType = ...

    def is_custom_list(self) -> bool: ...

    def is_invalid(self) -> bool: ...

    def is_none(self) -> bool: ...

    def is_team_admins(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AlertRecipientsSettingType_validator: bv.Validator = ...

class AllowDownloadDisabledDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AllowDownloadDisabledDetails_validator: bv.Validator = ...

class AllowDownloadDisabledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AllowDownloadDisabledType_validator: bv.Validator = ...

class AllowDownloadEnabledDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AllowDownloadEnabledDetails_validator: bv.Validator = ...

class AllowDownloadEnabledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AllowDownloadEnabledType_validator: bv.Validator = ...

class ApiSessionLogInfo(bb.Struct):
    def __init__(self,
                 request_id: Text = ...) -> None: ...
    request_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ApiSessionLogInfo_validator: bv.Validator = ...

class AppBlockedByPermissionsDetails(bb.Struct):
    def __init__(self,
                 app_info: AppLogInfo = ...) -> None: ...
    app_info: bb.Attribute[AppLogInfo] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppBlockedByPermissionsDetails_validator: bv.Validator = ...

class AppBlockedByPermissionsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppBlockedByPermissionsType_validator: bv.Validator = ...

class AppLinkTeamDetails(bb.Struct):
    def __init__(self,
                 app_info: AppLogInfo = ...) -> None: ...
    app_info: bb.Attribute[AppLogInfo] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppLinkTeamDetails_validator: bv.Validator = ...

class AppLinkTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppLinkTeamType_validator: bv.Validator = ...

class AppLinkUserDetails(bb.Struct):
    def __init__(self,
                 app_info: AppLogInfo = ...) -> None: ...
    app_info: bb.Attribute[AppLogInfo] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppLinkUserDetails_validator: bv.Validator = ...

class AppLinkUserType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppLinkUserType_validator: bv.Validator = ...

class AppLogInfo(bb.Struct):
    def __init__(self,
                 app_id: Optional[Text] = ...,
                 display_name: Optional[Text] = ...) -> None: ...
    app_id: bb.Attribute[Optional[Text]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppLogInfo_validator: bv.Validator = ...

class AppPermissionsChangedDetails(bb.Struct):
    def __init__(self,
                 previous_value: AdminConsoleAppPolicy = ...,
                 new_value: AdminConsoleAppPolicy = ...,
                 app_name: Optional[Text] = ...,
                 permission: Optional[AdminConsoleAppPermission] = ...) -> None: ...
    previous_value: bb.Attribute[AdminConsoleAppPolicy] = ...
    new_value: bb.Attribute[AdminConsoleAppPolicy] = ...
    app_name: bb.Attribute[Optional[Text]] = ...
    permission: bb.Attribute[Optional[AdminConsoleAppPermission]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppPermissionsChangedDetails_validator: bv.Validator = ...

class AppPermissionsChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppPermissionsChangedType_validator: bv.Validator = ...

class AppUnlinkTeamDetails(bb.Struct):
    def __init__(self,
                 app_info: AppLogInfo = ...) -> None: ...
    app_info: bb.Attribute[AppLogInfo] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppUnlinkTeamDetails_validator: bv.Validator = ...

class AppUnlinkTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppUnlinkTeamType_validator: bv.Validator = ...

class AppUnlinkUserDetails(bb.Struct):
    def __init__(self,
                 app_info: AppLogInfo = ...) -> None: ...
    app_info: bb.Attribute[AppLogInfo] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppUnlinkUserDetails_validator: bv.Validator = ...

class AppUnlinkUserType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AppUnlinkUserType_validator: bv.Validator = ...

class ApplyNamingConventionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ApplyNamingConventionDetails_validator: bv.Validator = ...

class ApplyNamingConventionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ApplyNamingConventionType_validator: bv.Validator = ...

class AssetLogInfo(bb.Union):
    other: AssetLogInfo = ...

    def is_file(self) -> bool: ...

    def is_folder(self) -> bool: ...

    def is_paper_document(self) -> bool: ...

    def is_paper_folder(self) -> bool: ...

    def is_showcase_document(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def file(cls, val: FileLogInfo) -> AssetLogInfo: ...

    @classmethod
    def folder(cls, val: FolderLogInfo) -> AssetLogInfo: ...

    @classmethod
    def paper_document(cls, val: PaperDocumentLogInfo) -> AssetLogInfo: ...

    @classmethod
    def paper_folder(cls, val: PaperFolderLogInfo) -> AssetLogInfo: ...

    @classmethod
    def showcase_document(cls, val: ShowcaseDocumentLogInfo) -> AssetLogInfo: ...

    def get_file(self) -> FileLogInfo: ...

    def get_folder(self) -> FolderLogInfo: ...

    def get_paper_document(self) -> PaperDocumentLogInfo: ...

    def get_paper_folder(self) -> PaperFolderLogInfo: ...

    def get_showcase_document(self) -> ShowcaseDocumentLogInfo: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AssetLogInfo_validator: bv.Validator = ...

class BackupStatus(bb.Union):
    disabled: BackupStatus = ...
    enabled: BackupStatus = ...
    other: BackupStatus = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BackupStatus_validator: bv.Validator = ...

class BinderAddPageDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 doc_title: Text = ...,
                 binder_item_name: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    doc_title: bb.Attribute[Text] = ...
    binder_item_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderAddPageDetails_validator: bv.Validator = ...

class BinderAddPageType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderAddPageType_validator: bv.Validator = ...

class BinderAddSectionDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 doc_title: Text = ...,
                 binder_item_name: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    doc_title: bb.Attribute[Text] = ...
    binder_item_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderAddSectionDetails_validator: bv.Validator = ...

class BinderAddSectionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderAddSectionType_validator: bv.Validator = ...

class BinderRemovePageDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 doc_title: Text = ...,
                 binder_item_name: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    doc_title: bb.Attribute[Text] = ...
    binder_item_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderRemovePageDetails_validator: bv.Validator = ...

class BinderRemovePageType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderRemovePageType_validator: bv.Validator = ...

class BinderRemoveSectionDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 doc_title: Text = ...,
                 binder_item_name: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    doc_title: bb.Attribute[Text] = ...
    binder_item_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderRemoveSectionDetails_validator: bv.Validator = ...

class BinderRemoveSectionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderRemoveSectionType_validator: bv.Validator = ...

class BinderRenamePageDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 doc_title: Text = ...,
                 binder_item_name: Text = ...,
                 previous_binder_item_name: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    doc_title: bb.Attribute[Text] = ...
    binder_item_name: bb.Attribute[Text] = ...
    previous_binder_item_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderRenamePageDetails_validator: bv.Validator = ...

class BinderRenamePageType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderRenamePageType_validator: bv.Validator = ...

class BinderRenameSectionDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 doc_title: Text = ...,
                 binder_item_name: Text = ...,
                 previous_binder_item_name: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    doc_title: bb.Attribute[Text] = ...
    binder_item_name: bb.Attribute[Text] = ...
    previous_binder_item_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderRenameSectionDetails_validator: bv.Validator = ...

class BinderRenameSectionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderRenameSectionType_validator: bv.Validator = ...

class BinderReorderPageDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 doc_title: Text = ...,
                 binder_item_name: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    doc_title: bb.Attribute[Text] = ...
    binder_item_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderReorderPageDetails_validator: bv.Validator = ...

class BinderReorderPageType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderReorderPageType_validator: bv.Validator = ...

class BinderReorderSectionDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 doc_title: Text = ...,
                 binder_item_name: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    doc_title: bb.Attribute[Text] = ...
    binder_item_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderReorderSectionDetails_validator: bv.Validator = ...

class BinderReorderSectionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

BinderReorderSectionType_validator: bv.Validator = ...

class CameraUploadsPolicy(bb.Union):
    disabled: CameraUploadsPolicy = ...
    enabled: CameraUploadsPolicy = ...
    other: CameraUploadsPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CameraUploadsPolicy_validator: bv.Validator = ...

class CameraUploadsPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: CameraUploadsPolicy = ...,
                 previous_value: CameraUploadsPolicy = ...) -> None: ...
    new_value: bb.Attribute[CameraUploadsPolicy] = ...
    previous_value: bb.Attribute[CameraUploadsPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CameraUploadsPolicyChangedDetails_validator: bv.Validator = ...

class CameraUploadsPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CameraUploadsPolicyChangedType_validator: bv.Validator = ...

class CaptureTranscriptPolicy(bb.Union):
    default: CaptureTranscriptPolicy = ...
    disabled: CaptureTranscriptPolicy = ...
    enabled: CaptureTranscriptPolicy = ...
    other: CaptureTranscriptPolicy = ...

    def is_default(self) -> bool: ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CaptureTranscriptPolicy_validator: bv.Validator = ...

class CaptureTranscriptPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: CaptureTranscriptPolicy = ...,
                 previous_value: CaptureTranscriptPolicy = ...) -> None: ...
    new_value: bb.Attribute[CaptureTranscriptPolicy] = ...
    previous_value: bb.Attribute[CaptureTranscriptPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CaptureTranscriptPolicyChangedDetails_validator: bv.Validator = ...

class CaptureTranscriptPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CaptureTranscriptPolicyChangedType_validator: bv.Validator = ...

class Certificate(bb.Struct):
    def __init__(self,
                 subject: Text = ...,
                 issuer: Text = ...,
                 issue_date: Text = ...,
                 expiration_date: Text = ...,
                 serial_number: Text = ...,
                 sha1_fingerprint: Text = ...,
                 common_name: Optional[Text] = ...) -> None: ...
    subject: bb.Attribute[Text] = ...
    issuer: bb.Attribute[Text] = ...
    issue_date: bb.Attribute[Text] = ...
    expiration_date: bb.Attribute[Text] = ...
    serial_number: bb.Attribute[Text] = ...
    sha1_fingerprint: bb.Attribute[Text] = ...
    common_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

Certificate_validator: bv.Validator = ...

class ChangeLinkExpirationPolicy(bb.Union):
    allowed: ChangeLinkExpirationPolicy = ...
    not_allowed: ChangeLinkExpirationPolicy = ...
    other: ChangeLinkExpirationPolicy = ...

    def is_allowed(self) -> bool: ...

    def is_not_allowed(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ChangeLinkExpirationPolicy_validator: bv.Validator = ...

class ChangedEnterpriseAdminRoleDetails(bb.Struct):
    def __init__(self,
                 previous_value: FedAdminRole = ...,
                 new_value: FedAdminRole = ...,
                 team_name: Text = ...) -> None: ...
    previous_value: bb.Attribute[FedAdminRole] = ...
    new_value: bb.Attribute[FedAdminRole] = ...
    team_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ChangedEnterpriseAdminRoleDetails_validator: bv.Validator = ...

class ChangedEnterpriseAdminRoleType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ChangedEnterpriseAdminRoleType_validator: bv.Validator = ...

class ChangedEnterpriseConnectedTeamStatusDetails(bb.Struct):
    def __init__(self,
                 action: FedHandshakeAction = ...,
                 additional_info: FederationStatusChangeAdditionalInfo = ...,
                 previous_value: TrustedTeamsRequestState = ...,
                 new_value: TrustedTeamsRequestState = ...) -> None: ...
    action: bb.Attribute[FedHandshakeAction] = ...
    additional_info: bb.Attribute[FederationStatusChangeAdditionalInfo] = ...
    previous_value: bb.Attribute[TrustedTeamsRequestState] = ...
    new_value: bb.Attribute[TrustedTeamsRequestState] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ChangedEnterpriseConnectedTeamStatusDetails_validator: bv.Validator = ...

class ChangedEnterpriseConnectedTeamStatusType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ChangedEnterpriseConnectedTeamStatusType_validator: bv.Validator = ...

class ClassificationChangePolicyDetails(bb.Struct):
    def __init__(self,
                 previous_value: ClassificationPolicyEnumWrapper = ...,
                 new_value: ClassificationPolicyEnumWrapper = ...,
                 classification_type: ClassificationType = ...) -> None: ...
    previous_value: bb.Attribute[ClassificationPolicyEnumWrapper] = ...
    new_value: bb.Attribute[ClassificationPolicyEnumWrapper] = ...
    classification_type: bb.Attribute[ClassificationType] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ClassificationChangePolicyDetails_validator: bv.Validator = ...

class ClassificationChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ClassificationChangePolicyType_validator: bv.Validator = ...

class ClassificationCreateReportDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ClassificationCreateReportDetails_validator: bv.Validator = ...

class ClassificationCreateReportFailDetails(bb.Struct):
    def __init__(self,
                 failure_reason: team.TeamReportFailureReason = ...) -> None: ...
    failure_reason: bb.Attribute[team.TeamReportFailureReason] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ClassificationCreateReportFailDetails_validator: bv.Validator = ...

class ClassificationCreateReportFailType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ClassificationCreateReportFailType_validator: bv.Validator = ...

class ClassificationCreateReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ClassificationCreateReportType_validator: bv.Validator = ...

class ClassificationPolicyEnumWrapper(bb.Union):
    disabled: ClassificationPolicyEnumWrapper = ...
    enabled: ClassificationPolicyEnumWrapper = ...
    member_and_team_folders: ClassificationPolicyEnumWrapper = ...
    team_folders: ClassificationPolicyEnumWrapper = ...
    other: ClassificationPolicyEnumWrapper = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_member_and_team_folders(self) -> bool: ...

    def is_team_folders(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ClassificationPolicyEnumWrapper_validator: bv.Validator = ...

class ClassificationType(bb.Union):
    personal_information: ClassificationType = ...
    pii: ClassificationType = ...
    other: ClassificationType = ...

    def is_personal_information(self) -> bool: ...

    def is_pii(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ClassificationType_validator: bv.Validator = ...

class CollectionShareDetails(bb.Struct):
    def __init__(self,
                 album_name: Text = ...) -> None: ...
    album_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CollectionShareDetails_validator: bv.Validator = ...

class CollectionShareType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CollectionShareType_validator: bv.Validator = ...

class ComputerBackupPolicy(bb.Union):
    default: ComputerBackupPolicy = ...
    disabled: ComputerBackupPolicy = ...
    enabled: ComputerBackupPolicy = ...
    other: ComputerBackupPolicy = ...

    def is_default(self) -> bool: ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ComputerBackupPolicy_validator: bv.Validator = ...

class ComputerBackupPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: ComputerBackupPolicy = ...,
                 previous_value: ComputerBackupPolicy = ...) -> None: ...
    new_value: bb.Attribute[ComputerBackupPolicy] = ...
    previous_value: bb.Attribute[ComputerBackupPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ComputerBackupPolicyChangedDetails_validator: bv.Validator = ...

class ComputerBackupPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ComputerBackupPolicyChangedType_validator: bv.Validator = ...

class ConnectedTeamName(bb.Struct):
    def __init__(self,
                 team: Text = ...) -> None: ...
    team: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ConnectedTeamName_validator: bv.Validator = ...

class ContentAdministrationPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: Text = ...,
                 previous_value: Text = ...) -> None: ...
    new_value: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ContentAdministrationPolicyChangedDetails_validator: bv.Validator = ...

class ContentAdministrationPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ContentAdministrationPolicyChangedType_validator: bv.Validator = ...

class ContentPermanentDeletePolicy(bb.Union):
    disabled: ContentPermanentDeletePolicy = ...
    enabled: ContentPermanentDeletePolicy = ...
    other: ContentPermanentDeletePolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ContentPermanentDeletePolicy_validator: bv.Validator = ...

class ContextLogInfo(bb.Union):
    anonymous: ContextLogInfo = ...
    team: ContextLogInfo = ...
    other: ContextLogInfo = ...

    def is_anonymous(self) -> bool: ...

    def is_non_team_member(self) -> bool: ...

    def is_organization_team(self) -> bool: ...

    def is_team(self) -> bool: ...

    def is_team_member(self) -> bool: ...

    def is_trusted_non_team_member(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def non_team_member(cls, val: NonTeamMemberLogInfo) -> ContextLogInfo: ...

    @classmethod
    def organization_team(cls, val: TeamLogInfo) -> ContextLogInfo: ...

    @classmethod
    def team_member(cls, val: TeamMemberLogInfo) -> ContextLogInfo: ...

    @classmethod
    def trusted_non_team_member(cls, val: TrustedNonTeamMemberLogInfo) -> ContextLogInfo: ...

    def get_non_team_member(self) -> NonTeamMemberLogInfo: ...

    def get_organization_team(self) -> TeamLogInfo: ...

    def get_team_member(self) -> TeamMemberLogInfo: ...

    def get_trusted_non_team_member(self) -> TrustedNonTeamMemberLogInfo: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ContextLogInfo_validator: bv.Validator = ...

class CreateFolderDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CreateFolderDetails_validator: bv.Validator = ...

class CreateFolderType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CreateFolderType_validator: bv.Validator = ...

class CreateTeamInviteLinkDetails(bb.Struct):
    def __init__(self,
                 link_url: Text = ...,
                 expiry_date: Text = ...) -> None: ...
    link_url: bb.Attribute[Text] = ...
    expiry_date: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CreateTeamInviteLinkDetails_validator: bv.Validator = ...

class CreateTeamInviteLinkType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CreateTeamInviteLinkType_validator: bv.Validator = ...

class DataPlacementRestrictionChangePolicyDetails(bb.Struct):
    def __init__(self,
                 previous_value: PlacementRestriction = ...,
                 new_value: PlacementRestriction = ...) -> None: ...
    previous_value: bb.Attribute[PlacementRestriction] = ...
    new_value: bb.Attribute[PlacementRestriction] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DataPlacementRestrictionChangePolicyDetails_validator: bv.Validator = ...

class DataPlacementRestrictionChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DataPlacementRestrictionChangePolicyType_validator: bv.Validator = ...

class DataPlacementRestrictionSatisfyPolicyDetails(bb.Struct):
    def __init__(self,
                 placement_restriction: PlacementRestriction = ...) -> None: ...
    placement_restriction: bb.Attribute[PlacementRestriction] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DataPlacementRestrictionSatisfyPolicyDetails_validator: bv.Validator = ...

class DataPlacementRestrictionSatisfyPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DataPlacementRestrictionSatisfyPolicyType_validator: bv.Validator = ...

class DataResidencyMigrationRequestSuccessfulDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DataResidencyMigrationRequestSuccessfulDetails_validator: bv.Validator = ...

class DataResidencyMigrationRequestSuccessfulType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DataResidencyMigrationRequestSuccessfulType_validator: bv.Validator = ...

class DataResidencyMigrationRequestUnsuccessfulDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DataResidencyMigrationRequestUnsuccessfulDetails_validator: bv.Validator = ...

class DataResidencyMigrationRequestUnsuccessfulType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DataResidencyMigrationRequestUnsuccessfulType_validator: bv.Validator = ...

class DefaultLinkExpirationDaysPolicy(bb.Union):
    day_1: DefaultLinkExpirationDaysPolicy = ...
    day_180: DefaultLinkExpirationDaysPolicy = ...
    day_3: DefaultLinkExpirationDaysPolicy = ...
    day_30: DefaultLinkExpirationDaysPolicy = ...
    day_7: DefaultLinkExpirationDaysPolicy = ...
    day_90: DefaultLinkExpirationDaysPolicy = ...
    none: DefaultLinkExpirationDaysPolicy = ...
    year_1: DefaultLinkExpirationDaysPolicy = ...
    other: DefaultLinkExpirationDaysPolicy = ...

    def is_day_1(self) -> bool: ...

    def is_day_180(self) -> bool: ...

    def is_day_3(self) -> bool: ...

    def is_day_30(self) -> bool: ...

    def is_day_7(self) -> bool: ...

    def is_day_90(self) -> bool: ...

    def is_none(self) -> bool: ...

    def is_year_1(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DefaultLinkExpirationDaysPolicy_validator: bv.Validator = ...

class DeleteTeamInviteLinkDetails(bb.Struct):
    def __init__(self,
                 link_url: Text = ...) -> None: ...
    link_url: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeleteTeamInviteLinkDetails_validator: bv.Validator = ...

class DeleteTeamInviteLinkType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeleteTeamInviteLinkType_validator: bv.Validator = ...

class DeviceSessionLogInfo(bb.Struct):
    def __init__(self,
                 ip_address: Optional[Text] = ...,
                 created: Optional[datetime.datetime] = ...,
                 updated: Optional[datetime.datetime] = ...) -> None: ...
    ip_address: bb.Attribute[Optional[Text]] = ...
    created: bb.Attribute[Optional[datetime.datetime]] = ...
    updated: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceSessionLogInfo_validator: bv.Validator = ...

class DesktopDeviceSessionLogInfo(DeviceSessionLogInfo):
    def __init__(self,
                 host_name: Text = ...,
                 client_type: team.DesktopPlatform = ...,
                 platform: Text = ...,
                 is_delete_on_unlink_supported: bool = ...,
                 ip_address: Optional[Text] = ...,
                 created: Optional[datetime.datetime] = ...,
                 updated: Optional[datetime.datetime] = ...,
                 session_info: Optional[DesktopSessionLogInfo] = ...,
                 client_version: Optional[Text] = ...) -> None: ...
    host_name: bb.Attribute[Text] = ...
    client_type: bb.Attribute[team.DesktopPlatform] = ...
    platform: bb.Attribute[Text] = ...
    is_delete_on_unlink_supported: bb.Attribute[bool] = ...
    ip_address: bb.Attribute[Optional[Text]] = ...
    created: bb.Attribute[Optional[datetime.datetime]] = ...
    updated: bb.Attribute[Optional[datetime.datetime]] = ...
    session_info: bb.Attribute[Optional[DesktopSessionLogInfo]] = ...
    client_version: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DesktopDeviceSessionLogInfo_validator: bv.Validator = ...

class SessionLogInfo(bb.Struct):
    def __init__(self,
                 session_id: Optional[Text] = ...) -> None: ...
    session_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SessionLogInfo_validator: bv.Validator = ...

class DesktopSessionLogInfo(SessionLogInfo):
    def __init__(self,
                 session_id: Optional[Text] = ...) -> None: ...
    session_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DesktopSessionLogInfo_validator: bv.Validator = ...

class DeviceApprovalsAddExceptionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsAddExceptionDetails_validator: bv.Validator = ...

class DeviceApprovalsAddExceptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsAddExceptionType_validator: bv.Validator = ...

class DeviceApprovalsChangeDesktopPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[DeviceApprovalsPolicy] = ...,
                 previous_value: Optional[DeviceApprovalsPolicy] = ...) -> None: ...
    new_value: bb.Attribute[Optional[DeviceApprovalsPolicy]] = ...
    previous_value: bb.Attribute[Optional[DeviceApprovalsPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsChangeDesktopPolicyDetails_validator: bv.Validator = ...

class DeviceApprovalsChangeDesktopPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsChangeDesktopPolicyType_validator: bv.Validator = ...

class DeviceApprovalsChangeMobilePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[DeviceApprovalsPolicy] = ...,
                 previous_value: Optional[DeviceApprovalsPolicy] = ...) -> None: ...
    new_value: bb.Attribute[Optional[DeviceApprovalsPolicy]] = ...
    previous_value: bb.Attribute[Optional[DeviceApprovalsPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsChangeMobilePolicyDetails_validator: bv.Validator = ...

class DeviceApprovalsChangeMobilePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsChangeMobilePolicyType_validator: bv.Validator = ...

class DeviceApprovalsChangeOverageActionDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[team_policies.RolloutMethod] = ...,
                 previous_value: Optional[team_policies.RolloutMethod] = ...) -> None: ...
    new_value: bb.Attribute[Optional[team_policies.RolloutMethod]] = ...
    previous_value: bb.Attribute[Optional[team_policies.RolloutMethod]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsChangeOverageActionDetails_validator: bv.Validator = ...

class DeviceApprovalsChangeOverageActionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsChangeOverageActionType_validator: bv.Validator = ...

class DeviceApprovalsChangeUnlinkActionDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[DeviceUnlinkPolicy] = ...,
                 previous_value: Optional[DeviceUnlinkPolicy] = ...) -> None: ...
    new_value: bb.Attribute[Optional[DeviceUnlinkPolicy]] = ...
    previous_value: bb.Attribute[Optional[DeviceUnlinkPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsChangeUnlinkActionDetails_validator: bv.Validator = ...

class DeviceApprovalsChangeUnlinkActionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsChangeUnlinkActionType_validator: bv.Validator = ...

class DeviceApprovalsPolicy(bb.Union):
    limited: DeviceApprovalsPolicy = ...
    unlimited: DeviceApprovalsPolicy = ...
    other: DeviceApprovalsPolicy = ...

    def is_limited(self) -> bool: ...

    def is_unlimited(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsPolicy_validator: bv.Validator = ...

class DeviceApprovalsRemoveExceptionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsRemoveExceptionDetails_validator: bv.Validator = ...

class DeviceApprovalsRemoveExceptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceApprovalsRemoveExceptionType_validator: bv.Validator = ...

class DeviceChangeIpDesktopDetails(bb.Struct):
    def __init__(self,
                 device_session_info: DeviceSessionLogInfo = ...) -> None: ...
    device_session_info: bb.Attribute[DeviceSessionLogInfo] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceChangeIpDesktopDetails_validator: bv.Validator = ...

class DeviceChangeIpDesktopType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceChangeIpDesktopType_validator: bv.Validator = ...

class DeviceChangeIpMobileDetails(bb.Struct):
    def __init__(self,
                 device_session_info: Optional[DeviceSessionLogInfo] = ...) -> None: ...
    device_session_info: bb.Attribute[Optional[DeviceSessionLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceChangeIpMobileDetails_validator: bv.Validator = ...

class DeviceChangeIpMobileType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceChangeIpMobileType_validator: bv.Validator = ...

class DeviceChangeIpWebDetails(bb.Struct):
    def __init__(self,
                 user_agent: Text = ...) -> None: ...
    user_agent: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceChangeIpWebDetails_validator: bv.Validator = ...

class DeviceChangeIpWebType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceChangeIpWebType_validator: bv.Validator = ...

class DeviceDeleteOnUnlinkFailDetails(bb.Struct):
    def __init__(self,
                 num_failures: int = ...,
                 session_info: Optional[SessionLogInfo] = ...,
                 display_name: Optional[Text] = ...) -> None: ...
    num_failures: bb.Attribute[int] = ...
    session_info: bb.Attribute[Optional[SessionLogInfo]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceDeleteOnUnlinkFailDetails_validator: bv.Validator = ...

class DeviceDeleteOnUnlinkFailType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceDeleteOnUnlinkFailType_validator: bv.Validator = ...

class DeviceDeleteOnUnlinkSuccessDetails(bb.Struct):
    def __init__(self,
                 session_info: Optional[SessionLogInfo] = ...,
                 display_name: Optional[Text] = ...) -> None: ...
    session_info: bb.Attribute[Optional[SessionLogInfo]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceDeleteOnUnlinkSuccessDetails_validator: bv.Validator = ...

class DeviceDeleteOnUnlinkSuccessType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceDeleteOnUnlinkSuccessType_validator: bv.Validator = ...

class DeviceLinkFailDetails(bb.Struct):
    def __init__(self,
                 device_type: DeviceType = ...,
                 ip_address: Optional[Text] = ...) -> None: ...
    device_type: bb.Attribute[DeviceType] = ...
    ip_address: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceLinkFailDetails_validator: bv.Validator = ...

class DeviceLinkFailType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceLinkFailType_validator: bv.Validator = ...

class DeviceLinkSuccessDetails(bb.Struct):
    def __init__(self,
                 device_session_info: Optional[DeviceSessionLogInfo] = ...) -> None: ...
    device_session_info: bb.Attribute[Optional[DeviceSessionLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceLinkSuccessDetails_validator: bv.Validator = ...

class DeviceLinkSuccessType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceLinkSuccessType_validator: bv.Validator = ...

class DeviceManagementDisabledDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceManagementDisabledDetails_validator: bv.Validator = ...

class DeviceManagementDisabledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceManagementDisabledType_validator: bv.Validator = ...

class DeviceManagementEnabledDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceManagementEnabledDetails_validator: bv.Validator = ...

class DeviceManagementEnabledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceManagementEnabledType_validator: bv.Validator = ...

class DeviceSyncBackupStatusChangedDetails(bb.Struct):
    def __init__(self,
                 desktop_device_session_info: DesktopDeviceSessionLogInfo = ...,
                 previous_value: BackupStatus = ...,
                 new_value: BackupStatus = ...) -> None: ...
    desktop_device_session_info: bb.Attribute[DesktopDeviceSessionLogInfo] = ...
    previous_value: bb.Attribute[BackupStatus] = ...
    new_value: bb.Attribute[BackupStatus] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceSyncBackupStatusChangedDetails_validator: bv.Validator = ...

class DeviceSyncBackupStatusChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceSyncBackupStatusChangedType_validator: bv.Validator = ...

class DeviceType(bb.Union):
    desktop: DeviceType = ...
    mobile: DeviceType = ...
    other: DeviceType = ...

    def is_desktop(self) -> bool: ...

    def is_mobile(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceType_validator: bv.Validator = ...

class DeviceUnlinkDetails(bb.Struct):
    def __init__(self,
                 delete_data: bool = ...,
                 session_info: Optional[SessionLogInfo] = ...,
                 display_name: Optional[Text] = ...) -> None: ...
    delete_data: bb.Attribute[bool] = ...
    session_info: bb.Attribute[Optional[SessionLogInfo]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceUnlinkDetails_validator: bv.Validator = ...

class DeviceUnlinkPolicy(bb.Union):
    keep: DeviceUnlinkPolicy = ...
    remove: DeviceUnlinkPolicy = ...
    other: DeviceUnlinkPolicy = ...

    def is_keep(self) -> bool: ...

    def is_remove(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceUnlinkPolicy_validator: bv.Validator = ...

class DeviceUnlinkType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeviceUnlinkType_validator: bv.Validator = ...

class DirectoryRestrictionsAddMembersDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DirectoryRestrictionsAddMembersDetails_validator: bv.Validator = ...

class DirectoryRestrictionsAddMembersType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DirectoryRestrictionsAddMembersType_validator: bv.Validator = ...

class DirectoryRestrictionsRemoveMembersDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DirectoryRestrictionsRemoveMembersDetails_validator: bv.Validator = ...

class DirectoryRestrictionsRemoveMembersType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DirectoryRestrictionsRemoveMembersType_validator: bv.Validator = ...

class DisabledDomainInvitesDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DisabledDomainInvitesDetails_validator: bv.Validator = ...

class DisabledDomainInvitesType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DisabledDomainInvitesType_validator: bv.Validator = ...

class DispositionActionType(bb.Union):
    automatic_delete: DispositionActionType = ...
    automatic_permanently_delete: DispositionActionType = ...
    other: DispositionActionType = ...

    def is_automatic_delete(self) -> bool: ...

    def is_automatic_permanently_delete(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DispositionActionType_validator: bv.Validator = ...

class DomainInvitesApproveRequestToJoinTeamDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesApproveRequestToJoinTeamDetails_validator: bv.Validator = ...

class DomainInvitesApproveRequestToJoinTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesApproveRequestToJoinTeamType_validator: bv.Validator = ...

class DomainInvitesDeclineRequestToJoinTeamDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesDeclineRequestToJoinTeamDetails_validator: bv.Validator = ...

class DomainInvitesDeclineRequestToJoinTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesDeclineRequestToJoinTeamType_validator: bv.Validator = ...

class DomainInvitesEmailExistingUsersDetails(bb.Struct):
    def __init__(self,
                 domain_name: Text = ...,
                 num_recipients: int = ...) -> None: ...
    domain_name: bb.Attribute[Text] = ...
    num_recipients: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesEmailExistingUsersDetails_validator: bv.Validator = ...

class DomainInvitesEmailExistingUsersType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesEmailExistingUsersType_validator: bv.Validator = ...

class DomainInvitesRequestToJoinTeamDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesRequestToJoinTeamDetails_validator: bv.Validator = ...

class DomainInvitesRequestToJoinTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesRequestToJoinTeamType_validator: bv.Validator = ...

class DomainInvitesSetInviteNewUserPrefToNoDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesSetInviteNewUserPrefToNoDetails_validator: bv.Validator = ...

class DomainInvitesSetInviteNewUserPrefToNoType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesSetInviteNewUserPrefToNoType_validator: bv.Validator = ...

class DomainInvitesSetInviteNewUserPrefToYesDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesSetInviteNewUserPrefToYesDetails_validator: bv.Validator = ...

class DomainInvitesSetInviteNewUserPrefToYesType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainInvitesSetInviteNewUserPrefToYesType_validator: bv.Validator = ...

class DomainVerificationAddDomainFailDetails(bb.Struct):
    def __init__(self,
                 domain_name: Text = ...,
                 verification_method: Optional[Text] = ...) -> None: ...
    domain_name: bb.Attribute[Text] = ...
    verification_method: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainVerificationAddDomainFailDetails_validator: bv.Validator = ...

class DomainVerificationAddDomainFailType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainVerificationAddDomainFailType_validator: bv.Validator = ...

class DomainVerificationAddDomainSuccessDetails(bb.Struct):
    def __init__(self,
                 domain_names: List[Text] = ...,
                 verification_method: Optional[Text] = ...) -> None: ...
    domain_names: bb.Attribute[List[Text]] = ...
    verification_method: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainVerificationAddDomainSuccessDetails_validator: bv.Validator = ...

class DomainVerificationAddDomainSuccessType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainVerificationAddDomainSuccessType_validator: bv.Validator = ...

class DomainVerificationRemoveDomainDetails(bb.Struct):
    def __init__(self,
                 domain_names: List[Text] = ...) -> None: ...
    domain_names: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainVerificationRemoveDomainDetails_validator: bv.Validator = ...

class DomainVerificationRemoveDomainType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DomainVerificationRemoveDomainType_validator: bv.Validator = ...

class DownloadPolicyType(bb.Union):
    allow: DownloadPolicyType = ...
    disallow: DownloadPolicyType = ...
    other: DownloadPolicyType = ...

    def is_allow(self) -> bool: ...

    def is_disallow(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DownloadPolicyType_validator: bv.Validator = ...

class DropboxPasswordsExportedDetails(bb.Struct):
    def __init__(self,
                 platform: Text = ...) -> None: ...
    platform: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DropboxPasswordsExportedDetails_validator: bv.Validator = ...

class DropboxPasswordsExportedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DropboxPasswordsExportedType_validator: bv.Validator = ...

class DropboxPasswordsNewDeviceEnrolledDetails(bb.Struct):
    def __init__(self,
                 is_first_device: bool = ...,
                 platform: Text = ...) -> None: ...
    is_first_device: bb.Attribute[bool] = ...
    platform: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DropboxPasswordsNewDeviceEnrolledDetails_validator: bv.Validator = ...

class DropboxPasswordsNewDeviceEnrolledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DropboxPasswordsNewDeviceEnrolledType_validator: bv.Validator = ...

class DurationLogInfo(bb.Struct):
    def __init__(self,
                 unit: TimeUnit = ...,
                 amount: int = ...) -> None: ...
    unit: bb.Attribute[TimeUnit] = ...
    amount: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DurationLogInfo_validator: bv.Validator = ...

class EmailIngestPolicy(bb.Union):
    disabled: EmailIngestPolicy = ...
    enabled: EmailIngestPolicy = ...
    other: EmailIngestPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmailIngestPolicy_validator: bv.Validator = ...

class EmailIngestPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: EmailIngestPolicy = ...,
                 previous_value: EmailIngestPolicy = ...) -> None: ...
    new_value: bb.Attribute[EmailIngestPolicy] = ...
    previous_value: bb.Attribute[EmailIngestPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmailIngestPolicyChangedDetails_validator: bv.Validator = ...

class EmailIngestPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmailIngestPolicyChangedType_validator: bv.Validator = ...

class EmailIngestReceiveFileDetails(bb.Struct):
    def __init__(self,
                 inbox_name: Text = ...,
                 attachment_names: List[Text] = ...,
                 subject: Optional[Text] = ...,
                 from_name: Optional[Text] = ...,
                 from_email: Optional[Text] = ...) -> None: ...
    inbox_name: bb.Attribute[Text] = ...
    attachment_names: bb.Attribute[List[Text]] = ...
    subject: bb.Attribute[Optional[Text]] = ...
    from_name: bb.Attribute[Optional[Text]] = ...
    from_email: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmailIngestReceiveFileDetails_validator: bv.Validator = ...

class EmailIngestReceiveFileType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmailIngestReceiveFileType_validator: bv.Validator = ...

class EmmAddExceptionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmAddExceptionDetails_validator: bv.Validator = ...

class EmmAddExceptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmAddExceptionType_validator: bv.Validator = ...

class EmmChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: team_policies.EmmState = ...,
                 previous_value: Optional[team_policies.EmmState] = ...) -> None: ...
    new_value: bb.Attribute[team_policies.EmmState] = ...
    previous_value: bb.Attribute[Optional[team_policies.EmmState]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmChangePolicyDetails_validator: bv.Validator = ...

class EmmChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmChangePolicyType_validator: bv.Validator = ...

class EmmCreateExceptionsReportDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmCreateExceptionsReportDetails_validator: bv.Validator = ...

class EmmCreateExceptionsReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmCreateExceptionsReportType_validator: bv.Validator = ...

class EmmCreateUsageReportDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmCreateUsageReportDetails_validator: bv.Validator = ...

class EmmCreateUsageReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmCreateUsageReportType_validator: bv.Validator = ...

class EmmErrorDetails(bb.Struct):
    def __init__(self,
                 error_details: FailureDetailsLogInfo = ...) -> None: ...
    error_details: bb.Attribute[FailureDetailsLogInfo] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmErrorDetails_validator: bv.Validator = ...

class EmmErrorType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmErrorType_validator: bv.Validator = ...

class EmmRefreshAuthTokenDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmRefreshAuthTokenDetails_validator: bv.Validator = ...

class EmmRefreshAuthTokenType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmRefreshAuthTokenType_validator: bv.Validator = ...

class EmmRemoveExceptionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmRemoveExceptionDetails_validator: bv.Validator = ...

class EmmRemoveExceptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmRemoveExceptionType_validator: bv.Validator = ...

class EnabledDomainInvitesDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EnabledDomainInvitesDetails_validator: bv.Validator = ...

class EnabledDomainInvitesType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EnabledDomainInvitesType_validator: bv.Validator = ...

class EndedEnterpriseAdminSessionDeprecatedDetails(bb.Struct):
    def __init__(self,
                 federation_extra_details: FedExtraDetails = ...) -> None: ...
    federation_extra_details: bb.Attribute[FedExtraDetails] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EndedEnterpriseAdminSessionDeprecatedDetails_validator: bv.Validator = ...

class EndedEnterpriseAdminSessionDeprecatedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EndedEnterpriseAdminSessionDeprecatedType_validator: bv.Validator = ...

class EndedEnterpriseAdminSessionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EndedEnterpriseAdminSessionDetails_validator: bv.Validator = ...

class EndedEnterpriseAdminSessionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EndedEnterpriseAdminSessionType_validator: bv.Validator = ...

class EnforceLinkPasswordPolicy(bb.Union):
    optional: EnforceLinkPasswordPolicy = ...
    required: EnforceLinkPasswordPolicy = ...
    other: EnforceLinkPasswordPolicy = ...

    def is_optional(self) -> bool: ...

    def is_required(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EnforceLinkPasswordPolicy_validator: bv.Validator = ...

class EnterpriseSettingsLockingDetails(bb.Struct):
    def __init__(self,
                 team_name: Text = ...,
                 settings_page_name: Text = ...,
                 previous_settings_page_locking_state: Text = ...,
                 new_settings_page_locking_state: Text = ...) -> None: ...
    team_name: bb.Attribute[Text] = ...
    settings_page_name: bb.Attribute[Text] = ...
    previous_settings_page_locking_state: bb.Attribute[Text] = ...
    new_settings_page_locking_state: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EnterpriseSettingsLockingDetails_validator: bv.Validator = ...

class EnterpriseSettingsLockingType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EnterpriseSettingsLockingType_validator: bv.Validator = ...

class EventCategory(bb.Union):
    admin_alerting: EventCategory = ...
    apps: EventCategory = ...
    comments: EventCategory = ...
    data_governance: EventCategory = ...
    devices: EventCategory = ...
    domains: EventCategory = ...
    file_operations: EventCategory = ...
    file_requests: EventCategory = ...
    groups: EventCategory = ...
    logins: EventCategory = ...
    members: EventCategory = ...
    paper: EventCategory = ...
    passwords: EventCategory = ...
    reports: EventCategory = ...
    sharing: EventCategory = ...
    showcase: EventCategory = ...
    sso: EventCategory = ...
    team_folders: EventCategory = ...
    team_policies: EventCategory = ...
    team_profile: EventCategory = ...
    tfa: EventCategory = ...
    trusted_teams: EventCategory = ...
    other: EventCategory = ...

    def is_admin_alerting(self) -> bool: ...

    def is_apps(self) -> bool: ...

    def is_comments(self) -> bool: ...

    def is_data_governance(self) -> bool: ...

    def is_devices(self) -> bool: ...

    def is_domains(self) -> bool: ...

    def is_file_operations(self) -> bool: ...

    def is_file_requests(self) -> bool: ...

    def is_groups(self) -> bool: ...

    def is_logins(self) -> bool: ...

    def is_members(self) -> bool: ...

    def is_paper(self) -> bool: ...

    def is_passwords(self) -> bool: ...

    def is_reports(self) -> bool: ...

    def is_sharing(self) -> bool: ...

    def is_showcase(self) -> bool: ...

    def is_sso(self) -> bool: ...

    def is_team_folders(self) -> bool: ...

    def is_team_policies(self) -> bool: ...

    def is_team_profile(self) -> bool: ...

    def is_tfa(self) -> bool: ...

    def is_trusted_teams(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EventCategory_validator: bv.Validator = ...

class EventDetails(bb.Union):
    other: EventDetails = ...

    def is_admin_alerting_alert_state_changed_details(self) -> bool: ...

    def is_admin_alerting_changed_alert_config_details(self) -> bool: ...

    def is_admin_alerting_triggered_alert_details(self) -> bool: ...

    def is_app_blocked_by_permissions_details(self) -> bool: ...

    def is_app_link_team_details(self) -> bool: ...

    def is_app_link_user_details(self) -> bool: ...

    def is_app_unlink_team_details(self) -> bool: ...

    def is_app_unlink_user_details(self) -> bool: ...

    def is_integration_connected_details(self) -> bool: ...

    def is_integration_disconnected_details(self) -> bool: ...

    def is_file_add_comment_details(self) -> bool: ...

    def is_file_change_comment_subscription_details(self) -> bool: ...

    def is_file_delete_comment_details(self) -> bool: ...

    def is_file_edit_comment_details(self) -> bool: ...

    def is_file_like_comment_details(self) -> bool: ...

    def is_file_resolve_comment_details(self) -> bool: ...

    def is_file_unlike_comment_details(self) -> bool: ...

    def is_file_unresolve_comment_details(self) -> bool: ...

    def is_governance_policy_add_folders_details(self) -> bool: ...

    def is_governance_policy_add_folder_failed_details(self) -> bool: ...

    def is_governance_policy_content_disposed_details(self) -> bool: ...

    def is_governance_policy_create_details(self) -> bool: ...

    def is_governance_policy_delete_details(self) -> bool: ...

    def is_governance_policy_edit_details_details(self) -> bool: ...

    def is_governance_policy_edit_duration_details(self) -> bool: ...

    def is_governance_policy_export_created_details(self) -> bool: ...

    def is_governance_policy_export_removed_details(self) -> bool: ...

    def is_governance_policy_remove_folders_details(self) -> bool: ...

    def is_governance_policy_report_created_details(self) -> bool: ...

    def is_governance_policy_zip_part_downloaded_details(self) -> bool: ...

    def is_legal_holds_activate_a_hold_details(self) -> bool: ...

    def is_legal_holds_add_members_details(self) -> bool: ...

    def is_legal_holds_change_hold_details_details(self) -> bool: ...

    def is_legal_holds_change_hold_name_details(self) -> bool: ...

    def is_legal_holds_export_a_hold_details(self) -> bool: ...

    def is_legal_holds_export_cancelled_details(self) -> bool: ...

    def is_legal_holds_export_downloaded_details(self) -> bool: ...

    def is_legal_holds_export_removed_details(self) -> bool: ...

    def is_legal_holds_release_a_hold_details(self) -> bool: ...

    def is_legal_holds_remove_members_details(self) -> bool: ...

    def is_legal_holds_report_a_hold_details(self) -> bool: ...

    def is_device_change_ip_desktop_details(self) -> bool: ...

    def is_device_change_ip_mobile_details(self) -> bool: ...

    def is_device_change_ip_web_details(self) -> bool: ...

    def is_device_delete_on_unlink_fail_details(self) -> bool: ...

    def is_device_delete_on_unlink_success_details(self) -> bool: ...

    def is_device_link_fail_details(self) -> bool: ...

    def is_device_link_success_details(self) -> bool: ...

    def is_device_management_disabled_details(self) -> bool: ...

    def is_device_management_enabled_details(self) -> bool: ...

    def is_device_sync_backup_status_changed_details(self) -> bool: ...

    def is_device_unlink_details(self) -> bool: ...

    def is_dropbox_passwords_exported_details(self) -> bool: ...

    def is_dropbox_passwords_new_device_enrolled_details(self) -> bool: ...

    def is_emm_refresh_auth_token_details(self) -> bool: ...

    def is_account_capture_change_availability_details(self) -> bool: ...

    def is_account_capture_migrate_account_details(self) -> bool: ...

    def is_account_capture_notification_emails_sent_details(self) -> bool: ...

    def is_account_capture_relinquish_account_details(self) -> bool: ...

    def is_disabled_domain_invites_details(self) -> bool: ...

    def is_domain_invites_approve_request_to_join_team_details(self) -> bool: ...

    def is_domain_invites_decline_request_to_join_team_details(self) -> bool: ...

    def is_domain_invites_email_existing_users_details(self) -> bool: ...

    def is_domain_invites_request_to_join_team_details(self) -> bool: ...

    def is_domain_invites_set_invite_new_user_pref_to_no_details(self) -> bool: ...

    def is_domain_invites_set_invite_new_user_pref_to_yes_details(self) -> bool: ...

    def is_domain_verification_add_domain_fail_details(self) -> bool: ...

    def is_domain_verification_add_domain_success_details(self) -> bool: ...

    def is_domain_verification_remove_domain_details(self) -> bool: ...

    def is_enabled_domain_invites_details(self) -> bool: ...

    def is_apply_naming_convention_details(self) -> bool: ...

    def is_create_folder_details(self) -> bool: ...

    def is_file_add_details(self) -> bool: ...

    def is_file_copy_details(self) -> bool: ...

    def is_file_delete_details(self) -> bool: ...

    def is_file_download_details(self) -> bool: ...

    def is_file_edit_details(self) -> bool: ...

    def is_file_get_copy_reference_details(self) -> bool: ...

    def is_file_locking_lock_status_changed_details(self) -> bool: ...

    def is_file_move_details(self) -> bool: ...

    def is_file_permanently_delete_details(self) -> bool: ...

    def is_file_preview_details(self) -> bool: ...

    def is_file_rename_details(self) -> bool: ...

    def is_file_restore_details(self) -> bool: ...

    def is_file_revert_details(self) -> bool: ...

    def is_file_rollback_changes_details(self) -> bool: ...

    def is_file_save_copy_reference_details(self) -> bool: ...

    def is_folder_overview_description_changed_details(self) -> bool: ...

    def is_folder_overview_item_pinned_details(self) -> bool: ...

    def is_folder_overview_item_unpinned_details(self) -> bool: ...

    def is_object_label_added_details(self) -> bool: ...

    def is_object_label_removed_details(self) -> bool: ...

    def is_object_label_updated_value_details(self) -> bool: ...

    def is_organize_folder_with_tidy_details(self) -> bool: ...

    def is_rewind_folder_details(self) -> bool: ...

    def is_undo_naming_convention_details(self) -> bool: ...

    def is_undo_organize_folder_with_tidy_details(self) -> bool: ...

    def is_user_tags_added_details(self) -> bool: ...

    def is_user_tags_removed_details(self) -> bool: ...

    def is_email_ingest_receive_file_details(self) -> bool: ...

    def is_file_request_change_details(self) -> bool: ...

    def is_file_request_close_details(self) -> bool: ...

    def is_file_request_create_details(self) -> bool: ...

    def is_file_request_delete_details(self) -> bool: ...

    def is_file_request_receive_file_details(self) -> bool: ...

    def is_group_add_external_id_details(self) -> bool: ...

    def is_group_add_member_details(self) -> bool: ...

    def is_group_change_external_id_details(self) -> bool: ...

    def is_group_change_management_type_details(self) -> bool: ...

    def is_group_change_member_role_details(self) -> bool: ...

    def is_group_create_details(self) -> bool: ...

    def is_group_delete_details(self) -> bool: ...

    def is_group_description_updated_details(self) -> bool: ...

    def is_group_join_policy_updated_details(self) -> bool: ...

    def is_group_moved_details(self) -> bool: ...

    def is_group_remove_external_id_details(self) -> bool: ...

    def is_group_remove_member_details(self) -> bool: ...

    def is_group_rename_details(self) -> bool: ...

    def is_account_lock_or_unlocked_details(self) -> bool: ...

    def is_emm_error_details(self) -> bool: ...

    def is_guest_admin_signed_in_via_trusted_teams_details(self) -> bool: ...

    def is_guest_admin_signed_out_via_trusted_teams_details(self) -> bool: ...

    def is_login_fail_details(self) -> bool: ...

    def is_login_success_details(self) -> bool: ...

    def is_logout_details(self) -> bool: ...

    def is_reseller_support_session_end_details(self) -> bool: ...

    def is_reseller_support_session_start_details(self) -> bool: ...

    def is_sign_in_as_session_end_details(self) -> bool: ...

    def is_sign_in_as_session_start_details(self) -> bool: ...

    def is_sso_error_details(self) -> bool: ...

    def is_create_team_invite_link_details(self) -> bool: ...

    def is_delete_team_invite_link_details(self) -> bool: ...

    def is_member_add_external_id_details(self) -> bool: ...

    def is_member_add_name_details(self) -> bool: ...

    def is_member_change_admin_role_details(self) -> bool: ...

    def is_member_change_email_details(self) -> bool: ...

    def is_member_change_external_id_details(self) -> bool: ...

    def is_member_change_membership_type_details(self) -> bool: ...

    def is_member_change_name_details(self) -> bool: ...

    def is_member_change_reseller_role_details(self) -> bool: ...

    def is_member_change_status_details(self) -> bool: ...

    def is_member_delete_manual_contacts_details(self) -> bool: ...

    def is_member_delete_profile_photo_details(self) -> bool: ...

    def is_member_permanently_delete_account_contents_details(self) -> bool: ...

    def is_member_remove_external_id_details(self) -> bool: ...

    def is_member_set_profile_photo_details(self) -> bool: ...

    def is_member_space_limits_add_custom_quota_details(self) -> bool: ...

    def is_member_space_limits_change_custom_quota_details(self) -> bool: ...

    def is_member_space_limits_change_status_details(self) -> bool: ...

    def is_member_space_limits_remove_custom_quota_details(self) -> bool: ...

    def is_member_suggest_details(self) -> bool: ...

    def is_member_transfer_account_contents_details(self) -> bool: ...

    def is_pending_secondary_email_added_details(self) -> bool: ...

    def is_secondary_email_deleted_details(self) -> bool: ...

    def is_secondary_email_verified_details(self) -> bool: ...

    def is_secondary_mails_policy_changed_details(self) -> bool: ...

    def is_binder_add_page_details(self) -> bool: ...

    def is_binder_add_section_details(self) -> bool: ...

    def is_binder_remove_page_details(self) -> bool: ...

    def is_binder_remove_section_details(self) -> bool: ...

    def is_binder_rename_page_details(self) -> bool: ...

    def is_binder_rename_section_details(self) -> bool: ...

    def is_binder_reorder_page_details(self) -> bool: ...

    def is_binder_reorder_section_details(self) -> bool: ...

    def is_paper_content_add_member_details(self) -> bool: ...

    def is_paper_content_add_to_folder_details(self) -> bool: ...

    def is_paper_content_archive_details(self) -> bool: ...

    def is_paper_content_create_details(self) -> bool: ...

    def is_paper_content_permanently_delete_details(self) -> bool: ...

    def is_paper_content_remove_from_folder_details(self) -> bool: ...

    def is_paper_content_remove_member_details(self) -> bool: ...

    def is_paper_content_rename_details(self) -> bool: ...

    def is_paper_content_restore_details(self) -> bool: ...

    def is_paper_doc_add_comment_details(self) -> bool: ...

    def is_paper_doc_change_member_role_details(self) -> bool: ...

    def is_paper_doc_change_sharing_policy_details(self) -> bool: ...

    def is_paper_doc_change_subscription_details(self) -> bool: ...

    def is_paper_doc_deleted_details(self) -> bool: ...

    def is_paper_doc_delete_comment_details(self) -> bool: ...

    def is_paper_doc_download_details(self) -> bool: ...

    def is_paper_doc_edit_details(self) -> bool: ...

    def is_paper_doc_edit_comment_details(self) -> bool: ...

    def is_paper_doc_followed_details(self) -> bool: ...

    def is_paper_doc_mention_details(self) -> bool: ...

    def is_paper_doc_ownership_changed_details(self) -> bool: ...

    def is_paper_doc_request_access_details(self) -> bool: ...

    def is_paper_doc_resolve_comment_details(self) -> bool: ...

    def is_paper_doc_revert_details(self) -> bool: ...

    def is_paper_doc_slack_share_details(self) -> bool: ...

    def is_paper_doc_team_invite_details(self) -> bool: ...

    def is_paper_doc_trashed_details(self) -> bool: ...

    def is_paper_doc_unresolve_comment_details(self) -> bool: ...

    def is_paper_doc_untrashed_details(self) -> bool: ...

    def is_paper_doc_view_details(self) -> bool: ...

    def is_paper_external_view_allow_details(self) -> bool: ...

    def is_paper_external_view_default_team_details(self) -> bool: ...

    def is_paper_external_view_forbid_details(self) -> bool: ...

    def is_paper_folder_change_subscription_details(self) -> bool: ...

    def is_paper_folder_deleted_details(self) -> bool: ...

    def is_paper_folder_followed_details(self) -> bool: ...

    def is_paper_folder_team_invite_details(self) -> bool: ...

    def is_paper_published_link_change_permission_details(self) -> bool: ...

    def is_paper_published_link_create_details(self) -> bool: ...

    def is_paper_published_link_disabled_details(self) -> bool: ...

    def is_paper_published_link_view_details(self) -> bool: ...

    def is_password_change_details(self) -> bool: ...

    def is_password_reset_details(self) -> bool: ...

    def is_password_reset_all_details(self) -> bool: ...

    def is_classification_create_report_details(self) -> bool: ...

    def is_classification_create_report_fail_details(self) -> bool: ...

    def is_emm_create_exceptions_report_details(self) -> bool: ...

    def is_emm_create_usage_report_details(self) -> bool: ...

    def is_export_members_report_details(self) -> bool: ...

    def is_export_members_report_fail_details(self) -> bool: ...

    def is_external_sharing_create_report_details(self) -> bool: ...

    def is_external_sharing_report_failed_details(self) -> bool: ...

    def is_no_expiration_link_gen_create_report_details(self) -> bool: ...

    def is_no_expiration_link_gen_report_failed_details(self) -> bool: ...

    def is_no_password_link_gen_create_report_details(self) -> bool: ...

    def is_no_password_link_gen_report_failed_details(self) -> bool: ...

    def is_no_password_link_view_create_report_details(self) -> bool: ...

    def is_no_password_link_view_report_failed_details(self) -> bool: ...

    def is_outdated_link_view_create_report_details(self) -> bool: ...

    def is_outdated_link_view_report_failed_details(self) -> bool: ...

    def is_paper_admin_export_start_details(self) -> bool: ...

    def is_smart_sync_create_admin_privilege_report_details(self) -> bool: ...

    def is_team_activity_create_report_details(self) -> bool: ...

    def is_team_activity_create_report_fail_details(self) -> bool: ...

    def is_collection_share_details(self) -> bool: ...

    def is_file_transfers_file_add_details(self) -> bool: ...

    def is_file_transfers_transfer_delete_details(self) -> bool: ...

    def is_file_transfers_transfer_download_details(self) -> bool: ...

    def is_file_transfers_transfer_send_details(self) -> bool: ...

    def is_file_transfers_transfer_view_details(self) -> bool: ...

    def is_note_acl_invite_only_details(self) -> bool: ...

    def is_note_acl_link_details(self) -> bool: ...

    def is_note_acl_team_link_details(self) -> bool: ...

    def is_note_shared_details(self) -> bool: ...

    def is_note_share_receive_details(self) -> bool: ...

    def is_open_note_shared_details(self) -> bool: ...

    def is_sf_add_group_details(self) -> bool: ...

    def is_sf_allow_non_members_to_view_shared_links_details(self) -> bool: ...

    def is_sf_external_invite_warn_details(self) -> bool: ...

    def is_sf_fb_invite_details(self) -> bool: ...

    def is_sf_fb_invite_change_role_details(self) -> bool: ...

    def is_sf_fb_uninvite_details(self) -> bool: ...

    def is_sf_invite_group_details(self) -> bool: ...

    def is_sf_team_grant_access_details(self) -> bool: ...

    def is_sf_team_invite_details(self) -> bool: ...

    def is_sf_team_invite_change_role_details(self) -> bool: ...

    def is_sf_team_join_details(self) -> bool: ...

    def is_sf_team_join_from_oob_link_details(self) -> bool: ...

    def is_sf_team_uninvite_details(self) -> bool: ...

    def is_shared_content_add_invitees_details(self) -> bool: ...

    def is_shared_content_add_link_expiry_details(self) -> bool: ...

    def is_shared_content_add_link_password_details(self) -> bool: ...

    def is_shared_content_add_member_details(self) -> bool: ...

    def is_shared_content_change_downloads_policy_details(self) -> bool: ...

    def is_shared_content_change_invitee_role_details(self) -> bool: ...

    def is_shared_content_change_link_audience_details(self) -> bool: ...

    def is_shared_content_change_link_expiry_details(self) -> bool: ...

    def is_shared_content_change_link_password_details(self) -> bool: ...

    def is_shared_content_change_member_role_details(self) -> bool: ...

    def is_shared_content_change_viewer_info_policy_details(self) -> bool: ...

    def is_shared_content_claim_invitation_details(self) -> bool: ...

    def is_shared_content_copy_details(self) -> bool: ...

    def is_shared_content_download_details(self) -> bool: ...

    def is_shared_content_relinquish_membership_details(self) -> bool: ...

    def is_shared_content_remove_invitees_details(self) -> bool: ...

    def is_shared_content_remove_link_expiry_details(self) -> bool: ...

    def is_shared_content_remove_link_password_details(self) -> bool: ...

    def is_shared_content_remove_member_details(self) -> bool: ...

    def is_shared_content_request_access_details(self) -> bool: ...

    def is_shared_content_restore_invitees_details(self) -> bool: ...

    def is_shared_content_restore_member_details(self) -> bool: ...

    def is_shared_content_unshare_details(self) -> bool: ...

    def is_shared_content_view_details(self) -> bool: ...

    def is_shared_folder_change_link_policy_details(self) -> bool: ...

    def is_shared_folder_change_members_inheritance_policy_details(self) -> bool: ...

    def is_shared_folder_change_members_management_policy_details(self) -> bool: ...

    def is_shared_folder_change_members_policy_details(self) -> bool: ...

    def is_shared_folder_create_details(self) -> bool: ...

    def is_shared_folder_decline_invitation_details(self) -> bool: ...

    def is_shared_folder_mount_details(self) -> bool: ...

    def is_shared_folder_nest_details(self) -> bool: ...

    def is_shared_folder_transfer_ownership_details(self) -> bool: ...

    def is_shared_folder_unmount_details(self) -> bool: ...

    def is_shared_link_add_expiry_details(self) -> bool: ...

    def is_shared_link_change_expiry_details(self) -> bool: ...

    def is_shared_link_change_visibility_details(self) -> bool: ...

    def is_shared_link_copy_details(self) -> bool: ...

    def is_shared_link_create_details(self) -> bool: ...

    def is_shared_link_disable_details(self) -> bool: ...

    def is_shared_link_download_details(self) -> bool: ...

    def is_shared_link_remove_expiry_details(self) -> bool: ...

    def is_shared_link_settings_add_expiration_details(self) -> bool: ...

    def is_shared_link_settings_add_password_details(self) -> bool: ...

    def is_shared_link_settings_allow_download_disabled_details(self) -> bool: ...

    def is_shared_link_settings_allow_download_enabled_details(self) -> bool: ...

    def is_shared_link_settings_change_audience_details(self) -> bool: ...

    def is_shared_link_settings_change_expiration_details(self) -> bool: ...

    def is_shared_link_settings_change_password_details(self) -> bool: ...

    def is_shared_link_settings_remove_expiration_details(self) -> bool: ...

    def is_shared_link_settings_remove_password_details(self) -> bool: ...

    def is_shared_link_share_details(self) -> bool: ...

    def is_shared_link_view_details(self) -> bool: ...

    def is_shared_note_opened_details(self) -> bool: ...

    def is_shmodel_disable_downloads_details(self) -> bool: ...

    def is_shmodel_enable_downloads_details(self) -> bool: ...

    def is_shmodel_group_share_details(self) -> bool: ...

    def is_showcase_access_granted_details(self) -> bool: ...

    def is_showcase_add_member_details(self) -> bool: ...

    def is_showcase_archived_details(self) -> bool: ...

    def is_showcase_created_details(self) -> bool: ...

    def is_showcase_delete_comment_details(self) -> bool: ...

    def is_showcase_edited_details(self) -> bool: ...

    def is_showcase_edit_comment_details(self) -> bool: ...

    def is_showcase_file_added_details(self) -> bool: ...

    def is_showcase_file_download_details(self) -> bool: ...

    def is_showcase_file_removed_details(self) -> bool: ...

    def is_showcase_file_view_details(self) -> bool: ...

    def is_showcase_permanently_deleted_details(self) -> bool: ...

    def is_showcase_post_comment_details(self) -> bool: ...

    def is_showcase_remove_member_details(self) -> bool: ...

    def is_showcase_renamed_details(self) -> bool: ...

    def is_showcase_request_access_details(self) -> bool: ...

    def is_showcase_resolve_comment_details(self) -> bool: ...

    def is_showcase_restored_details(self) -> bool: ...

    def is_showcase_trashed_details(self) -> bool: ...

    def is_showcase_trashed_deprecated_details(self) -> bool: ...

    def is_showcase_unresolve_comment_details(self) -> bool: ...

    def is_showcase_untrashed_details(self) -> bool: ...

    def is_showcase_untrashed_deprecated_details(self) -> bool: ...

    def is_showcase_view_details(self) -> bool: ...

    def is_sso_add_cert_details(self) -> bool: ...

    def is_sso_add_login_url_details(self) -> bool: ...

    def is_sso_add_logout_url_details(self) -> bool: ...

    def is_sso_change_cert_details(self) -> bool: ...

    def is_sso_change_login_url_details(self) -> bool: ...

    def is_sso_change_logout_url_details(self) -> bool: ...

    def is_sso_change_saml_identity_mode_details(self) -> bool: ...

    def is_sso_remove_cert_details(self) -> bool: ...

    def is_sso_remove_login_url_details(self) -> bool: ...

    def is_sso_remove_logout_url_details(self) -> bool: ...

    def is_team_folder_change_status_details(self) -> bool: ...

    def is_team_folder_create_details(self) -> bool: ...

    def is_team_folder_downgrade_details(self) -> bool: ...

    def is_team_folder_permanently_delete_details(self) -> bool: ...

    def is_team_folder_rename_details(self) -> bool: ...

    def is_team_selective_sync_settings_changed_details(self) -> bool: ...

    def is_account_capture_change_policy_details(self) -> bool: ...

    def is_allow_download_disabled_details(self) -> bool: ...

    def is_allow_download_enabled_details(self) -> bool: ...

    def is_app_permissions_changed_details(self) -> bool: ...

    def is_camera_uploads_policy_changed_details(self) -> bool: ...

    def is_capture_transcript_policy_changed_details(self) -> bool: ...

    def is_classification_change_policy_details(self) -> bool: ...

    def is_computer_backup_policy_changed_details(self) -> bool: ...

    def is_content_administration_policy_changed_details(self) -> bool: ...

    def is_data_placement_restriction_change_policy_details(self) -> bool: ...

    def is_data_placement_restriction_satisfy_policy_details(self) -> bool: ...

    def is_device_approvals_add_exception_details(self) -> bool: ...

    def is_device_approvals_change_desktop_policy_details(self) -> bool: ...

    def is_device_approvals_change_mobile_policy_details(self) -> bool: ...

    def is_device_approvals_change_overage_action_details(self) -> bool: ...

    def is_device_approvals_change_unlink_action_details(self) -> bool: ...

    def is_device_approvals_remove_exception_details(self) -> bool: ...

    def is_directory_restrictions_add_members_details(self) -> bool: ...

    def is_directory_restrictions_remove_members_details(self) -> bool: ...

    def is_email_ingest_policy_changed_details(self) -> bool: ...

    def is_emm_add_exception_details(self) -> bool: ...

    def is_emm_change_policy_details(self) -> bool: ...

    def is_emm_remove_exception_details(self) -> bool: ...

    def is_extended_version_history_change_policy_details(self) -> bool: ...

    def is_external_drive_backup_policy_changed_details(self) -> bool: ...

    def is_file_comments_change_policy_details(self) -> bool: ...

    def is_file_locking_policy_changed_details(self) -> bool: ...

    def is_file_requests_change_policy_details(self) -> bool: ...

    def is_file_requests_emails_enabled_details(self) -> bool: ...

    def is_file_requests_emails_restricted_to_team_only_details(self) -> bool: ...

    def is_file_transfers_policy_changed_details(self) -> bool: ...

    def is_google_sso_change_policy_details(self) -> bool: ...

    def is_group_user_management_change_policy_details(self) -> bool: ...

    def is_integration_policy_changed_details(self) -> bool: ...

    def is_invite_acceptance_email_policy_changed_details(self) -> bool: ...

    def is_member_requests_change_policy_details(self) -> bool: ...

    def is_member_send_invite_policy_changed_details(self) -> bool: ...

    def is_member_space_limits_add_exception_details(self) -> bool: ...

    def is_member_space_limits_change_caps_type_policy_details(self) -> bool: ...

    def is_member_space_limits_change_policy_details(self) -> bool: ...

    def is_member_space_limits_remove_exception_details(self) -> bool: ...

    def is_member_suggestions_change_policy_details(self) -> bool: ...

    def is_microsoft_office_addin_change_policy_details(self) -> bool: ...

    def is_network_control_change_policy_details(self) -> bool: ...

    def is_paper_change_deployment_policy_details(self) -> bool: ...

    def is_paper_change_member_link_policy_details(self) -> bool: ...

    def is_paper_change_member_policy_details(self) -> bool: ...

    def is_paper_change_policy_details(self) -> bool: ...

    def is_paper_default_folder_policy_changed_details(self) -> bool: ...

    def is_paper_desktop_policy_changed_details(self) -> bool: ...

    def is_paper_enabled_users_group_addition_details(self) -> bool: ...

    def is_paper_enabled_users_group_removal_details(self) -> bool: ...

    def is_password_strength_requirements_change_policy_details(self) -> bool: ...

    def is_permanent_delete_change_policy_details(self) -> bool: ...

    def is_reseller_support_change_policy_details(self) -> bool: ...

    def is_rewind_policy_changed_details(self) -> bool: ...

    def is_send_for_signature_policy_changed_details(self) -> bool: ...

    def is_sharing_change_folder_join_policy_details(self) -> bool: ...

    def is_sharing_change_link_allow_change_expiration_policy_details(self) -> bool: ...

    def is_sharing_change_link_default_expiration_policy_details(self) -> bool: ...

    def is_sharing_change_link_enforce_password_policy_details(self) -> bool: ...

    def is_sharing_change_link_policy_details(self) -> bool: ...

    def is_sharing_change_member_policy_details(self) -> bool: ...

    def is_showcase_change_download_policy_details(self) -> bool: ...

    def is_showcase_change_enabled_policy_details(self) -> bool: ...

    def is_showcase_change_external_sharing_policy_details(self) -> bool: ...

    def is_smarter_smart_sync_policy_changed_details(self) -> bool: ...

    def is_smart_sync_change_policy_details(self) -> bool: ...

    def is_smart_sync_not_opt_out_details(self) -> bool: ...

    def is_smart_sync_opt_out_details(self) -> bool: ...

    def is_sso_change_policy_details(self) -> bool: ...

    def is_team_branding_policy_changed_details(self) -> bool: ...

    def is_team_extensions_policy_changed_details(self) -> bool: ...

    def is_team_selective_sync_policy_changed_details(self) -> bool: ...

    def is_team_sharing_whitelist_subjects_changed_details(self) -> bool: ...

    def is_tfa_add_exception_details(self) -> bool: ...

    def is_tfa_change_policy_details(self) -> bool: ...

    def is_tfa_remove_exception_details(self) -> bool: ...

    def is_two_account_change_policy_details(self) -> bool: ...

    def is_viewer_info_policy_changed_details(self) -> bool: ...

    def is_watermarking_policy_changed_details(self) -> bool: ...

    def is_web_sessions_change_active_session_limit_details(self) -> bool: ...

    def is_web_sessions_change_fixed_length_policy_details(self) -> bool: ...

    def is_web_sessions_change_idle_length_policy_details(self) -> bool: ...

    def is_data_residency_migration_request_successful_details(self) -> bool: ...

    def is_data_residency_migration_request_unsuccessful_details(self) -> bool: ...

    def is_team_merge_from_details(self) -> bool: ...

    def is_team_merge_to_details(self) -> bool: ...

    def is_team_profile_add_background_details(self) -> bool: ...

    def is_team_profile_add_logo_details(self) -> bool: ...

    def is_team_profile_change_background_details(self) -> bool: ...

    def is_team_profile_change_default_language_details(self) -> bool: ...

    def is_team_profile_change_logo_details(self) -> bool: ...

    def is_team_profile_change_name_details(self) -> bool: ...

    def is_team_profile_remove_background_details(self) -> bool: ...

    def is_team_profile_remove_logo_details(self) -> bool: ...

    def is_tfa_add_backup_phone_details(self) -> bool: ...

    def is_tfa_add_security_key_details(self) -> bool: ...

    def is_tfa_change_backup_phone_details(self) -> bool: ...

    def is_tfa_change_status_details(self) -> bool: ...

    def is_tfa_remove_backup_phone_details(self) -> bool: ...

    def is_tfa_remove_security_key_details(self) -> bool: ...

    def is_tfa_reset_details(self) -> bool: ...

    def is_changed_enterprise_admin_role_details(self) -> bool: ...

    def is_changed_enterprise_connected_team_status_details(self) -> bool: ...

    def is_ended_enterprise_admin_session_details(self) -> bool: ...

    def is_ended_enterprise_admin_session_deprecated_details(self) -> bool: ...

    def is_enterprise_settings_locking_details(self) -> bool: ...

    def is_guest_admin_change_status_details(self) -> bool: ...

    def is_started_enterprise_admin_session_details(self) -> bool: ...

    def is_team_merge_request_accepted_details(self) -> bool: ...

    def is_team_merge_request_accepted_shown_to_primary_team_details(self) -> bool: ...

    def is_team_merge_request_accepted_shown_to_secondary_team_details(self) -> bool: ...

    def is_team_merge_request_auto_canceled_details(self) -> bool: ...

    def is_team_merge_request_canceled_details(self) -> bool: ...

    def is_team_merge_request_canceled_shown_to_primary_team_details(self) -> bool: ...

    def is_team_merge_request_canceled_shown_to_secondary_team_details(self) -> bool: ...

    def is_team_merge_request_expired_details(self) -> bool: ...

    def is_team_merge_request_expired_shown_to_primary_team_details(self) -> bool: ...

    def is_team_merge_request_expired_shown_to_secondary_team_details(self) -> bool: ...

    def is_team_merge_request_rejected_shown_to_primary_team_details(self) -> bool: ...

    def is_team_merge_request_rejected_shown_to_secondary_team_details(self) -> bool: ...

    def is_team_merge_request_reminder_details(self) -> bool: ...

    def is_team_merge_request_reminder_shown_to_primary_team_details(self) -> bool: ...

    def is_team_merge_request_reminder_shown_to_secondary_team_details(self) -> bool: ...

    def is_team_merge_request_revoked_details(self) -> bool: ...

    def is_team_merge_request_sent_shown_to_primary_team_details(self) -> bool: ...

    def is_team_merge_request_sent_shown_to_secondary_team_details(self) -> bool: ...

    def is_missing_details(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def admin_alerting_alert_state_changed_details(cls, val: AdminAlertingAlertStateChangedDetails) -> EventDetails: ...

    @classmethod
    def admin_alerting_changed_alert_config_details(cls, val: AdminAlertingChangedAlertConfigDetails) -> EventDetails: ...

    @classmethod
    def admin_alerting_triggered_alert_details(cls, val: AdminAlertingTriggeredAlertDetails) -> EventDetails: ...

    @classmethod
    def app_blocked_by_permissions_details(cls, val: AppBlockedByPermissionsDetails) -> EventDetails: ...

    @classmethod
    def app_link_team_details(cls, val: AppLinkTeamDetails) -> EventDetails: ...

    @classmethod
    def app_link_user_details(cls, val: AppLinkUserDetails) -> EventDetails: ...

    @classmethod
    def app_unlink_team_details(cls, val: AppUnlinkTeamDetails) -> EventDetails: ...

    @classmethod
    def app_unlink_user_details(cls, val: AppUnlinkUserDetails) -> EventDetails: ...

    @classmethod
    def integration_connected_details(cls, val: IntegrationConnectedDetails) -> EventDetails: ...

    @classmethod
    def integration_disconnected_details(cls, val: IntegrationDisconnectedDetails) -> EventDetails: ...

    @classmethod
    def file_add_comment_details(cls, val: FileAddCommentDetails) -> EventDetails: ...

    @classmethod
    def file_change_comment_subscription_details(cls, val: FileChangeCommentSubscriptionDetails) -> EventDetails: ...

    @classmethod
    def file_delete_comment_details(cls, val: FileDeleteCommentDetails) -> EventDetails: ...

    @classmethod
    def file_edit_comment_details(cls, val: FileEditCommentDetails) -> EventDetails: ...

    @classmethod
    def file_like_comment_details(cls, val: FileLikeCommentDetails) -> EventDetails: ...

    @classmethod
    def file_resolve_comment_details(cls, val: FileResolveCommentDetails) -> EventDetails: ...

    @classmethod
    def file_unlike_comment_details(cls, val: FileUnlikeCommentDetails) -> EventDetails: ...

    @classmethod
    def file_unresolve_comment_details(cls, val: FileUnresolveCommentDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_add_folders_details(cls, val: GovernancePolicyAddFoldersDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_add_folder_failed_details(cls, val: GovernancePolicyAddFolderFailedDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_content_disposed_details(cls, val: GovernancePolicyContentDisposedDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_create_details(cls, val: GovernancePolicyCreateDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_delete_details(cls, val: GovernancePolicyDeleteDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_edit_details_details(cls, val: GovernancePolicyEditDetailsDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_edit_duration_details(cls, val: GovernancePolicyEditDurationDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_export_created_details(cls, val: GovernancePolicyExportCreatedDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_export_removed_details(cls, val: GovernancePolicyExportRemovedDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_remove_folders_details(cls, val: GovernancePolicyRemoveFoldersDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_report_created_details(cls, val: GovernancePolicyReportCreatedDetails) -> EventDetails: ...

    @classmethod
    def governance_policy_zip_part_downloaded_details(cls, val: GovernancePolicyZipPartDownloadedDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_activate_a_hold_details(cls, val: LegalHoldsActivateAHoldDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_add_members_details(cls, val: LegalHoldsAddMembersDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_change_hold_details_details(cls, val: LegalHoldsChangeHoldDetailsDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_change_hold_name_details(cls, val: LegalHoldsChangeHoldNameDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_export_a_hold_details(cls, val: LegalHoldsExportAHoldDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_export_cancelled_details(cls, val: LegalHoldsExportCancelledDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_export_downloaded_details(cls, val: LegalHoldsExportDownloadedDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_export_removed_details(cls, val: LegalHoldsExportRemovedDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_release_a_hold_details(cls, val: LegalHoldsReleaseAHoldDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_remove_members_details(cls, val: LegalHoldsRemoveMembersDetails) -> EventDetails: ...

    @classmethod
    def legal_holds_report_a_hold_details(cls, val: LegalHoldsReportAHoldDetails) -> EventDetails: ...

    @classmethod
    def device_change_ip_desktop_details(cls, val: DeviceChangeIpDesktopDetails) -> EventDetails: ...

    @classmethod
    def device_change_ip_mobile_details(cls, val: DeviceChangeIpMobileDetails) -> EventDetails: ...

    @classmethod
    def device_change_ip_web_details(cls, val: DeviceChangeIpWebDetails) -> EventDetails: ...

    @classmethod
    def device_delete_on_unlink_fail_details(cls, val: DeviceDeleteOnUnlinkFailDetails) -> EventDetails: ...

    @classmethod
    def device_delete_on_unlink_success_details(cls, val: DeviceDeleteOnUnlinkSuccessDetails) -> EventDetails: ...

    @classmethod
    def device_link_fail_details(cls, val: DeviceLinkFailDetails) -> EventDetails: ...

    @classmethod
    def device_link_success_details(cls, val: DeviceLinkSuccessDetails) -> EventDetails: ...

    @classmethod
    def device_management_disabled_details(cls, val: DeviceManagementDisabledDetails) -> EventDetails: ...

    @classmethod
    def device_management_enabled_details(cls, val: DeviceManagementEnabledDetails) -> EventDetails: ...

    @classmethod
    def device_sync_backup_status_changed_details(cls, val: DeviceSyncBackupStatusChangedDetails) -> EventDetails: ...

    @classmethod
    def device_unlink_details(cls, val: DeviceUnlinkDetails) -> EventDetails: ...

    @classmethod
    def dropbox_passwords_exported_details(cls, val: DropboxPasswordsExportedDetails) -> EventDetails: ...

    @classmethod
    def dropbox_passwords_new_device_enrolled_details(cls, val: DropboxPasswordsNewDeviceEnrolledDetails) -> EventDetails: ...

    @classmethod
    def emm_refresh_auth_token_details(cls, val: EmmRefreshAuthTokenDetails) -> EventDetails: ...

    @classmethod
    def account_capture_change_availability_details(cls, val: AccountCaptureChangeAvailabilityDetails) -> EventDetails: ...

    @classmethod
    def account_capture_migrate_account_details(cls, val: AccountCaptureMigrateAccountDetails) -> EventDetails: ...

    @classmethod
    def account_capture_notification_emails_sent_details(cls, val: AccountCaptureNotificationEmailsSentDetails) -> EventDetails: ...

    @classmethod
    def account_capture_relinquish_account_details(cls, val: AccountCaptureRelinquishAccountDetails) -> EventDetails: ...

    @classmethod
    def disabled_domain_invites_details(cls, val: DisabledDomainInvitesDetails) -> EventDetails: ...

    @classmethod
    def domain_invites_approve_request_to_join_team_details(cls, val: DomainInvitesApproveRequestToJoinTeamDetails) -> EventDetails: ...

    @classmethod
    def domain_invites_decline_request_to_join_team_details(cls, val: DomainInvitesDeclineRequestToJoinTeamDetails) -> EventDetails: ...

    @classmethod
    def domain_invites_email_existing_users_details(cls, val: DomainInvitesEmailExistingUsersDetails) -> EventDetails: ...

    @classmethod
    def domain_invites_request_to_join_team_details(cls, val: DomainInvitesRequestToJoinTeamDetails) -> EventDetails: ...

    @classmethod
    def domain_invites_set_invite_new_user_pref_to_no_details(cls, val: DomainInvitesSetInviteNewUserPrefToNoDetails) -> EventDetails: ...

    @classmethod
    def domain_invites_set_invite_new_user_pref_to_yes_details(cls, val: DomainInvitesSetInviteNewUserPrefToYesDetails) -> EventDetails: ...

    @classmethod
    def domain_verification_add_domain_fail_details(cls, val: DomainVerificationAddDomainFailDetails) -> EventDetails: ...

    @classmethod
    def domain_verification_add_domain_success_details(cls, val: DomainVerificationAddDomainSuccessDetails) -> EventDetails: ...

    @classmethod
    def domain_verification_remove_domain_details(cls, val: DomainVerificationRemoveDomainDetails) -> EventDetails: ...

    @classmethod
    def enabled_domain_invites_details(cls, val: EnabledDomainInvitesDetails) -> EventDetails: ...

    @classmethod
    def apply_naming_convention_details(cls, val: ApplyNamingConventionDetails) -> EventDetails: ...

    @classmethod
    def create_folder_details(cls, val: CreateFolderDetails) -> EventDetails: ...

    @classmethod
    def file_add_details(cls, val: FileAddDetails) -> EventDetails: ...

    @classmethod
    def file_copy_details(cls, val: FileCopyDetails) -> EventDetails: ...

    @classmethod
    def file_delete_details(cls, val: FileDeleteDetails) -> EventDetails: ...

    @classmethod
    def file_download_details(cls, val: FileDownloadDetails) -> EventDetails: ...

    @classmethod
    def file_edit_details(cls, val: FileEditDetails) -> EventDetails: ...

    @classmethod
    def file_get_copy_reference_details(cls, val: FileGetCopyReferenceDetails) -> EventDetails: ...

    @classmethod
    def file_locking_lock_status_changed_details(cls, val: FileLockingLockStatusChangedDetails) -> EventDetails: ...

    @classmethod
    def file_move_details(cls, val: FileMoveDetails) -> EventDetails: ...

    @classmethod
    def file_permanently_delete_details(cls, val: FilePermanentlyDeleteDetails) -> EventDetails: ...

    @classmethod
    def file_preview_details(cls, val: FilePreviewDetails) -> EventDetails: ...

    @classmethod
    def file_rename_details(cls, val: FileRenameDetails) -> EventDetails: ...

    @classmethod
    def file_restore_details(cls, val: FileRestoreDetails) -> EventDetails: ...

    @classmethod
    def file_revert_details(cls, val: FileRevertDetails) -> EventDetails: ...

    @classmethod
    def file_rollback_changes_details(cls, val: FileRollbackChangesDetails) -> EventDetails: ...

    @classmethod
    def file_save_copy_reference_details(cls, val: FileSaveCopyReferenceDetails) -> EventDetails: ...

    @classmethod
    def folder_overview_description_changed_details(cls, val: FolderOverviewDescriptionChangedDetails) -> EventDetails: ...

    @classmethod
    def folder_overview_item_pinned_details(cls, val: FolderOverviewItemPinnedDetails) -> EventDetails: ...

    @classmethod
    def folder_overview_item_unpinned_details(cls, val: FolderOverviewItemUnpinnedDetails) -> EventDetails: ...

    @classmethod
    def object_label_added_details(cls, val: ObjectLabelAddedDetails) -> EventDetails: ...

    @classmethod
    def object_label_removed_details(cls, val: ObjectLabelRemovedDetails) -> EventDetails: ...

    @classmethod
    def object_label_updated_value_details(cls, val: ObjectLabelUpdatedValueDetails) -> EventDetails: ...

    @classmethod
    def organize_folder_with_tidy_details(cls, val: OrganizeFolderWithTidyDetails) -> EventDetails: ...

    @classmethod
    def rewind_folder_details(cls, val: RewindFolderDetails) -> EventDetails: ...

    @classmethod
    def undo_naming_convention_details(cls, val: UndoNamingConventionDetails) -> EventDetails: ...

    @classmethod
    def undo_organize_folder_with_tidy_details(cls, val: UndoOrganizeFolderWithTidyDetails) -> EventDetails: ...

    @classmethod
    def user_tags_added_details(cls, val: UserTagsAddedDetails) -> EventDetails: ...

    @classmethod
    def user_tags_removed_details(cls, val: UserTagsRemovedDetails) -> EventDetails: ...

    @classmethod
    def email_ingest_receive_file_details(cls, val: EmailIngestReceiveFileDetails) -> EventDetails: ...

    @classmethod
    def file_request_change_details(cls, val: FileRequestChangeDetails) -> EventDetails: ...

    @classmethod
    def file_request_close_details(cls, val: FileRequestCloseDetails) -> EventDetails: ...

    @classmethod
    def file_request_create_details(cls, val: FileRequestCreateDetails) -> EventDetails: ...

    @classmethod
    def file_request_delete_details(cls, val: FileRequestDeleteDetails) -> EventDetails: ...

    @classmethod
    def file_request_receive_file_details(cls, val: FileRequestReceiveFileDetails) -> EventDetails: ...

    @classmethod
    def group_add_external_id_details(cls, val: GroupAddExternalIdDetails) -> EventDetails: ...

    @classmethod
    def group_add_member_details(cls, val: GroupAddMemberDetails) -> EventDetails: ...

    @classmethod
    def group_change_external_id_details(cls, val: GroupChangeExternalIdDetails) -> EventDetails: ...

    @classmethod
    def group_change_management_type_details(cls, val: GroupChangeManagementTypeDetails) -> EventDetails: ...

    @classmethod
    def group_change_member_role_details(cls, val: GroupChangeMemberRoleDetails) -> EventDetails: ...

    @classmethod
    def group_create_details(cls, val: GroupCreateDetails) -> EventDetails: ...

    @classmethod
    def group_delete_details(cls, val: GroupDeleteDetails) -> EventDetails: ...

    @classmethod
    def group_description_updated_details(cls, val: GroupDescriptionUpdatedDetails) -> EventDetails: ...

    @classmethod
    def group_join_policy_updated_details(cls, val: GroupJoinPolicyUpdatedDetails) -> EventDetails: ...

    @classmethod
    def group_moved_details(cls, val: GroupMovedDetails) -> EventDetails: ...

    @classmethod
    def group_remove_external_id_details(cls, val: GroupRemoveExternalIdDetails) -> EventDetails: ...

    @classmethod
    def group_remove_member_details(cls, val: GroupRemoveMemberDetails) -> EventDetails: ...

    @classmethod
    def group_rename_details(cls, val: GroupRenameDetails) -> EventDetails: ...

    @classmethod
    def account_lock_or_unlocked_details(cls, val: AccountLockOrUnlockedDetails) -> EventDetails: ...

    @classmethod
    def emm_error_details(cls, val: EmmErrorDetails) -> EventDetails: ...

    @classmethod
    def guest_admin_signed_in_via_trusted_teams_details(cls, val: GuestAdminSignedInViaTrustedTeamsDetails) -> EventDetails: ...

    @classmethod
    def guest_admin_signed_out_via_trusted_teams_details(cls, val: GuestAdminSignedOutViaTrustedTeamsDetails) -> EventDetails: ...

    @classmethod
    def login_fail_details(cls, val: LoginFailDetails) -> EventDetails: ...

    @classmethod
    def login_success_details(cls, val: LoginSuccessDetails) -> EventDetails: ...

    @classmethod
    def logout_details(cls, val: LogoutDetails) -> EventDetails: ...

    @classmethod
    def reseller_support_session_end_details(cls, val: ResellerSupportSessionEndDetails) -> EventDetails: ...

    @classmethod
    def reseller_support_session_start_details(cls, val: ResellerSupportSessionStartDetails) -> EventDetails: ...

    @classmethod
    def sign_in_as_session_end_details(cls, val: SignInAsSessionEndDetails) -> EventDetails: ...

    @classmethod
    def sign_in_as_session_start_details(cls, val: SignInAsSessionStartDetails) -> EventDetails: ...

    @classmethod
    def sso_error_details(cls, val: SsoErrorDetails) -> EventDetails: ...

    @classmethod
    def create_team_invite_link_details(cls, val: CreateTeamInviteLinkDetails) -> EventDetails: ...

    @classmethod
    def delete_team_invite_link_details(cls, val: DeleteTeamInviteLinkDetails) -> EventDetails: ...

    @classmethod
    def member_add_external_id_details(cls, val: MemberAddExternalIdDetails) -> EventDetails: ...

    @classmethod
    def member_add_name_details(cls, val: MemberAddNameDetails) -> EventDetails: ...

    @classmethod
    def member_change_admin_role_details(cls, val: MemberChangeAdminRoleDetails) -> EventDetails: ...

    @classmethod
    def member_change_email_details(cls, val: MemberChangeEmailDetails) -> EventDetails: ...

    @classmethod
    def member_change_external_id_details(cls, val: MemberChangeExternalIdDetails) -> EventDetails: ...

    @classmethod
    def member_change_membership_type_details(cls, val: MemberChangeMembershipTypeDetails) -> EventDetails: ...

    @classmethod
    def member_change_name_details(cls, val: MemberChangeNameDetails) -> EventDetails: ...

    @classmethod
    def member_change_reseller_role_details(cls, val: MemberChangeResellerRoleDetails) -> EventDetails: ...

    @classmethod
    def member_change_status_details(cls, val: MemberChangeStatusDetails) -> EventDetails: ...

    @classmethod
    def member_delete_manual_contacts_details(cls, val: MemberDeleteManualContactsDetails) -> EventDetails: ...

    @classmethod
    def member_delete_profile_photo_details(cls, val: MemberDeleteProfilePhotoDetails) -> EventDetails: ...

    @classmethod
    def member_permanently_delete_account_contents_details(cls, val: MemberPermanentlyDeleteAccountContentsDetails) -> EventDetails: ...

    @classmethod
    def member_remove_external_id_details(cls, val: MemberRemoveExternalIdDetails) -> EventDetails: ...

    @classmethod
    def member_set_profile_photo_details(cls, val: MemberSetProfilePhotoDetails) -> EventDetails: ...

    @classmethod
    def member_space_limits_add_custom_quota_details(cls, val: MemberSpaceLimitsAddCustomQuotaDetails) -> EventDetails: ...

    @classmethod
    def member_space_limits_change_custom_quota_details(cls, val: MemberSpaceLimitsChangeCustomQuotaDetails) -> EventDetails: ...

    @classmethod
    def member_space_limits_change_status_details(cls, val: MemberSpaceLimitsChangeStatusDetails) -> EventDetails: ...

    @classmethod
    def member_space_limits_remove_custom_quota_details(cls, val: MemberSpaceLimitsRemoveCustomQuotaDetails) -> EventDetails: ...

    @classmethod
    def member_suggest_details(cls, val: MemberSuggestDetails) -> EventDetails: ...

    @classmethod
    def member_transfer_account_contents_details(cls, val: MemberTransferAccountContentsDetails) -> EventDetails: ...

    @classmethod
    def pending_secondary_email_added_details(cls, val: PendingSecondaryEmailAddedDetails) -> EventDetails: ...

    @classmethod
    def secondary_email_deleted_details(cls, val: SecondaryEmailDeletedDetails) -> EventDetails: ...

    @classmethod
    def secondary_email_verified_details(cls, val: SecondaryEmailVerifiedDetails) -> EventDetails: ...

    @classmethod
    def secondary_mails_policy_changed_details(cls, val: SecondaryMailsPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def binder_add_page_details(cls, val: BinderAddPageDetails) -> EventDetails: ...

    @classmethod
    def binder_add_section_details(cls, val: BinderAddSectionDetails) -> EventDetails: ...

    @classmethod
    def binder_remove_page_details(cls, val: BinderRemovePageDetails) -> EventDetails: ...

    @classmethod
    def binder_remove_section_details(cls, val: BinderRemoveSectionDetails) -> EventDetails: ...

    @classmethod
    def binder_rename_page_details(cls, val: BinderRenamePageDetails) -> EventDetails: ...

    @classmethod
    def binder_rename_section_details(cls, val: BinderRenameSectionDetails) -> EventDetails: ...

    @classmethod
    def binder_reorder_page_details(cls, val: BinderReorderPageDetails) -> EventDetails: ...

    @classmethod
    def binder_reorder_section_details(cls, val: BinderReorderSectionDetails) -> EventDetails: ...

    @classmethod
    def paper_content_add_member_details(cls, val: PaperContentAddMemberDetails) -> EventDetails: ...

    @classmethod
    def paper_content_add_to_folder_details(cls, val: PaperContentAddToFolderDetails) -> EventDetails: ...

    @classmethod
    def paper_content_archive_details(cls, val: PaperContentArchiveDetails) -> EventDetails: ...

    @classmethod
    def paper_content_create_details(cls, val: PaperContentCreateDetails) -> EventDetails: ...

    @classmethod
    def paper_content_permanently_delete_details(cls, val: PaperContentPermanentlyDeleteDetails) -> EventDetails: ...

    @classmethod
    def paper_content_remove_from_folder_details(cls, val: PaperContentRemoveFromFolderDetails) -> EventDetails: ...

    @classmethod
    def paper_content_remove_member_details(cls, val: PaperContentRemoveMemberDetails) -> EventDetails: ...

    @classmethod
    def paper_content_rename_details(cls, val: PaperContentRenameDetails) -> EventDetails: ...

    @classmethod
    def paper_content_restore_details(cls, val: PaperContentRestoreDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_add_comment_details(cls, val: PaperDocAddCommentDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_change_member_role_details(cls, val: PaperDocChangeMemberRoleDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_change_sharing_policy_details(cls, val: PaperDocChangeSharingPolicyDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_change_subscription_details(cls, val: PaperDocChangeSubscriptionDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_deleted_details(cls, val: PaperDocDeletedDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_delete_comment_details(cls, val: PaperDocDeleteCommentDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_download_details(cls, val: PaperDocDownloadDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_edit_details(cls, val: PaperDocEditDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_edit_comment_details(cls, val: PaperDocEditCommentDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_followed_details(cls, val: PaperDocFollowedDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_mention_details(cls, val: PaperDocMentionDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_ownership_changed_details(cls, val: PaperDocOwnershipChangedDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_request_access_details(cls, val: PaperDocRequestAccessDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_resolve_comment_details(cls, val: PaperDocResolveCommentDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_revert_details(cls, val: PaperDocRevertDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_slack_share_details(cls, val: PaperDocSlackShareDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_team_invite_details(cls, val: PaperDocTeamInviteDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_trashed_details(cls, val: PaperDocTrashedDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_unresolve_comment_details(cls, val: PaperDocUnresolveCommentDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_untrashed_details(cls, val: PaperDocUntrashedDetails) -> EventDetails: ...

    @classmethod
    def paper_doc_view_details(cls, val: PaperDocViewDetails) -> EventDetails: ...

    @classmethod
    def paper_external_view_allow_details(cls, val: PaperExternalViewAllowDetails) -> EventDetails: ...

    @classmethod
    def paper_external_view_default_team_details(cls, val: PaperExternalViewDefaultTeamDetails) -> EventDetails: ...

    @classmethod
    def paper_external_view_forbid_details(cls, val: PaperExternalViewForbidDetails) -> EventDetails: ...

    @classmethod
    def paper_folder_change_subscription_details(cls, val: PaperFolderChangeSubscriptionDetails) -> EventDetails: ...

    @classmethod
    def paper_folder_deleted_details(cls, val: PaperFolderDeletedDetails) -> EventDetails: ...

    @classmethod
    def paper_folder_followed_details(cls, val: PaperFolderFollowedDetails) -> EventDetails: ...

    @classmethod
    def paper_folder_team_invite_details(cls, val: PaperFolderTeamInviteDetails) -> EventDetails: ...

    @classmethod
    def paper_published_link_change_permission_details(cls, val: PaperPublishedLinkChangePermissionDetails) -> EventDetails: ...

    @classmethod
    def paper_published_link_create_details(cls, val: PaperPublishedLinkCreateDetails) -> EventDetails: ...

    @classmethod
    def paper_published_link_disabled_details(cls, val: PaperPublishedLinkDisabledDetails) -> EventDetails: ...

    @classmethod
    def paper_published_link_view_details(cls, val: PaperPublishedLinkViewDetails) -> EventDetails: ...

    @classmethod
    def password_change_details(cls, val: PasswordChangeDetails) -> EventDetails: ...

    @classmethod
    def password_reset_details(cls, val: PasswordResetDetails) -> EventDetails: ...

    @classmethod
    def password_reset_all_details(cls, val: PasswordResetAllDetails) -> EventDetails: ...

    @classmethod
    def classification_create_report_details(cls, val: ClassificationCreateReportDetails) -> EventDetails: ...

    @classmethod
    def classification_create_report_fail_details(cls, val: ClassificationCreateReportFailDetails) -> EventDetails: ...

    @classmethod
    def emm_create_exceptions_report_details(cls, val: EmmCreateExceptionsReportDetails) -> EventDetails: ...

    @classmethod
    def emm_create_usage_report_details(cls, val: EmmCreateUsageReportDetails) -> EventDetails: ...

    @classmethod
    def export_members_report_details(cls, val: ExportMembersReportDetails) -> EventDetails: ...

    @classmethod
    def export_members_report_fail_details(cls, val: ExportMembersReportFailDetails) -> EventDetails: ...

    @classmethod
    def external_sharing_create_report_details(cls, val: ExternalSharingCreateReportDetails) -> EventDetails: ...

    @classmethod
    def external_sharing_report_failed_details(cls, val: ExternalSharingReportFailedDetails) -> EventDetails: ...

    @classmethod
    def no_expiration_link_gen_create_report_details(cls, val: NoExpirationLinkGenCreateReportDetails) -> EventDetails: ...

    @classmethod
    def no_expiration_link_gen_report_failed_details(cls, val: NoExpirationLinkGenReportFailedDetails) -> EventDetails: ...

    @classmethod
    def no_password_link_gen_create_report_details(cls, val: NoPasswordLinkGenCreateReportDetails) -> EventDetails: ...

    @classmethod
    def no_password_link_gen_report_failed_details(cls, val: NoPasswordLinkGenReportFailedDetails) -> EventDetails: ...

    @classmethod
    def no_password_link_view_create_report_details(cls, val: NoPasswordLinkViewCreateReportDetails) -> EventDetails: ...

    @classmethod
    def no_password_link_view_report_failed_details(cls, val: NoPasswordLinkViewReportFailedDetails) -> EventDetails: ...

    @classmethod
    def outdated_link_view_create_report_details(cls, val: OutdatedLinkViewCreateReportDetails) -> EventDetails: ...

    @classmethod
    def outdated_link_view_report_failed_details(cls, val: OutdatedLinkViewReportFailedDetails) -> EventDetails: ...

    @classmethod
    def paper_admin_export_start_details(cls, val: PaperAdminExportStartDetails) -> EventDetails: ...

    @classmethod
    def smart_sync_create_admin_privilege_report_details(cls, val: SmartSyncCreateAdminPrivilegeReportDetails) -> EventDetails: ...

    @classmethod
    def team_activity_create_report_details(cls, val: TeamActivityCreateReportDetails) -> EventDetails: ...

    @classmethod
    def team_activity_create_report_fail_details(cls, val: TeamActivityCreateReportFailDetails) -> EventDetails: ...

    @classmethod
    def collection_share_details(cls, val: CollectionShareDetails) -> EventDetails: ...

    @classmethod
    def file_transfers_file_add_details(cls, val: FileTransfersFileAddDetails) -> EventDetails: ...

    @classmethod
    def file_transfers_transfer_delete_details(cls, val: FileTransfersTransferDeleteDetails) -> EventDetails: ...

    @classmethod
    def file_transfers_transfer_download_details(cls, val: FileTransfersTransferDownloadDetails) -> EventDetails: ...

    @classmethod
    def file_transfers_transfer_send_details(cls, val: FileTransfersTransferSendDetails) -> EventDetails: ...

    @classmethod
    def file_transfers_transfer_view_details(cls, val: FileTransfersTransferViewDetails) -> EventDetails: ...

    @classmethod
    def note_acl_invite_only_details(cls, val: NoteAclInviteOnlyDetails) -> EventDetails: ...

    @classmethod
    def note_acl_link_details(cls, val: NoteAclLinkDetails) -> EventDetails: ...

    @classmethod
    def note_acl_team_link_details(cls, val: NoteAclTeamLinkDetails) -> EventDetails: ...

    @classmethod
    def note_shared_details(cls, val: NoteSharedDetails) -> EventDetails: ...

    @classmethod
    def note_share_receive_details(cls, val: NoteShareReceiveDetails) -> EventDetails: ...

    @classmethod
    def open_note_shared_details(cls, val: OpenNoteSharedDetails) -> EventDetails: ...

    @classmethod
    def sf_add_group_details(cls, val: SfAddGroupDetails) -> EventDetails: ...

    @classmethod
    def sf_allow_non_members_to_view_shared_links_details(cls, val: SfAllowNonMembersToViewSharedLinksDetails) -> EventDetails: ...

    @classmethod
    def sf_external_invite_warn_details(cls, val: SfExternalInviteWarnDetails) -> EventDetails: ...

    @classmethod
    def sf_fb_invite_details(cls, val: SfFbInviteDetails) -> EventDetails: ...

    @classmethod
    def sf_fb_invite_change_role_details(cls, val: SfFbInviteChangeRoleDetails) -> EventDetails: ...

    @classmethod
    def sf_fb_uninvite_details(cls, val: SfFbUninviteDetails) -> EventDetails: ...

    @classmethod
    def sf_invite_group_details(cls, val: SfInviteGroupDetails) -> EventDetails: ...

    @classmethod
    def sf_team_grant_access_details(cls, val: SfTeamGrantAccessDetails) -> EventDetails: ...

    @classmethod
    def sf_team_invite_details(cls, val: SfTeamInviteDetails) -> EventDetails: ...

    @classmethod
    def sf_team_invite_change_role_details(cls, val: SfTeamInviteChangeRoleDetails) -> EventDetails: ...

    @classmethod
    def sf_team_join_details(cls, val: SfTeamJoinDetails) -> EventDetails: ...

    @classmethod
    def sf_team_join_from_oob_link_details(cls, val: SfTeamJoinFromOobLinkDetails) -> EventDetails: ...

    @classmethod
    def sf_team_uninvite_details(cls, val: SfTeamUninviteDetails) -> EventDetails: ...

    @classmethod
    def shared_content_add_invitees_details(cls, val: SharedContentAddInviteesDetails) -> EventDetails: ...

    @classmethod
    def shared_content_add_link_expiry_details(cls, val: SharedContentAddLinkExpiryDetails) -> EventDetails: ...

    @classmethod
    def shared_content_add_link_password_details(cls, val: SharedContentAddLinkPasswordDetails) -> EventDetails: ...

    @classmethod
    def shared_content_add_member_details(cls, val: SharedContentAddMemberDetails) -> EventDetails: ...

    @classmethod
    def shared_content_change_downloads_policy_details(cls, val: SharedContentChangeDownloadsPolicyDetails) -> EventDetails: ...

    @classmethod
    def shared_content_change_invitee_role_details(cls, val: SharedContentChangeInviteeRoleDetails) -> EventDetails: ...

    @classmethod
    def shared_content_change_link_audience_details(cls, val: SharedContentChangeLinkAudienceDetails) -> EventDetails: ...

    @classmethod
    def shared_content_change_link_expiry_details(cls, val: SharedContentChangeLinkExpiryDetails) -> EventDetails: ...

    @classmethod
    def shared_content_change_link_password_details(cls, val: SharedContentChangeLinkPasswordDetails) -> EventDetails: ...

    @classmethod
    def shared_content_change_member_role_details(cls, val: SharedContentChangeMemberRoleDetails) -> EventDetails: ...

    @classmethod
    def shared_content_change_viewer_info_policy_details(cls, val: SharedContentChangeViewerInfoPolicyDetails) -> EventDetails: ...

    @classmethod
    def shared_content_claim_invitation_details(cls, val: SharedContentClaimInvitationDetails) -> EventDetails: ...

    @classmethod
    def shared_content_copy_details(cls, val: SharedContentCopyDetails) -> EventDetails: ...

    @classmethod
    def shared_content_download_details(cls, val: SharedContentDownloadDetails) -> EventDetails: ...

    @classmethod
    def shared_content_relinquish_membership_details(cls, val: SharedContentRelinquishMembershipDetails) -> EventDetails: ...

    @classmethod
    def shared_content_remove_invitees_details(cls, val: SharedContentRemoveInviteesDetails) -> EventDetails: ...

    @classmethod
    def shared_content_remove_link_expiry_details(cls, val: SharedContentRemoveLinkExpiryDetails) -> EventDetails: ...

    @classmethod
    def shared_content_remove_link_password_details(cls, val: SharedContentRemoveLinkPasswordDetails) -> EventDetails: ...

    @classmethod
    def shared_content_remove_member_details(cls, val: SharedContentRemoveMemberDetails) -> EventDetails: ...

    @classmethod
    def shared_content_request_access_details(cls, val: SharedContentRequestAccessDetails) -> EventDetails: ...

    @classmethod
    def shared_content_restore_invitees_details(cls, val: SharedContentRestoreInviteesDetails) -> EventDetails: ...

    @classmethod
    def shared_content_restore_member_details(cls, val: SharedContentRestoreMemberDetails) -> EventDetails: ...

    @classmethod
    def shared_content_unshare_details(cls, val: SharedContentUnshareDetails) -> EventDetails: ...

    @classmethod
    def shared_content_view_details(cls, val: SharedContentViewDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_change_link_policy_details(cls, val: SharedFolderChangeLinkPolicyDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_change_members_inheritance_policy_details(cls, val: SharedFolderChangeMembersInheritancePolicyDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_change_members_management_policy_details(cls, val: SharedFolderChangeMembersManagementPolicyDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_change_members_policy_details(cls, val: SharedFolderChangeMembersPolicyDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_create_details(cls, val: SharedFolderCreateDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_decline_invitation_details(cls, val: SharedFolderDeclineInvitationDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_mount_details(cls, val: SharedFolderMountDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_nest_details(cls, val: SharedFolderNestDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_transfer_ownership_details(cls, val: SharedFolderTransferOwnershipDetails) -> EventDetails: ...

    @classmethod
    def shared_folder_unmount_details(cls, val: SharedFolderUnmountDetails) -> EventDetails: ...

    @classmethod
    def shared_link_add_expiry_details(cls, val: SharedLinkAddExpiryDetails) -> EventDetails: ...

    @classmethod
    def shared_link_change_expiry_details(cls, val: SharedLinkChangeExpiryDetails) -> EventDetails: ...

    @classmethod
    def shared_link_change_visibility_details(cls, val: SharedLinkChangeVisibilityDetails) -> EventDetails: ...

    @classmethod
    def shared_link_copy_details(cls, val: SharedLinkCopyDetails) -> EventDetails: ...

    @classmethod
    def shared_link_create_details(cls, val: SharedLinkCreateDetails) -> EventDetails: ...

    @classmethod
    def shared_link_disable_details(cls, val: SharedLinkDisableDetails) -> EventDetails: ...

    @classmethod
    def shared_link_download_details(cls, val: SharedLinkDownloadDetails) -> EventDetails: ...

    @classmethod
    def shared_link_remove_expiry_details(cls, val: SharedLinkRemoveExpiryDetails) -> EventDetails: ...

    @classmethod
    def shared_link_settings_add_expiration_details(cls, val: SharedLinkSettingsAddExpirationDetails) -> EventDetails: ...

    @classmethod
    def shared_link_settings_add_password_details(cls, val: SharedLinkSettingsAddPasswordDetails) -> EventDetails: ...

    @classmethod
    def shared_link_settings_allow_download_disabled_details(cls, val: SharedLinkSettingsAllowDownloadDisabledDetails) -> EventDetails: ...

    @classmethod
    def shared_link_settings_allow_download_enabled_details(cls, val: SharedLinkSettingsAllowDownloadEnabledDetails) -> EventDetails: ...

    @classmethod
    def shared_link_settings_change_audience_details(cls, val: SharedLinkSettingsChangeAudienceDetails) -> EventDetails: ...

    @classmethod
    def shared_link_settings_change_expiration_details(cls, val: SharedLinkSettingsChangeExpirationDetails) -> EventDetails: ...

    @classmethod
    def shared_link_settings_change_password_details(cls, val: SharedLinkSettingsChangePasswordDetails) -> EventDetails: ...

    @classmethod
    def shared_link_settings_remove_expiration_details(cls, val: SharedLinkSettingsRemoveExpirationDetails) -> EventDetails: ...

    @classmethod
    def shared_link_settings_remove_password_details(cls, val: SharedLinkSettingsRemovePasswordDetails) -> EventDetails: ...

    @classmethod
    def shared_link_share_details(cls, val: SharedLinkShareDetails) -> EventDetails: ...

    @classmethod
    def shared_link_view_details(cls, val: SharedLinkViewDetails) -> EventDetails: ...

    @classmethod
    def shared_note_opened_details(cls, val: SharedNoteOpenedDetails) -> EventDetails: ...

    @classmethod
    def shmodel_disable_downloads_details(cls, val: ShmodelDisableDownloadsDetails) -> EventDetails: ...

    @classmethod
    def shmodel_enable_downloads_details(cls, val: ShmodelEnableDownloadsDetails) -> EventDetails: ...

    @classmethod
    def shmodel_group_share_details(cls, val: ShmodelGroupShareDetails) -> EventDetails: ...

    @classmethod
    def showcase_access_granted_details(cls, val: ShowcaseAccessGrantedDetails) -> EventDetails: ...

    @classmethod
    def showcase_add_member_details(cls, val: ShowcaseAddMemberDetails) -> EventDetails: ...

    @classmethod
    def showcase_archived_details(cls, val: ShowcaseArchivedDetails) -> EventDetails: ...

    @classmethod
    def showcase_created_details(cls, val: ShowcaseCreatedDetails) -> EventDetails: ...

    @classmethod
    def showcase_delete_comment_details(cls, val: ShowcaseDeleteCommentDetails) -> EventDetails: ...

    @classmethod
    def showcase_edited_details(cls, val: ShowcaseEditedDetails) -> EventDetails: ...

    @classmethod
    def showcase_edit_comment_details(cls, val: ShowcaseEditCommentDetails) -> EventDetails: ...

    @classmethod
    def showcase_file_added_details(cls, val: ShowcaseFileAddedDetails) -> EventDetails: ...

    @classmethod
    def showcase_file_download_details(cls, val: ShowcaseFileDownloadDetails) -> EventDetails: ...

    @classmethod
    def showcase_file_removed_details(cls, val: ShowcaseFileRemovedDetails) -> EventDetails: ...

    @classmethod
    def showcase_file_view_details(cls, val: ShowcaseFileViewDetails) -> EventDetails: ...

    @classmethod
    def showcase_permanently_deleted_details(cls, val: ShowcasePermanentlyDeletedDetails) -> EventDetails: ...

    @classmethod
    def showcase_post_comment_details(cls, val: ShowcasePostCommentDetails) -> EventDetails: ...

    @classmethod
    def showcase_remove_member_details(cls, val: ShowcaseRemoveMemberDetails) -> EventDetails: ...

    @classmethod
    def showcase_renamed_details(cls, val: ShowcaseRenamedDetails) -> EventDetails: ...

    @classmethod
    def showcase_request_access_details(cls, val: ShowcaseRequestAccessDetails) -> EventDetails: ...

    @classmethod
    def showcase_resolve_comment_details(cls, val: ShowcaseResolveCommentDetails) -> EventDetails: ...

    @classmethod
    def showcase_restored_details(cls, val: ShowcaseRestoredDetails) -> EventDetails: ...

    @classmethod
    def showcase_trashed_details(cls, val: ShowcaseTrashedDetails) -> EventDetails: ...

    @classmethod
    def showcase_trashed_deprecated_details(cls, val: ShowcaseTrashedDeprecatedDetails) -> EventDetails: ...

    @classmethod
    def showcase_unresolve_comment_details(cls, val: ShowcaseUnresolveCommentDetails) -> EventDetails: ...

    @classmethod
    def showcase_untrashed_details(cls, val: ShowcaseUntrashedDetails) -> EventDetails: ...

    @classmethod
    def showcase_untrashed_deprecated_details(cls, val: ShowcaseUntrashedDeprecatedDetails) -> EventDetails: ...

    @classmethod
    def showcase_view_details(cls, val: ShowcaseViewDetails) -> EventDetails: ...

    @classmethod
    def sso_add_cert_details(cls, val: SsoAddCertDetails) -> EventDetails: ...

    @classmethod
    def sso_add_login_url_details(cls, val: SsoAddLoginUrlDetails) -> EventDetails: ...

    @classmethod
    def sso_add_logout_url_details(cls, val: SsoAddLogoutUrlDetails) -> EventDetails: ...

    @classmethod
    def sso_change_cert_details(cls, val: SsoChangeCertDetails) -> EventDetails: ...

    @classmethod
    def sso_change_login_url_details(cls, val: SsoChangeLoginUrlDetails) -> EventDetails: ...

    @classmethod
    def sso_change_logout_url_details(cls, val: SsoChangeLogoutUrlDetails) -> EventDetails: ...

    @classmethod
    def sso_change_saml_identity_mode_details(cls, val: SsoChangeSamlIdentityModeDetails) -> EventDetails: ...

    @classmethod
    def sso_remove_cert_details(cls, val: SsoRemoveCertDetails) -> EventDetails: ...

    @classmethod
    def sso_remove_login_url_details(cls, val: SsoRemoveLoginUrlDetails) -> EventDetails: ...

    @classmethod
    def sso_remove_logout_url_details(cls, val: SsoRemoveLogoutUrlDetails) -> EventDetails: ...

    @classmethod
    def team_folder_change_status_details(cls, val: TeamFolderChangeStatusDetails) -> EventDetails: ...

    @classmethod
    def team_folder_create_details(cls, val: TeamFolderCreateDetails) -> EventDetails: ...

    @classmethod
    def team_folder_downgrade_details(cls, val: TeamFolderDowngradeDetails) -> EventDetails: ...

    @classmethod
    def team_folder_permanently_delete_details(cls, val: TeamFolderPermanentlyDeleteDetails) -> EventDetails: ...

    @classmethod
    def team_folder_rename_details(cls, val: TeamFolderRenameDetails) -> EventDetails: ...

    @classmethod
    def team_selective_sync_settings_changed_details(cls, val: TeamSelectiveSyncSettingsChangedDetails) -> EventDetails: ...

    @classmethod
    def account_capture_change_policy_details(cls, val: AccountCaptureChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def allow_download_disabled_details(cls, val: AllowDownloadDisabledDetails) -> EventDetails: ...

    @classmethod
    def allow_download_enabled_details(cls, val: AllowDownloadEnabledDetails) -> EventDetails: ...

    @classmethod
    def app_permissions_changed_details(cls, val: AppPermissionsChangedDetails) -> EventDetails: ...

    @classmethod
    def camera_uploads_policy_changed_details(cls, val: CameraUploadsPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def capture_transcript_policy_changed_details(cls, val: CaptureTranscriptPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def classification_change_policy_details(cls, val: ClassificationChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def computer_backup_policy_changed_details(cls, val: ComputerBackupPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def content_administration_policy_changed_details(cls, val: ContentAdministrationPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def data_placement_restriction_change_policy_details(cls, val: DataPlacementRestrictionChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def data_placement_restriction_satisfy_policy_details(cls, val: DataPlacementRestrictionSatisfyPolicyDetails) -> EventDetails: ...

    @classmethod
    def device_approvals_add_exception_details(cls, val: DeviceApprovalsAddExceptionDetails) -> EventDetails: ...

    @classmethod
    def device_approvals_change_desktop_policy_details(cls, val: DeviceApprovalsChangeDesktopPolicyDetails) -> EventDetails: ...

    @classmethod
    def device_approvals_change_mobile_policy_details(cls, val: DeviceApprovalsChangeMobilePolicyDetails) -> EventDetails: ...

    @classmethod
    def device_approvals_change_overage_action_details(cls, val: DeviceApprovalsChangeOverageActionDetails) -> EventDetails: ...

    @classmethod
    def device_approvals_change_unlink_action_details(cls, val: DeviceApprovalsChangeUnlinkActionDetails) -> EventDetails: ...

    @classmethod
    def device_approvals_remove_exception_details(cls, val: DeviceApprovalsRemoveExceptionDetails) -> EventDetails: ...

    @classmethod
    def directory_restrictions_add_members_details(cls, val: DirectoryRestrictionsAddMembersDetails) -> EventDetails: ...

    @classmethod
    def directory_restrictions_remove_members_details(cls, val: DirectoryRestrictionsRemoveMembersDetails) -> EventDetails: ...

    @classmethod
    def email_ingest_policy_changed_details(cls, val: EmailIngestPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def emm_add_exception_details(cls, val: EmmAddExceptionDetails) -> EventDetails: ...

    @classmethod
    def emm_change_policy_details(cls, val: EmmChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def emm_remove_exception_details(cls, val: EmmRemoveExceptionDetails) -> EventDetails: ...

    @classmethod
    def extended_version_history_change_policy_details(cls, val: ExtendedVersionHistoryChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def external_drive_backup_policy_changed_details(cls, val: ExternalDriveBackupPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def file_comments_change_policy_details(cls, val: FileCommentsChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def file_locking_policy_changed_details(cls, val: FileLockingPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def file_requests_change_policy_details(cls, val: FileRequestsChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def file_requests_emails_enabled_details(cls, val: FileRequestsEmailsEnabledDetails) -> EventDetails: ...

    @classmethod
    def file_requests_emails_restricted_to_team_only_details(cls, val: FileRequestsEmailsRestrictedToTeamOnlyDetails) -> EventDetails: ...

    @classmethod
    def file_transfers_policy_changed_details(cls, val: FileTransfersPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def google_sso_change_policy_details(cls, val: GoogleSsoChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def group_user_management_change_policy_details(cls, val: GroupUserManagementChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def integration_policy_changed_details(cls, val: IntegrationPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def invite_acceptance_email_policy_changed_details(cls, val: InviteAcceptanceEmailPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def member_requests_change_policy_details(cls, val: MemberRequestsChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def member_send_invite_policy_changed_details(cls, val: MemberSendInvitePolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def member_space_limits_add_exception_details(cls, val: MemberSpaceLimitsAddExceptionDetails) -> EventDetails: ...

    @classmethod
    def member_space_limits_change_caps_type_policy_details(cls, val: MemberSpaceLimitsChangeCapsTypePolicyDetails) -> EventDetails: ...

    @classmethod
    def member_space_limits_change_policy_details(cls, val: MemberSpaceLimitsChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def member_space_limits_remove_exception_details(cls, val: MemberSpaceLimitsRemoveExceptionDetails) -> EventDetails: ...

    @classmethod
    def member_suggestions_change_policy_details(cls, val: MemberSuggestionsChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def microsoft_office_addin_change_policy_details(cls, val: MicrosoftOfficeAddinChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def network_control_change_policy_details(cls, val: NetworkControlChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def paper_change_deployment_policy_details(cls, val: PaperChangeDeploymentPolicyDetails) -> EventDetails: ...

    @classmethod
    def paper_change_member_link_policy_details(cls, val: PaperChangeMemberLinkPolicyDetails) -> EventDetails: ...

    @classmethod
    def paper_change_member_policy_details(cls, val: PaperChangeMemberPolicyDetails) -> EventDetails: ...

    @classmethod
    def paper_change_policy_details(cls, val: PaperChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def paper_default_folder_policy_changed_details(cls, val: PaperDefaultFolderPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def paper_desktop_policy_changed_details(cls, val: PaperDesktopPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def paper_enabled_users_group_addition_details(cls, val: PaperEnabledUsersGroupAdditionDetails) -> EventDetails: ...

    @classmethod
    def paper_enabled_users_group_removal_details(cls, val: PaperEnabledUsersGroupRemovalDetails) -> EventDetails: ...

    @classmethod
    def password_strength_requirements_change_policy_details(cls, val: PasswordStrengthRequirementsChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def permanent_delete_change_policy_details(cls, val: PermanentDeleteChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def reseller_support_change_policy_details(cls, val: ResellerSupportChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def rewind_policy_changed_details(cls, val: RewindPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def send_for_signature_policy_changed_details(cls, val: SendForSignaturePolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def sharing_change_folder_join_policy_details(cls, val: SharingChangeFolderJoinPolicyDetails) -> EventDetails: ...

    @classmethod
    def sharing_change_link_allow_change_expiration_policy_details(cls, val: SharingChangeLinkAllowChangeExpirationPolicyDetails) -> EventDetails: ...

    @classmethod
    def sharing_change_link_default_expiration_policy_details(cls, val: SharingChangeLinkDefaultExpirationPolicyDetails) -> EventDetails: ...

    @classmethod
    def sharing_change_link_enforce_password_policy_details(cls, val: SharingChangeLinkEnforcePasswordPolicyDetails) -> EventDetails: ...

    @classmethod
    def sharing_change_link_policy_details(cls, val: SharingChangeLinkPolicyDetails) -> EventDetails: ...

    @classmethod
    def sharing_change_member_policy_details(cls, val: SharingChangeMemberPolicyDetails) -> EventDetails: ...

    @classmethod
    def showcase_change_download_policy_details(cls, val: ShowcaseChangeDownloadPolicyDetails) -> EventDetails: ...

    @classmethod
    def showcase_change_enabled_policy_details(cls, val: ShowcaseChangeEnabledPolicyDetails) -> EventDetails: ...

    @classmethod
    def showcase_change_external_sharing_policy_details(cls, val: ShowcaseChangeExternalSharingPolicyDetails) -> EventDetails: ...

    @classmethod
    def smarter_smart_sync_policy_changed_details(cls, val: SmarterSmartSyncPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def smart_sync_change_policy_details(cls, val: SmartSyncChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def smart_sync_not_opt_out_details(cls, val: SmartSyncNotOptOutDetails) -> EventDetails: ...

    @classmethod
    def smart_sync_opt_out_details(cls, val: SmartSyncOptOutDetails) -> EventDetails: ...

    @classmethod
    def sso_change_policy_details(cls, val: SsoChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def team_branding_policy_changed_details(cls, val: TeamBrandingPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def team_extensions_policy_changed_details(cls, val: TeamExtensionsPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def team_selective_sync_policy_changed_details(cls, val: TeamSelectiveSyncPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def team_sharing_whitelist_subjects_changed_details(cls, val: TeamSharingWhitelistSubjectsChangedDetails) -> EventDetails: ...

    @classmethod
    def tfa_add_exception_details(cls, val: TfaAddExceptionDetails) -> EventDetails: ...

    @classmethod
    def tfa_change_policy_details(cls, val: TfaChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def tfa_remove_exception_details(cls, val: TfaRemoveExceptionDetails) -> EventDetails: ...

    @classmethod
    def two_account_change_policy_details(cls, val: TwoAccountChangePolicyDetails) -> EventDetails: ...

    @classmethod
    def viewer_info_policy_changed_details(cls, val: ViewerInfoPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def watermarking_policy_changed_details(cls, val: WatermarkingPolicyChangedDetails) -> EventDetails: ...

    @classmethod
    def web_sessions_change_active_session_limit_details(cls, val: WebSessionsChangeActiveSessionLimitDetails) -> EventDetails: ...

    @classmethod
    def web_sessions_change_fixed_length_policy_details(cls, val: WebSessionsChangeFixedLengthPolicyDetails) -> EventDetails: ...

    @classmethod
    def web_sessions_change_idle_length_policy_details(cls, val: WebSessionsChangeIdleLengthPolicyDetails) -> EventDetails: ...

    @classmethod
    def data_residency_migration_request_successful_details(cls, val: DataResidencyMigrationRequestSuccessfulDetails) -> EventDetails: ...

    @classmethod
    def data_residency_migration_request_unsuccessful_details(cls, val: DataResidencyMigrationRequestUnsuccessfulDetails) -> EventDetails: ...

    @classmethod
    def team_merge_from_details(cls, val: TeamMergeFromDetails) -> EventDetails: ...

    @classmethod
    def team_merge_to_details(cls, val: TeamMergeToDetails) -> EventDetails: ...

    @classmethod
    def team_profile_add_background_details(cls, val: TeamProfileAddBackgroundDetails) -> EventDetails: ...

    @classmethod
    def team_profile_add_logo_details(cls, val: TeamProfileAddLogoDetails) -> EventDetails: ...

    @classmethod
    def team_profile_change_background_details(cls, val: TeamProfileChangeBackgroundDetails) -> EventDetails: ...

    @classmethod
    def team_profile_change_default_language_details(cls, val: TeamProfileChangeDefaultLanguageDetails) -> EventDetails: ...

    @classmethod
    def team_profile_change_logo_details(cls, val: TeamProfileChangeLogoDetails) -> EventDetails: ...

    @classmethod
    def team_profile_change_name_details(cls, val: TeamProfileChangeNameDetails) -> EventDetails: ...

    @classmethod
    def team_profile_remove_background_details(cls, val: TeamProfileRemoveBackgroundDetails) -> EventDetails: ...

    @classmethod
    def team_profile_remove_logo_details(cls, val: TeamProfileRemoveLogoDetails) -> EventDetails: ...

    @classmethod
    def tfa_add_backup_phone_details(cls, val: TfaAddBackupPhoneDetails) -> EventDetails: ...

    @classmethod
    def tfa_add_security_key_details(cls, val: TfaAddSecurityKeyDetails) -> EventDetails: ...

    @classmethod
    def tfa_change_backup_phone_details(cls, val: TfaChangeBackupPhoneDetails) -> EventDetails: ...

    @classmethod
    def tfa_change_status_details(cls, val: TfaChangeStatusDetails) -> EventDetails: ...

    @classmethod
    def tfa_remove_backup_phone_details(cls, val: TfaRemoveBackupPhoneDetails) -> EventDetails: ...

    @classmethod
    def tfa_remove_security_key_details(cls, val: TfaRemoveSecurityKeyDetails) -> EventDetails: ...

    @classmethod
    def tfa_reset_details(cls, val: TfaResetDetails) -> EventDetails: ...

    @classmethod
    def changed_enterprise_admin_role_details(cls, val: ChangedEnterpriseAdminRoleDetails) -> EventDetails: ...

    @classmethod
    def changed_enterprise_connected_team_status_details(cls, val: ChangedEnterpriseConnectedTeamStatusDetails) -> EventDetails: ...

    @classmethod
    def ended_enterprise_admin_session_details(cls, val: EndedEnterpriseAdminSessionDetails) -> EventDetails: ...

    @classmethod
    def ended_enterprise_admin_session_deprecated_details(cls, val: EndedEnterpriseAdminSessionDeprecatedDetails) -> EventDetails: ...

    @classmethod
    def enterprise_settings_locking_details(cls, val: EnterpriseSettingsLockingDetails) -> EventDetails: ...

    @classmethod
    def guest_admin_change_status_details(cls, val: GuestAdminChangeStatusDetails) -> EventDetails: ...

    @classmethod
    def started_enterprise_admin_session_details(cls, val: StartedEnterpriseAdminSessionDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_accepted_details(cls, val: TeamMergeRequestAcceptedDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_accepted_shown_to_primary_team_details(cls, val: TeamMergeRequestAcceptedShownToPrimaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_accepted_shown_to_secondary_team_details(cls, val: TeamMergeRequestAcceptedShownToSecondaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_auto_canceled_details(cls, val: TeamMergeRequestAutoCanceledDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_canceled_details(cls, val: TeamMergeRequestCanceledDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_canceled_shown_to_primary_team_details(cls, val: TeamMergeRequestCanceledShownToPrimaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_canceled_shown_to_secondary_team_details(cls, val: TeamMergeRequestCanceledShownToSecondaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_expired_details(cls, val: TeamMergeRequestExpiredDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_expired_shown_to_primary_team_details(cls, val: TeamMergeRequestExpiredShownToPrimaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_expired_shown_to_secondary_team_details(cls, val: TeamMergeRequestExpiredShownToSecondaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_rejected_shown_to_primary_team_details(cls, val: TeamMergeRequestRejectedShownToPrimaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_rejected_shown_to_secondary_team_details(cls, val: TeamMergeRequestRejectedShownToSecondaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_reminder_details(cls, val: TeamMergeRequestReminderDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_reminder_shown_to_primary_team_details(cls, val: TeamMergeRequestReminderShownToPrimaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_reminder_shown_to_secondary_team_details(cls, val: TeamMergeRequestReminderShownToSecondaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_revoked_details(cls, val: TeamMergeRequestRevokedDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_sent_shown_to_primary_team_details(cls, val: TeamMergeRequestSentShownToPrimaryTeamDetails) -> EventDetails: ...

    @classmethod
    def team_merge_request_sent_shown_to_secondary_team_details(cls, val: TeamMergeRequestSentShownToSecondaryTeamDetails) -> EventDetails: ...

    @classmethod
    def missing_details(cls, val: MissingDetails) -> EventDetails: ...

    def get_admin_alerting_alert_state_changed_details(self) -> AdminAlertingAlertStateChangedDetails: ...

    def get_admin_alerting_changed_alert_config_details(self) -> AdminAlertingChangedAlertConfigDetails: ...

    def get_admin_alerting_triggered_alert_details(self) -> AdminAlertingTriggeredAlertDetails: ...

    def get_app_blocked_by_permissions_details(self) -> AppBlockedByPermissionsDetails: ...

    def get_app_link_team_details(self) -> AppLinkTeamDetails: ...

    def get_app_link_user_details(self) -> AppLinkUserDetails: ...

    def get_app_unlink_team_details(self) -> AppUnlinkTeamDetails: ...

    def get_app_unlink_user_details(self) -> AppUnlinkUserDetails: ...

    def get_integration_connected_details(self) -> IntegrationConnectedDetails: ...

    def get_integration_disconnected_details(self) -> IntegrationDisconnectedDetails: ...

    def get_file_add_comment_details(self) -> FileAddCommentDetails: ...

    def get_file_change_comment_subscription_details(self) -> FileChangeCommentSubscriptionDetails: ...

    def get_file_delete_comment_details(self) -> FileDeleteCommentDetails: ...

    def get_file_edit_comment_details(self) -> FileEditCommentDetails: ...

    def get_file_like_comment_details(self) -> FileLikeCommentDetails: ...

    def get_file_resolve_comment_details(self) -> FileResolveCommentDetails: ...

    def get_file_unlike_comment_details(self) -> FileUnlikeCommentDetails: ...

    def get_file_unresolve_comment_details(self) -> FileUnresolveCommentDetails: ...

    def get_governance_policy_add_folders_details(self) -> GovernancePolicyAddFoldersDetails: ...

    def get_governance_policy_add_folder_failed_details(self) -> GovernancePolicyAddFolderFailedDetails: ...

    def get_governance_policy_content_disposed_details(self) -> GovernancePolicyContentDisposedDetails: ...

    def get_governance_policy_create_details(self) -> GovernancePolicyCreateDetails: ...

    def get_governance_policy_delete_details(self) -> GovernancePolicyDeleteDetails: ...

    def get_governance_policy_edit_details_details(self) -> GovernancePolicyEditDetailsDetails: ...

    def get_governance_policy_edit_duration_details(self) -> GovernancePolicyEditDurationDetails: ...

    def get_governance_policy_export_created_details(self) -> GovernancePolicyExportCreatedDetails: ...

    def get_governance_policy_export_removed_details(self) -> GovernancePolicyExportRemovedDetails: ...

    def get_governance_policy_remove_folders_details(self) -> GovernancePolicyRemoveFoldersDetails: ...

    def get_governance_policy_report_created_details(self) -> GovernancePolicyReportCreatedDetails: ...

    def get_governance_policy_zip_part_downloaded_details(self) -> GovernancePolicyZipPartDownloadedDetails: ...

    def get_legal_holds_activate_a_hold_details(self) -> LegalHoldsActivateAHoldDetails: ...

    def get_legal_holds_add_members_details(self) -> LegalHoldsAddMembersDetails: ...

    def get_legal_holds_change_hold_details_details(self) -> LegalHoldsChangeHoldDetailsDetails: ...

    def get_legal_holds_change_hold_name_details(self) -> LegalHoldsChangeHoldNameDetails: ...

    def get_legal_holds_export_a_hold_details(self) -> LegalHoldsExportAHoldDetails: ...

    def get_legal_holds_export_cancelled_details(self) -> LegalHoldsExportCancelledDetails: ...

    def get_legal_holds_export_downloaded_details(self) -> LegalHoldsExportDownloadedDetails: ...

    def get_legal_holds_export_removed_details(self) -> LegalHoldsExportRemovedDetails: ...

    def get_legal_holds_release_a_hold_details(self) -> LegalHoldsReleaseAHoldDetails: ...

    def get_legal_holds_remove_members_details(self) -> LegalHoldsRemoveMembersDetails: ...

    def get_legal_holds_report_a_hold_details(self) -> LegalHoldsReportAHoldDetails: ...

    def get_device_change_ip_desktop_details(self) -> DeviceChangeIpDesktopDetails: ...

    def get_device_change_ip_mobile_details(self) -> DeviceChangeIpMobileDetails: ...

    def get_device_change_ip_web_details(self) -> DeviceChangeIpWebDetails: ...

    def get_device_delete_on_unlink_fail_details(self) -> DeviceDeleteOnUnlinkFailDetails: ...

    def get_device_delete_on_unlink_success_details(self) -> DeviceDeleteOnUnlinkSuccessDetails: ...

    def get_device_link_fail_details(self) -> DeviceLinkFailDetails: ...

    def get_device_link_success_details(self) -> DeviceLinkSuccessDetails: ...

    def get_device_management_disabled_details(self) -> DeviceManagementDisabledDetails: ...

    def get_device_management_enabled_details(self) -> DeviceManagementEnabledDetails: ...

    def get_device_sync_backup_status_changed_details(self) -> DeviceSyncBackupStatusChangedDetails: ...

    def get_device_unlink_details(self) -> DeviceUnlinkDetails: ...

    def get_dropbox_passwords_exported_details(self) -> DropboxPasswordsExportedDetails: ...

    def get_dropbox_passwords_new_device_enrolled_details(self) -> DropboxPasswordsNewDeviceEnrolledDetails: ...

    def get_emm_refresh_auth_token_details(self) -> EmmRefreshAuthTokenDetails: ...

    def get_account_capture_change_availability_details(self) -> AccountCaptureChangeAvailabilityDetails: ...

    def get_account_capture_migrate_account_details(self) -> AccountCaptureMigrateAccountDetails: ...

    def get_account_capture_notification_emails_sent_details(self) -> AccountCaptureNotificationEmailsSentDetails: ...

    def get_account_capture_relinquish_account_details(self) -> AccountCaptureRelinquishAccountDetails: ...

    def get_disabled_domain_invites_details(self) -> DisabledDomainInvitesDetails: ...

    def get_domain_invites_approve_request_to_join_team_details(self) -> DomainInvitesApproveRequestToJoinTeamDetails: ...

    def get_domain_invites_decline_request_to_join_team_details(self) -> DomainInvitesDeclineRequestToJoinTeamDetails: ...

    def get_domain_invites_email_existing_users_details(self) -> DomainInvitesEmailExistingUsersDetails: ...

    def get_domain_invites_request_to_join_team_details(self) -> DomainInvitesRequestToJoinTeamDetails: ...

    def get_domain_invites_set_invite_new_user_pref_to_no_details(self) -> DomainInvitesSetInviteNewUserPrefToNoDetails: ...

    def get_domain_invites_set_invite_new_user_pref_to_yes_details(self) -> DomainInvitesSetInviteNewUserPrefToYesDetails: ...

    def get_domain_verification_add_domain_fail_details(self) -> DomainVerificationAddDomainFailDetails: ...

    def get_domain_verification_add_domain_success_details(self) -> DomainVerificationAddDomainSuccessDetails: ...

    def get_domain_verification_remove_domain_details(self) -> DomainVerificationRemoveDomainDetails: ...

    def get_enabled_domain_invites_details(self) -> EnabledDomainInvitesDetails: ...

    def get_apply_naming_convention_details(self) -> ApplyNamingConventionDetails: ...

    def get_create_folder_details(self) -> CreateFolderDetails: ...

    def get_file_add_details(self) -> FileAddDetails: ...

    def get_file_copy_details(self) -> FileCopyDetails: ...

    def get_file_delete_details(self) -> FileDeleteDetails: ...

    def get_file_download_details(self) -> FileDownloadDetails: ...

    def get_file_edit_details(self) -> FileEditDetails: ...

    def get_file_get_copy_reference_details(self) -> FileGetCopyReferenceDetails: ...

    def get_file_locking_lock_status_changed_details(self) -> FileLockingLockStatusChangedDetails: ...

    def get_file_move_details(self) -> FileMoveDetails: ...

    def get_file_permanently_delete_details(self) -> FilePermanentlyDeleteDetails: ...

    def get_file_preview_details(self) -> FilePreviewDetails: ...

    def get_file_rename_details(self) -> FileRenameDetails: ...

    def get_file_restore_details(self) -> FileRestoreDetails: ...

    def get_file_revert_details(self) -> FileRevertDetails: ...

    def get_file_rollback_changes_details(self) -> FileRollbackChangesDetails: ...

    def get_file_save_copy_reference_details(self) -> FileSaveCopyReferenceDetails: ...

    def get_folder_overview_description_changed_details(self) -> FolderOverviewDescriptionChangedDetails: ...

    def get_folder_overview_item_pinned_details(self) -> FolderOverviewItemPinnedDetails: ...

    def get_folder_overview_item_unpinned_details(self) -> FolderOverviewItemUnpinnedDetails: ...

    def get_object_label_added_details(self) -> ObjectLabelAddedDetails: ...

    def get_object_label_removed_details(self) -> ObjectLabelRemovedDetails: ...

    def get_object_label_updated_value_details(self) -> ObjectLabelUpdatedValueDetails: ...

    def get_organize_folder_with_tidy_details(self) -> OrganizeFolderWithTidyDetails: ...

    def get_rewind_folder_details(self) -> RewindFolderDetails: ...

    def get_undo_naming_convention_details(self) -> UndoNamingConventionDetails: ...

    def get_undo_organize_folder_with_tidy_details(self) -> UndoOrganizeFolderWithTidyDetails: ...

    def get_user_tags_added_details(self) -> UserTagsAddedDetails: ...

    def get_user_tags_removed_details(self) -> UserTagsRemovedDetails: ...

    def get_email_ingest_receive_file_details(self) -> EmailIngestReceiveFileDetails: ...

    def get_file_request_change_details(self) -> FileRequestChangeDetails: ...

    def get_file_request_close_details(self) -> FileRequestCloseDetails: ...

    def get_file_request_create_details(self) -> FileRequestCreateDetails: ...

    def get_file_request_delete_details(self) -> FileRequestDeleteDetails: ...

    def get_file_request_receive_file_details(self) -> FileRequestReceiveFileDetails: ...

    def get_group_add_external_id_details(self) -> GroupAddExternalIdDetails: ...

    def get_group_add_member_details(self) -> GroupAddMemberDetails: ...

    def get_group_change_external_id_details(self) -> GroupChangeExternalIdDetails: ...

    def get_group_change_management_type_details(self) -> GroupChangeManagementTypeDetails: ...

    def get_group_change_member_role_details(self) -> GroupChangeMemberRoleDetails: ...

    def get_group_create_details(self) -> GroupCreateDetails: ...

    def get_group_delete_details(self) -> GroupDeleteDetails: ...

    def get_group_description_updated_details(self) -> GroupDescriptionUpdatedDetails: ...

    def get_group_join_policy_updated_details(self) -> GroupJoinPolicyUpdatedDetails: ...

    def get_group_moved_details(self) -> GroupMovedDetails: ...

    def get_group_remove_external_id_details(self) -> GroupRemoveExternalIdDetails: ...

    def get_group_remove_member_details(self) -> GroupRemoveMemberDetails: ...

    def get_group_rename_details(self) -> GroupRenameDetails: ...

    def get_account_lock_or_unlocked_details(self) -> AccountLockOrUnlockedDetails: ...

    def get_emm_error_details(self) -> EmmErrorDetails: ...

    def get_guest_admin_signed_in_via_trusted_teams_details(self) -> GuestAdminSignedInViaTrustedTeamsDetails: ...

    def get_guest_admin_signed_out_via_trusted_teams_details(self) -> GuestAdminSignedOutViaTrustedTeamsDetails: ...

    def get_login_fail_details(self) -> LoginFailDetails: ...

    def get_login_success_details(self) -> LoginSuccessDetails: ...

    def get_logout_details(self) -> LogoutDetails: ...

    def get_reseller_support_session_end_details(self) -> ResellerSupportSessionEndDetails: ...

    def get_reseller_support_session_start_details(self) -> ResellerSupportSessionStartDetails: ...

    def get_sign_in_as_session_end_details(self) -> SignInAsSessionEndDetails: ...

    def get_sign_in_as_session_start_details(self) -> SignInAsSessionStartDetails: ...

    def get_sso_error_details(self) -> SsoErrorDetails: ...

    def get_create_team_invite_link_details(self) -> CreateTeamInviteLinkDetails: ...

    def get_delete_team_invite_link_details(self) -> DeleteTeamInviteLinkDetails: ...

    def get_member_add_external_id_details(self) -> MemberAddExternalIdDetails: ...

    def get_member_add_name_details(self) -> MemberAddNameDetails: ...

    def get_member_change_admin_role_details(self) -> MemberChangeAdminRoleDetails: ...

    def get_member_change_email_details(self) -> MemberChangeEmailDetails: ...

    def get_member_change_external_id_details(self) -> MemberChangeExternalIdDetails: ...

    def get_member_change_membership_type_details(self) -> MemberChangeMembershipTypeDetails: ...

    def get_member_change_name_details(self) -> MemberChangeNameDetails: ...

    def get_member_change_reseller_role_details(self) -> MemberChangeResellerRoleDetails: ...

    def get_member_change_status_details(self) -> MemberChangeStatusDetails: ...

    def get_member_delete_manual_contacts_details(self) -> MemberDeleteManualContactsDetails: ...

    def get_member_delete_profile_photo_details(self) -> MemberDeleteProfilePhotoDetails: ...

    def get_member_permanently_delete_account_contents_details(self) -> MemberPermanentlyDeleteAccountContentsDetails: ...

    def get_member_remove_external_id_details(self) -> MemberRemoveExternalIdDetails: ...

    def get_member_set_profile_photo_details(self) -> MemberSetProfilePhotoDetails: ...

    def get_member_space_limits_add_custom_quota_details(self) -> MemberSpaceLimitsAddCustomQuotaDetails: ...

    def get_member_space_limits_change_custom_quota_details(self) -> MemberSpaceLimitsChangeCustomQuotaDetails: ...

    def get_member_space_limits_change_status_details(self) -> MemberSpaceLimitsChangeStatusDetails: ...

    def get_member_space_limits_remove_custom_quota_details(self) -> MemberSpaceLimitsRemoveCustomQuotaDetails: ...

    def get_member_suggest_details(self) -> MemberSuggestDetails: ...

    def get_member_transfer_account_contents_details(self) -> MemberTransferAccountContentsDetails: ...

    def get_pending_secondary_email_added_details(self) -> PendingSecondaryEmailAddedDetails: ...

    def get_secondary_email_deleted_details(self) -> SecondaryEmailDeletedDetails: ...

    def get_secondary_email_verified_details(self) -> SecondaryEmailVerifiedDetails: ...

    def get_secondary_mails_policy_changed_details(self) -> SecondaryMailsPolicyChangedDetails: ...

    def get_binder_add_page_details(self) -> BinderAddPageDetails: ...

    def get_binder_add_section_details(self) -> BinderAddSectionDetails: ...

    def get_binder_remove_page_details(self) -> BinderRemovePageDetails: ...

    def get_binder_remove_section_details(self) -> BinderRemoveSectionDetails: ...

    def get_binder_rename_page_details(self) -> BinderRenamePageDetails: ...

    def get_binder_rename_section_details(self) -> BinderRenameSectionDetails: ...

    def get_binder_reorder_page_details(self) -> BinderReorderPageDetails: ...

    def get_binder_reorder_section_details(self) -> BinderReorderSectionDetails: ...

    def get_paper_content_add_member_details(self) -> PaperContentAddMemberDetails: ...

    def get_paper_content_add_to_folder_details(self) -> PaperContentAddToFolderDetails: ...

    def get_paper_content_archive_details(self) -> PaperContentArchiveDetails: ...

    def get_paper_content_create_details(self) -> PaperContentCreateDetails: ...

    def get_paper_content_permanently_delete_details(self) -> PaperContentPermanentlyDeleteDetails: ...

    def get_paper_content_remove_from_folder_details(self) -> PaperContentRemoveFromFolderDetails: ...

    def get_paper_content_remove_member_details(self) -> PaperContentRemoveMemberDetails: ...

    def get_paper_content_rename_details(self) -> PaperContentRenameDetails: ...

    def get_paper_content_restore_details(self) -> PaperContentRestoreDetails: ...

    def get_paper_doc_add_comment_details(self) -> PaperDocAddCommentDetails: ...

    def get_paper_doc_change_member_role_details(self) -> PaperDocChangeMemberRoleDetails: ...

    def get_paper_doc_change_sharing_policy_details(self) -> PaperDocChangeSharingPolicyDetails: ...

    def get_paper_doc_change_subscription_details(self) -> PaperDocChangeSubscriptionDetails: ...

    def get_paper_doc_deleted_details(self) -> PaperDocDeletedDetails: ...

    def get_paper_doc_delete_comment_details(self) -> PaperDocDeleteCommentDetails: ...

    def get_paper_doc_download_details(self) -> PaperDocDownloadDetails: ...

    def get_paper_doc_edit_details(self) -> PaperDocEditDetails: ...

    def get_paper_doc_edit_comment_details(self) -> PaperDocEditCommentDetails: ...

    def get_paper_doc_followed_details(self) -> PaperDocFollowedDetails: ...

    def get_paper_doc_mention_details(self) -> PaperDocMentionDetails: ...

    def get_paper_doc_ownership_changed_details(self) -> PaperDocOwnershipChangedDetails: ...

    def get_paper_doc_request_access_details(self) -> PaperDocRequestAccessDetails: ...

    def get_paper_doc_resolve_comment_details(self) -> PaperDocResolveCommentDetails: ...

    def get_paper_doc_revert_details(self) -> PaperDocRevertDetails: ...

    def get_paper_doc_slack_share_details(self) -> PaperDocSlackShareDetails: ...

    def get_paper_doc_team_invite_details(self) -> PaperDocTeamInviteDetails: ...

    def get_paper_doc_trashed_details(self) -> PaperDocTrashedDetails: ...

    def get_paper_doc_unresolve_comment_details(self) -> PaperDocUnresolveCommentDetails: ...

    def get_paper_doc_untrashed_details(self) -> PaperDocUntrashedDetails: ...

    def get_paper_doc_view_details(self) -> PaperDocViewDetails: ...

    def get_paper_external_view_allow_details(self) -> PaperExternalViewAllowDetails: ...

    def get_paper_external_view_default_team_details(self) -> PaperExternalViewDefaultTeamDetails: ...

    def get_paper_external_view_forbid_details(self) -> PaperExternalViewForbidDetails: ...

    def get_paper_folder_change_subscription_details(self) -> PaperFolderChangeSubscriptionDetails: ...

    def get_paper_folder_deleted_details(self) -> PaperFolderDeletedDetails: ...

    def get_paper_folder_followed_details(self) -> PaperFolderFollowedDetails: ...

    def get_paper_folder_team_invite_details(self) -> PaperFolderTeamInviteDetails: ...

    def get_paper_published_link_change_permission_details(self) -> PaperPublishedLinkChangePermissionDetails: ...

    def get_paper_published_link_create_details(self) -> PaperPublishedLinkCreateDetails: ...

    def get_paper_published_link_disabled_details(self) -> PaperPublishedLinkDisabledDetails: ...

    def get_paper_published_link_view_details(self) -> PaperPublishedLinkViewDetails: ...

    def get_password_change_details(self) -> PasswordChangeDetails: ...

    def get_password_reset_details(self) -> PasswordResetDetails: ...

    def get_password_reset_all_details(self) -> PasswordResetAllDetails: ...

    def get_classification_create_report_details(self) -> ClassificationCreateReportDetails: ...

    def get_classification_create_report_fail_details(self) -> ClassificationCreateReportFailDetails: ...

    def get_emm_create_exceptions_report_details(self) -> EmmCreateExceptionsReportDetails: ...

    def get_emm_create_usage_report_details(self) -> EmmCreateUsageReportDetails: ...

    def get_export_members_report_details(self) -> ExportMembersReportDetails: ...

    def get_export_members_report_fail_details(self) -> ExportMembersReportFailDetails: ...

    def get_external_sharing_create_report_details(self) -> ExternalSharingCreateReportDetails: ...

    def get_external_sharing_report_failed_details(self) -> ExternalSharingReportFailedDetails: ...

    def get_no_expiration_link_gen_create_report_details(self) -> NoExpirationLinkGenCreateReportDetails: ...

    def get_no_expiration_link_gen_report_failed_details(self) -> NoExpirationLinkGenReportFailedDetails: ...

    def get_no_password_link_gen_create_report_details(self) -> NoPasswordLinkGenCreateReportDetails: ...

    def get_no_password_link_gen_report_failed_details(self) -> NoPasswordLinkGenReportFailedDetails: ...

    def get_no_password_link_view_create_report_details(self) -> NoPasswordLinkViewCreateReportDetails: ...

    def get_no_password_link_view_report_failed_details(self) -> NoPasswordLinkViewReportFailedDetails: ...

    def get_outdated_link_view_create_report_details(self) -> OutdatedLinkViewCreateReportDetails: ...

    def get_outdated_link_view_report_failed_details(self) -> OutdatedLinkViewReportFailedDetails: ...

    def get_paper_admin_export_start_details(self) -> PaperAdminExportStartDetails: ...

    def get_smart_sync_create_admin_privilege_report_details(self) -> SmartSyncCreateAdminPrivilegeReportDetails: ...

    def get_team_activity_create_report_details(self) -> TeamActivityCreateReportDetails: ...

    def get_team_activity_create_report_fail_details(self) -> TeamActivityCreateReportFailDetails: ...

    def get_collection_share_details(self) -> CollectionShareDetails: ...

    def get_file_transfers_file_add_details(self) -> FileTransfersFileAddDetails: ...

    def get_file_transfers_transfer_delete_details(self) -> FileTransfersTransferDeleteDetails: ...

    def get_file_transfers_transfer_download_details(self) -> FileTransfersTransferDownloadDetails: ...

    def get_file_transfers_transfer_send_details(self) -> FileTransfersTransferSendDetails: ...

    def get_file_transfers_transfer_view_details(self) -> FileTransfersTransferViewDetails: ...

    def get_note_acl_invite_only_details(self) -> NoteAclInviteOnlyDetails: ...

    def get_note_acl_link_details(self) -> NoteAclLinkDetails: ...

    def get_note_acl_team_link_details(self) -> NoteAclTeamLinkDetails: ...

    def get_note_shared_details(self) -> NoteSharedDetails: ...

    def get_note_share_receive_details(self) -> NoteShareReceiveDetails: ...

    def get_open_note_shared_details(self) -> OpenNoteSharedDetails: ...

    def get_sf_add_group_details(self) -> SfAddGroupDetails: ...

    def get_sf_allow_non_members_to_view_shared_links_details(self) -> SfAllowNonMembersToViewSharedLinksDetails: ...

    def get_sf_external_invite_warn_details(self) -> SfExternalInviteWarnDetails: ...

    def get_sf_fb_invite_details(self) -> SfFbInviteDetails: ...

    def get_sf_fb_invite_change_role_details(self) -> SfFbInviteChangeRoleDetails: ...

    def get_sf_fb_uninvite_details(self) -> SfFbUninviteDetails: ...

    def get_sf_invite_group_details(self) -> SfInviteGroupDetails: ...

    def get_sf_team_grant_access_details(self) -> SfTeamGrantAccessDetails: ...

    def get_sf_team_invite_details(self) -> SfTeamInviteDetails: ...

    def get_sf_team_invite_change_role_details(self) -> SfTeamInviteChangeRoleDetails: ...

    def get_sf_team_join_details(self) -> SfTeamJoinDetails: ...

    def get_sf_team_join_from_oob_link_details(self) -> SfTeamJoinFromOobLinkDetails: ...

    def get_sf_team_uninvite_details(self) -> SfTeamUninviteDetails: ...

    def get_shared_content_add_invitees_details(self) -> SharedContentAddInviteesDetails: ...

    def get_shared_content_add_link_expiry_details(self) -> SharedContentAddLinkExpiryDetails: ...

    def get_shared_content_add_link_password_details(self) -> SharedContentAddLinkPasswordDetails: ...

    def get_shared_content_add_member_details(self) -> SharedContentAddMemberDetails: ...

    def get_shared_content_change_downloads_policy_details(self) -> SharedContentChangeDownloadsPolicyDetails: ...

    def get_shared_content_change_invitee_role_details(self) -> SharedContentChangeInviteeRoleDetails: ...

    def get_shared_content_change_link_audience_details(self) -> SharedContentChangeLinkAudienceDetails: ...

    def get_shared_content_change_link_expiry_details(self) -> SharedContentChangeLinkExpiryDetails: ...

    def get_shared_content_change_link_password_details(self) -> SharedContentChangeLinkPasswordDetails: ...

    def get_shared_content_change_member_role_details(self) -> SharedContentChangeMemberRoleDetails: ...

    def get_shared_content_change_viewer_info_policy_details(self) -> SharedContentChangeViewerInfoPolicyDetails: ...

    def get_shared_content_claim_invitation_details(self) -> SharedContentClaimInvitationDetails: ...

    def get_shared_content_copy_details(self) -> SharedContentCopyDetails: ...

    def get_shared_content_download_details(self) -> SharedContentDownloadDetails: ...

    def get_shared_content_relinquish_membership_details(self) -> SharedContentRelinquishMembershipDetails: ...

    def get_shared_content_remove_invitees_details(self) -> SharedContentRemoveInviteesDetails: ...

    def get_shared_content_remove_link_expiry_details(self) -> SharedContentRemoveLinkExpiryDetails: ...

    def get_shared_content_remove_link_password_details(self) -> SharedContentRemoveLinkPasswordDetails: ...

    def get_shared_content_remove_member_details(self) -> SharedContentRemoveMemberDetails: ...

    def get_shared_content_request_access_details(self) -> SharedContentRequestAccessDetails: ...

    def get_shared_content_restore_invitees_details(self) -> SharedContentRestoreInviteesDetails: ...

    def get_shared_content_restore_member_details(self) -> SharedContentRestoreMemberDetails: ...

    def get_shared_content_unshare_details(self) -> SharedContentUnshareDetails: ...

    def get_shared_content_view_details(self) -> SharedContentViewDetails: ...

    def get_shared_folder_change_link_policy_details(self) -> SharedFolderChangeLinkPolicyDetails: ...

    def get_shared_folder_change_members_inheritance_policy_details(self) -> SharedFolderChangeMembersInheritancePolicyDetails: ...

    def get_shared_folder_change_members_management_policy_details(self) -> SharedFolderChangeMembersManagementPolicyDetails: ...

    def get_shared_folder_change_members_policy_details(self) -> SharedFolderChangeMembersPolicyDetails: ...

    def get_shared_folder_create_details(self) -> SharedFolderCreateDetails: ...

    def get_shared_folder_decline_invitation_details(self) -> SharedFolderDeclineInvitationDetails: ...

    def get_shared_folder_mount_details(self) -> SharedFolderMountDetails: ...

    def get_shared_folder_nest_details(self) -> SharedFolderNestDetails: ...

    def get_shared_folder_transfer_ownership_details(self) -> SharedFolderTransferOwnershipDetails: ...

    def get_shared_folder_unmount_details(self) -> SharedFolderUnmountDetails: ...

    def get_shared_link_add_expiry_details(self) -> SharedLinkAddExpiryDetails: ...

    def get_shared_link_change_expiry_details(self) -> SharedLinkChangeExpiryDetails: ...

    def get_shared_link_change_visibility_details(self) -> SharedLinkChangeVisibilityDetails: ...

    def get_shared_link_copy_details(self) -> SharedLinkCopyDetails: ...

    def get_shared_link_create_details(self) -> SharedLinkCreateDetails: ...

    def get_shared_link_disable_details(self) -> SharedLinkDisableDetails: ...

    def get_shared_link_download_details(self) -> SharedLinkDownloadDetails: ...

    def get_shared_link_remove_expiry_details(self) -> SharedLinkRemoveExpiryDetails: ...

    def get_shared_link_settings_add_expiration_details(self) -> SharedLinkSettingsAddExpirationDetails: ...

    def get_shared_link_settings_add_password_details(self) -> SharedLinkSettingsAddPasswordDetails: ...

    def get_shared_link_settings_allow_download_disabled_details(self) -> SharedLinkSettingsAllowDownloadDisabledDetails: ...

    def get_shared_link_settings_allow_download_enabled_details(self) -> SharedLinkSettingsAllowDownloadEnabledDetails: ...

    def get_shared_link_settings_change_audience_details(self) -> SharedLinkSettingsChangeAudienceDetails: ...

    def get_shared_link_settings_change_expiration_details(self) -> SharedLinkSettingsChangeExpirationDetails: ...

    def get_shared_link_settings_change_password_details(self) -> SharedLinkSettingsChangePasswordDetails: ...

    def get_shared_link_settings_remove_expiration_details(self) -> SharedLinkSettingsRemoveExpirationDetails: ...

    def get_shared_link_settings_remove_password_details(self) -> SharedLinkSettingsRemovePasswordDetails: ...

    def get_shared_link_share_details(self) -> SharedLinkShareDetails: ...

    def get_shared_link_view_details(self) -> SharedLinkViewDetails: ...

    def get_shared_note_opened_details(self) -> SharedNoteOpenedDetails: ...

    def get_shmodel_disable_downloads_details(self) -> ShmodelDisableDownloadsDetails: ...

    def get_shmodel_enable_downloads_details(self) -> ShmodelEnableDownloadsDetails: ...

    def get_shmodel_group_share_details(self) -> ShmodelGroupShareDetails: ...

    def get_showcase_access_granted_details(self) -> ShowcaseAccessGrantedDetails: ...

    def get_showcase_add_member_details(self) -> ShowcaseAddMemberDetails: ...

    def get_showcase_archived_details(self) -> ShowcaseArchivedDetails: ...

    def get_showcase_created_details(self) -> ShowcaseCreatedDetails: ...

    def get_showcase_delete_comment_details(self) -> ShowcaseDeleteCommentDetails: ...

    def get_showcase_edited_details(self) -> ShowcaseEditedDetails: ...

    def get_showcase_edit_comment_details(self) -> ShowcaseEditCommentDetails: ...

    def get_showcase_file_added_details(self) -> ShowcaseFileAddedDetails: ...

    def get_showcase_file_download_details(self) -> ShowcaseFileDownloadDetails: ...

    def get_showcase_file_removed_details(self) -> ShowcaseFileRemovedDetails: ...

    def get_showcase_file_view_details(self) -> ShowcaseFileViewDetails: ...

    def get_showcase_permanently_deleted_details(self) -> ShowcasePermanentlyDeletedDetails: ...

    def get_showcase_post_comment_details(self) -> ShowcasePostCommentDetails: ...

    def get_showcase_remove_member_details(self) -> ShowcaseRemoveMemberDetails: ...

    def get_showcase_renamed_details(self) -> ShowcaseRenamedDetails: ...

    def get_showcase_request_access_details(self) -> ShowcaseRequestAccessDetails: ...

    def get_showcase_resolve_comment_details(self) -> ShowcaseResolveCommentDetails: ...

    def get_showcase_restored_details(self) -> ShowcaseRestoredDetails: ...

    def get_showcase_trashed_details(self) -> ShowcaseTrashedDetails: ...

    def get_showcase_trashed_deprecated_details(self) -> ShowcaseTrashedDeprecatedDetails: ...

    def get_showcase_unresolve_comment_details(self) -> ShowcaseUnresolveCommentDetails: ...

    def get_showcase_untrashed_details(self) -> ShowcaseUntrashedDetails: ...

    def get_showcase_untrashed_deprecated_details(self) -> ShowcaseUntrashedDeprecatedDetails: ...

    def get_showcase_view_details(self) -> ShowcaseViewDetails: ...

    def get_sso_add_cert_details(self) -> SsoAddCertDetails: ...

    def get_sso_add_login_url_details(self) -> SsoAddLoginUrlDetails: ...

    def get_sso_add_logout_url_details(self) -> SsoAddLogoutUrlDetails: ...

    def get_sso_change_cert_details(self) -> SsoChangeCertDetails: ...

    def get_sso_change_login_url_details(self) -> SsoChangeLoginUrlDetails: ...

    def get_sso_change_logout_url_details(self) -> SsoChangeLogoutUrlDetails: ...

    def get_sso_change_saml_identity_mode_details(self) -> SsoChangeSamlIdentityModeDetails: ...

    def get_sso_remove_cert_details(self) -> SsoRemoveCertDetails: ...

    def get_sso_remove_login_url_details(self) -> SsoRemoveLoginUrlDetails: ...

    def get_sso_remove_logout_url_details(self) -> SsoRemoveLogoutUrlDetails: ...

    def get_team_folder_change_status_details(self) -> TeamFolderChangeStatusDetails: ...

    def get_team_folder_create_details(self) -> TeamFolderCreateDetails: ...

    def get_team_folder_downgrade_details(self) -> TeamFolderDowngradeDetails: ...

    def get_team_folder_permanently_delete_details(self) -> TeamFolderPermanentlyDeleteDetails: ...

    def get_team_folder_rename_details(self) -> TeamFolderRenameDetails: ...

    def get_team_selective_sync_settings_changed_details(self) -> TeamSelectiveSyncSettingsChangedDetails: ...

    def get_account_capture_change_policy_details(self) -> AccountCaptureChangePolicyDetails: ...

    def get_allow_download_disabled_details(self) -> AllowDownloadDisabledDetails: ...

    def get_allow_download_enabled_details(self) -> AllowDownloadEnabledDetails: ...

    def get_app_permissions_changed_details(self) -> AppPermissionsChangedDetails: ...

    def get_camera_uploads_policy_changed_details(self) -> CameraUploadsPolicyChangedDetails: ...

    def get_capture_transcript_policy_changed_details(self) -> CaptureTranscriptPolicyChangedDetails: ...

    def get_classification_change_policy_details(self) -> ClassificationChangePolicyDetails: ...

    def get_computer_backup_policy_changed_details(self) -> ComputerBackupPolicyChangedDetails: ...

    def get_content_administration_policy_changed_details(self) -> ContentAdministrationPolicyChangedDetails: ...

    def get_data_placement_restriction_change_policy_details(self) -> DataPlacementRestrictionChangePolicyDetails: ...

    def get_data_placement_restriction_satisfy_policy_details(self) -> DataPlacementRestrictionSatisfyPolicyDetails: ...

    def get_device_approvals_add_exception_details(self) -> DeviceApprovalsAddExceptionDetails: ...

    def get_device_approvals_change_desktop_policy_details(self) -> DeviceApprovalsChangeDesktopPolicyDetails: ...

    def get_device_approvals_change_mobile_policy_details(self) -> DeviceApprovalsChangeMobilePolicyDetails: ...

    def get_device_approvals_change_overage_action_details(self) -> DeviceApprovalsChangeOverageActionDetails: ...

    def get_device_approvals_change_unlink_action_details(self) -> DeviceApprovalsChangeUnlinkActionDetails: ...

    def get_device_approvals_remove_exception_details(self) -> DeviceApprovalsRemoveExceptionDetails: ...

    def get_directory_restrictions_add_members_details(self) -> DirectoryRestrictionsAddMembersDetails: ...

    def get_directory_restrictions_remove_members_details(self) -> DirectoryRestrictionsRemoveMembersDetails: ...

    def get_email_ingest_policy_changed_details(self) -> EmailIngestPolicyChangedDetails: ...

    def get_emm_add_exception_details(self) -> EmmAddExceptionDetails: ...

    def get_emm_change_policy_details(self) -> EmmChangePolicyDetails: ...

    def get_emm_remove_exception_details(self) -> EmmRemoveExceptionDetails: ...

    def get_extended_version_history_change_policy_details(self) -> ExtendedVersionHistoryChangePolicyDetails: ...

    def get_external_drive_backup_policy_changed_details(self) -> ExternalDriveBackupPolicyChangedDetails: ...

    def get_file_comments_change_policy_details(self) -> FileCommentsChangePolicyDetails: ...

    def get_file_locking_policy_changed_details(self) -> FileLockingPolicyChangedDetails: ...

    def get_file_requests_change_policy_details(self) -> FileRequestsChangePolicyDetails: ...

    def get_file_requests_emails_enabled_details(self) -> FileRequestsEmailsEnabledDetails: ...

    def get_file_requests_emails_restricted_to_team_only_details(self) -> FileRequestsEmailsRestrictedToTeamOnlyDetails: ...

    def get_file_transfers_policy_changed_details(self) -> FileTransfersPolicyChangedDetails: ...

    def get_google_sso_change_policy_details(self) -> GoogleSsoChangePolicyDetails: ...

    def get_group_user_management_change_policy_details(self) -> GroupUserManagementChangePolicyDetails: ...

    def get_integration_policy_changed_details(self) -> IntegrationPolicyChangedDetails: ...

    def get_invite_acceptance_email_policy_changed_details(self) -> InviteAcceptanceEmailPolicyChangedDetails: ...

    def get_member_requests_change_policy_details(self) -> MemberRequestsChangePolicyDetails: ...

    def get_member_send_invite_policy_changed_details(self) -> MemberSendInvitePolicyChangedDetails: ...

    def get_member_space_limits_add_exception_details(self) -> MemberSpaceLimitsAddExceptionDetails: ...

    def get_member_space_limits_change_caps_type_policy_details(self) -> MemberSpaceLimitsChangeCapsTypePolicyDetails: ...

    def get_member_space_limits_change_policy_details(self) -> MemberSpaceLimitsChangePolicyDetails: ...

    def get_member_space_limits_remove_exception_details(self) -> MemberSpaceLimitsRemoveExceptionDetails: ...

    def get_member_suggestions_change_policy_details(self) -> MemberSuggestionsChangePolicyDetails: ...

    def get_microsoft_office_addin_change_policy_details(self) -> MicrosoftOfficeAddinChangePolicyDetails: ...

    def get_network_control_change_policy_details(self) -> NetworkControlChangePolicyDetails: ...

    def get_paper_change_deployment_policy_details(self) -> PaperChangeDeploymentPolicyDetails: ...

    def get_paper_change_member_link_policy_details(self) -> PaperChangeMemberLinkPolicyDetails: ...

    def get_paper_change_member_policy_details(self) -> PaperChangeMemberPolicyDetails: ...

    def get_paper_change_policy_details(self) -> PaperChangePolicyDetails: ...

    def get_paper_default_folder_policy_changed_details(self) -> PaperDefaultFolderPolicyChangedDetails: ...

    def get_paper_desktop_policy_changed_details(self) -> PaperDesktopPolicyChangedDetails: ...

    def get_paper_enabled_users_group_addition_details(self) -> PaperEnabledUsersGroupAdditionDetails: ...

    def get_paper_enabled_users_group_removal_details(self) -> PaperEnabledUsersGroupRemovalDetails: ...

    def get_password_strength_requirements_change_policy_details(self) -> PasswordStrengthRequirementsChangePolicyDetails: ...

    def get_permanent_delete_change_policy_details(self) -> PermanentDeleteChangePolicyDetails: ...

    def get_reseller_support_change_policy_details(self) -> ResellerSupportChangePolicyDetails: ...

    def get_rewind_policy_changed_details(self) -> RewindPolicyChangedDetails: ...

    def get_send_for_signature_policy_changed_details(self) -> SendForSignaturePolicyChangedDetails: ...

    def get_sharing_change_folder_join_policy_details(self) -> SharingChangeFolderJoinPolicyDetails: ...

    def get_sharing_change_link_allow_change_expiration_policy_details(self) -> SharingChangeLinkAllowChangeExpirationPolicyDetails: ...

    def get_sharing_change_link_default_expiration_policy_details(self) -> SharingChangeLinkDefaultExpirationPolicyDetails: ...

    def get_sharing_change_link_enforce_password_policy_details(self) -> SharingChangeLinkEnforcePasswordPolicyDetails: ...

    def get_sharing_change_link_policy_details(self) -> SharingChangeLinkPolicyDetails: ...

    def get_sharing_change_member_policy_details(self) -> SharingChangeMemberPolicyDetails: ...

    def get_showcase_change_download_policy_details(self) -> ShowcaseChangeDownloadPolicyDetails: ...

    def get_showcase_change_enabled_policy_details(self) -> ShowcaseChangeEnabledPolicyDetails: ...

    def get_showcase_change_external_sharing_policy_details(self) -> ShowcaseChangeExternalSharingPolicyDetails: ...

    def get_smarter_smart_sync_policy_changed_details(self) -> SmarterSmartSyncPolicyChangedDetails: ...

    def get_smart_sync_change_policy_details(self) -> SmartSyncChangePolicyDetails: ...

    def get_smart_sync_not_opt_out_details(self) -> SmartSyncNotOptOutDetails: ...

    def get_smart_sync_opt_out_details(self) -> SmartSyncOptOutDetails: ...

    def get_sso_change_policy_details(self) -> SsoChangePolicyDetails: ...

    def get_team_branding_policy_changed_details(self) -> TeamBrandingPolicyChangedDetails: ...

    def get_team_extensions_policy_changed_details(self) -> TeamExtensionsPolicyChangedDetails: ...

    def get_team_selective_sync_policy_changed_details(self) -> TeamSelectiveSyncPolicyChangedDetails: ...

    def get_team_sharing_whitelist_subjects_changed_details(self) -> TeamSharingWhitelistSubjectsChangedDetails: ...

    def get_tfa_add_exception_details(self) -> TfaAddExceptionDetails: ...

    def get_tfa_change_policy_details(self) -> TfaChangePolicyDetails: ...

    def get_tfa_remove_exception_details(self) -> TfaRemoveExceptionDetails: ...

    def get_two_account_change_policy_details(self) -> TwoAccountChangePolicyDetails: ...

    def get_viewer_info_policy_changed_details(self) -> ViewerInfoPolicyChangedDetails: ...

    def get_watermarking_policy_changed_details(self) -> WatermarkingPolicyChangedDetails: ...

    def get_web_sessions_change_active_session_limit_details(self) -> WebSessionsChangeActiveSessionLimitDetails: ...

    def get_web_sessions_change_fixed_length_policy_details(self) -> WebSessionsChangeFixedLengthPolicyDetails: ...

    def get_web_sessions_change_idle_length_policy_details(self) -> WebSessionsChangeIdleLengthPolicyDetails: ...

    def get_data_residency_migration_request_successful_details(self) -> DataResidencyMigrationRequestSuccessfulDetails: ...

    def get_data_residency_migration_request_unsuccessful_details(self) -> DataResidencyMigrationRequestUnsuccessfulDetails: ...

    def get_team_merge_from_details(self) -> TeamMergeFromDetails: ...

    def get_team_merge_to_details(self) -> TeamMergeToDetails: ...

    def get_team_profile_add_background_details(self) -> TeamProfileAddBackgroundDetails: ...

    def get_team_profile_add_logo_details(self) -> TeamProfileAddLogoDetails: ...

    def get_team_profile_change_background_details(self) -> TeamProfileChangeBackgroundDetails: ...

    def get_team_profile_change_default_language_details(self) -> TeamProfileChangeDefaultLanguageDetails: ...

    def get_team_profile_change_logo_details(self) -> TeamProfileChangeLogoDetails: ...

    def get_team_profile_change_name_details(self) -> TeamProfileChangeNameDetails: ...

    def get_team_profile_remove_background_details(self) -> TeamProfileRemoveBackgroundDetails: ...

    def get_team_profile_remove_logo_details(self) -> TeamProfileRemoveLogoDetails: ...

    def get_tfa_add_backup_phone_details(self) -> TfaAddBackupPhoneDetails: ...

    def get_tfa_add_security_key_details(self) -> TfaAddSecurityKeyDetails: ...

    def get_tfa_change_backup_phone_details(self) -> TfaChangeBackupPhoneDetails: ...

    def get_tfa_change_status_details(self) -> TfaChangeStatusDetails: ...

    def get_tfa_remove_backup_phone_details(self) -> TfaRemoveBackupPhoneDetails: ...

    def get_tfa_remove_security_key_details(self) -> TfaRemoveSecurityKeyDetails: ...

    def get_tfa_reset_details(self) -> TfaResetDetails: ...

    def get_changed_enterprise_admin_role_details(self) -> ChangedEnterpriseAdminRoleDetails: ...

    def get_changed_enterprise_connected_team_status_details(self) -> ChangedEnterpriseConnectedTeamStatusDetails: ...

    def get_ended_enterprise_admin_session_details(self) -> EndedEnterpriseAdminSessionDetails: ...

    def get_ended_enterprise_admin_session_deprecated_details(self) -> EndedEnterpriseAdminSessionDeprecatedDetails: ...

    def get_enterprise_settings_locking_details(self) -> EnterpriseSettingsLockingDetails: ...

    def get_guest_admin_change_status_details(self) -> GuestAdminChangeStatusDetails: ...

    def get_started_enterprise_admin_session_details(self) -> StartedEnterpriseAdminSessionDetails: ...

    def get_team_merge_request_accepted_details(self) -> TeamMergeRequestAcceptedDetails: ...

    def get_team_merge_request_accepted_shown_to_primary_team_details(self) -> TeamMergeRequestAcceptedShownToPrimaryTeamDetails: ...

    def get_team_merge_request_accepted_shown_to_secondary_team_details(self) -> TeamMergeRequestAcceptedShownToSecondaryTeamDetails: ...

    def get_team_merge_request_auto_canceled_details(self) -> TeamMergeRequestAutoCanceledDetails: ...

    def get_team_merge_request_canceled_details(self) -> TeamMergeRequestCanceledDetails: ...

    def get_team_merge_request_canceled_shown_to_primary_team_details(self) -> TeamMergeRequestCanceledShownToPrimaryTeamDetails: ...

    def get_team_merge_request_canceled_shown_to_secondary_team_details(self) -> TeamMergeRequestCanceledShownToSecondaryTeamDetails: ...

    def get_team_merge_request_expired_details(self) -> TeamMergeRequestExpiredDetails: ...

    def get_team_merge_request_expired_shown_to_primary_team_details(self) -> TeamMergeRequestExpiredShownToPrimaryTeamDetails: ...

    def get_team_merge_request_expired_shown_to_secondary_team_details(self) -> TeamMergeRequestExpiredShownToSecondaryTeamDetails: ...

    def get_team_merge_request_rejected_shown_to_primary_team_details(self) -> TeamMergeRequestRejectedShownToPrimaryTeamDetails: ...

    def get_team_merge_request_rejected_shown_to_secondary_team_details(self) -> TeamMergeRequestRejectedShownToSecondaryTeamDetails: ...

    def get_team_merge_request_reminder_details(self) -> TeamMergeRequestReminderDetails: ...

    def get_team_merge_request_reminder_shown_to_primary_team_details(self) -> TeamMergeRequestReminderShownToPrimaryTeamDetails: ...

    def get_team_merge_request_reminder_shown_to_secondary_team_details(self) -> TeamMergeRequestReminderShownToSecondaryTeamDetails: ...

    def get_team_merge_request_revoked_details(self) -> TeamMergeRequestRevokedDetails: ...

    def get_team_merge_request_sent_shown_to_primary_team_details(self) -> TeamMergeRequestSentShownToPrimaryTeamDetails: ...

    def get_team_merge_request_sent_shown_to_secondary_team_details(self) -> TeamMergeRequestSentShownToSecondaryTeamDetails: ...

    def get_missing_details(self) -> MissingDetails: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EventDetails_validator: bv.Validator = ...

class EventType(bb.Union):
    other: EventType = ...

    def is_admin_alerting_alert_state_changed(self) -> bool: ...

    def is_admin_alerting_changed_alert_config(self) -> bool: ...

    def is_admin_alerting_triggered_alert(self) -> bool: ...

    def is_app_blocked_by_permissions(self) -> bool: ...

    def is_app_link_team(self) -> bool: ...

    def is_app_link_user(self) -> bool: ...

    def is_app_unlink_team(self) -> bool: ...

    def is_app_unlink_user(self) -> bool: ...

    def is_integration_connected(self) -> bool: ...

    def is_integration_disconnected(self) -> bool: ...

    def is_file_add_comment(self) -> bool: ...

    def is_file_change_comment_subscription(self) -> bool: ...

    def is_file_delete_comment(self) -> bool: ...

    def is_file_edit_comment(self) -> bool: ...

    def is_file_like_comment(self) -> bool: ...

    def is_file_resolve_comment(self) -> bool: ...

    def is_file_unlike_comment(self) -> bool: ...

    def is_file_unresolve_comment(self) -> bool: ...

    def is_governance_policy_add_folders(self) -> bool: ...

    def is_governance_policy_add_folder_failed(self) -> bool: ...

    def is_governance_policy_content_disposed(self) -> bool: ...

    def is_governance_policy_create(self) -> bool: ...

    def is_governance_policy_delete(self) -> bool: ...

    def is_governance_policy_edit_details(self) -> bool: ...

    def is_governance_policy_edit_duration(self) -> bool: ...

    def is_governance_policy_export_created(self) -> bool: ...

    def is_governance_policy_export_removed(self) -> bool: ...

    def is_governance_policy_remove_folders(self) -> bool: ...

    def is_governance_policy_report_created(self) -> bool: ...

    def is_governance_policy_zip_part_downloaded(self) -> bool: ...

    def is_legal_holds_activate_a_hold(self) -> bool: ...

    def is_legal_holds_add_members(self) -> bool: ...

    def is_legal_holds_change_hold_details(self) -> bool: ...

    def is_legal_holds_change_hold_name(self) -> bool: ...

    def is_legal_holds_export_a_hold(self) -> bool: ...

    def is_legal_holds_export_cancelled(self) -> bool: ...

    def is_legal_holds_export_downloaded(self) -> bool: ...

    def is_legal_holds_export_removed(self) -> bool: ...

    def is_legal_holds_release_a_hold(self) -> bool: ...

    def is_legal_holds_remove_members(self) -> bool: ...

    def is_legal_holds_report_a_hold(self) -> bool: ...

    def is_device_change_ip_desktop(self) -> bool: ...

    def is_device_change_ip_mobile(self) -> bool: ...

    def is_device_change_ip_web(self) -> bool: ...

    def is_device_delete_on_unlink_fail(self) -> bool: ...

    def is_device_delete_on_unlink_success(self) -> bool: ...

    def is_device_link_fail(self) -> bool: ...

    def is_device_link_success(self) -> bool: ...

    def is_device_management_disabled(self) -> bool: ...

    def is_device_management_enabled(self) -> bool: ...

    def is_device_sync_backup_status_changed(self) -> bool: ...

    def is_device_unlink(self) -> bool: ...

    def is_dropbox_passwords_exported(self) -> bool: ...

    def is_dropbox_passwords_new_device_enrolled(self) -> bool: ...

    def is_emm_refresh_auth_token(self) -> bool: ...

    def is_account_capture_change_availability(self) -> bool: ...

    def is_account_capture_migrate_account(self) -> bool: ...

    def is_account_capture_notification_emails_sent(self) -> bool: ...

    def is_account_capture_relinquish_account(self) -> bool: ...

    def is_disabled_domain_invites(self) -> bool: ...

    def is_domain_invites_approve_request_to_join_team(self) -> bool: ...

    def is_domain_invites_decline_request_to_join_team(self) -> bool: ...

    def is_domain_invites_email_existing_users(self) -> bool: ...

    def is_domain_invites_request_to_join_team(self) -> bool: ...

    def is_domain_invites_set_invite_new_user_pref_to_no(self) -> bool: ...

    def is_domain_invites_set_invite_new_user_pref_to_yes(self) -> bool: ...

    def is_domain_verification_add_domain_fail(self) -> bool: ...

    def is_domain_verification_add_domain_success(self) -> bool: ...

    def is_domain_verification_remove_domain(self) -> bool: ...

    def is_enabled_domain_invites(self) -> bool: ...

    def is_apply_naming_convention(self) -> bool: ...

    def is_create_folder(self) -> bool: ...

    def is_file_add(self) -> bool: ...

    def is_file_copy(self) -> bool: ...

    def is_file_delete(self) -> bool: ...

    def is_file_download(self) -> bool: ...

    def is_file_edit(self) -> bool: ...

    def is_file_get_copy_reference(self) -> bool: ...

    def is_file_locking_lock_status_changed(self) -> bool: ...

    def is_file_move(self) -> bool: ...

    def is_file_permanently_delete(self) -> bool: ...

    def is_file_preview(self) -> bool: ...

    def is_file_rename(self) -> bool: ...

    def is_file_restore(self) -> bool: ...

    def is_file_revert(self) -> bool: ...

    def is_file_rollback_changes(self) -> bool: ...

    def is_file_save_copy_reference(self) -> bool: ...

    def is_folder_overview_description_changed(self) -> bool: ...

    def is_folder_overview_item_pinned(self) -> bool: ...

    def is_folder_overview_item_unpinned(self) -> bool: ...

    def is_object_label_added(self) -> bool: ...

    def is_object_label_removed(self) -> bool: ...

    def is_object_label_updated_value(self) -> bool: ...

    def is_organize_folder_with_tidy(self) -> bool: ...

    def is_rewind_folder(self) -> bool: ...

    def is_undo_naming_convention(self) -> bool: ...

    def is_undo_organize_folder_with_tidy(self) -> bool: ...

    def is_user_tags_added(self) -> bool: ...

    def is_user_tags_removed(self) -> bool: ...

    def is_email_ingest_receive_file(self) -> bool: ...

    def is_file_request_change(self) -> bool: ...

    def is_file_request_close(self) -> bool: ...

    def is_file_request_create(self) -> bool: ...

    def is_file_request_delete(self) -> bool: ...

    def is_file_request_receive_file(self) -> bool: ...

    def is_group_add_external_id(self) -> bool: ...

    def is_group_add_member(self) -> bool: ...

    def is_group_change_external_id(self) -> bool: ...

    def is_group_change_management_type(self) -> bool: ...

    def is_group_change_member_role(self) -> bool: ...

    def is_group_create(self) -> bool: ...

    def is_group_delete(self) -> bool: ...

    def is_group_description_updated(self) -> bool: ...

    def is_group_join_policy_updated(self) -> bool: ...

    def is_group_moved(self) -> bool: ...

    def is_group_remove_external_id(self) -> bool: ...

    def is_group_remove_member(self) -> bool: ...

    def is_group_rename(self) -> bool: ...

    def is_account_lock_or_unlocked(self) -> bool: ...

    def is_emm_error(self) -> bool: ...

    def is_guest_admin_signed_in_via_trusted_teams(self) -> bool: ...

    def is_guest_admin_signed_out_via_trusted_teams(self) -> bool: ...

    def is_login_fail(self) -> bool: ...

    def is_login_success(self) -> bool: ...

    def is_logout(self) -> bool: ...

    def is_reseller_support_session_end(self) -> bool: ...

    def is_reseller_support_session_start(self) -> bool: ...

    def is_sign_in_as_session_end(self) -> bool: ...

    def is_sign_in_as_session_start(self) -> bool: ...

    def is_sso_error(self) -> bool: ...

    def is_create_team_invite_link(self) -> bool: ...

    def is_delete_team_invite_link(self) -> bool: ...

    def is_member_add_external_id(self) -> bool: ...

    def is_member_add_name(self) -> bool: ...

    def is_member_change_admin_role(self) -> bool: ...

    def is_member_change_email(self) -> bool: ...

    def is_member_change_external_id(self) -> bool: ...

    def is_member_change_membership_type(self) -> bool: ...

    def is_member_change_name(self) -> bool: ...

    def is_member_change_reseller_role(self) -> bool: ...

    def is_member_change_status(self) -> bool: ...

    def is_member_delete_manual_contacts(self) -> bool: ...

    def is_member_delete_profile_photo(self) -> bool: ...

    def is_member_permanently_delete_account_contents(self) -> bool: ...

    def is_member_remove_external_id(self) -> bool: ...

    def is_member_set_profile_photo(self) -> bool: ...

    def is_member_space_limits_add_custom_quota(self) -> bool: ...

    def is_member_space_limits_change_custom_quota(self) -> bool: ...

    def is_member_space_limits_change_status(self) -> bool: ...

    def is_member_space_limits_remove_custom_quota(self) -> bool: ...

    def is_member_suggest(self) -> bool: ...

    def is_member_transfer_account_contents(self) -> bool: ...

    def is_pending_secondary_email_added(self) -> bool: ...

    def is_secondary_email_deleted(self) -> bool: ...

    def is_secondary_email_verified(self) -> bool: ...

    def is_secondary_mails_policy_changed(self) -> bool: ...

    def is_binder_add_page(self) -> bool: ...

    def is_binder_add_section(self) -> bool: ...

    def is_binder_remove_page(self) -> bool: ...

    def is_binder_remove_section(self) -> bool: ...

    def is_binder_rename_page(self) -> bool: ...

    def is_binder_rename_section(self) -> bool: ...

    def is_binder_reorder_page(self) -> bool: ...

    def is_binder_reorder_section(self) -> bool: ...

    def is_paper_content_add_member(self) -> bool: ...

    def is_paper_content_add_to_folder(self) -> bool: ...

    def is_paper_content_archive(self) -> bool: ...

    def is_paper_content_create(self) -> bool: ...

    def is_paper_content_permanently_delete(self) -> bool: ...

    def is_paper_content_remove_from_folder(self) -> bool: ...

    def is_paper_content_remove_member(self) -> bool: ...

    def is_paper_content_rename(self) -> bool: ...

    def is_paper_content_restore(self) -> bool: ...

    def is_paper_doc_add_comment(self) -> bool: ...

    def is_paper_doc_change_member_role(self) -> bool: ...

    def is_paper_doc_change_sharing_policy(self) -> bool: ...

    def is_paper_doc_change_subscription(self) -> bool: ...

    def is_paper_doc_deleted(self) -> bool: ...

    def is_paper_doc_delete_comment(self) -> bool: ...

    def is_paper_doc_download(self) -> bool: ...

    def is_paper_doc_edit(self) -> bool: ...

    def is_paper_doc_edit_comment(self) -> bool: ...

    def is_paper_doc_followed(self) -> bool: ...

    def is_paper_doc_mention(self) -> bool: ...

    def is_paper_doc_ownership_changed(self) -> bool: ...

    def is_paper_doc_request_access(self) -> bool: ...

    def is_paper_doc_resolve_comment(self) -> bool: ...

    def is_paper_doc_revert(self) -> bool: ...

    def is_paper_doc_slack_share(self) -> bool: ...

    def is_paper_doc_team_invite(self) -> bool: ...

    def is_paper_doc_trashed(self) -> bool: ...

    def is_paper_doc_unresolve_comment(self) -> bool: ...

    def is_paper_doc_untrashed(self) -> bool: ...

    def is_paper_doc_view(self) -> bool: ...

    def is_paper_external_view_allow(self) -> bool: ...

    def is_paper_external_view_default_team(self) -> bool: ...

    def is_paper_external_view_forbid(self) -> bool: ...

    def is_paper_folder_change_subscription(self) -> bool: ...

    def is_paper_folder_deleted(self) -> bool: ...

    def is_paper_folder_followed(self) -> bool: ...

    def is_paper_folder_team_invite(self) -> bool: ...

    def is_paper_published_link_change_permission(self) -> bool: ...

    def is_paper_published_link_create(self) -> bool: ...

    def is_paper_published_link_disabled(self) -> bool: ...

    def is_paper_published_link_view(self) -> bool: ...

    def is_password_change(self) -> bool: ...

    def is_password_reset(self) -> bool: ...

    def is_password_reset_all(self) -> bool: ...

    def is_classification_create_report(self) -> bool: ...

    def is_classification_create_report_fail(self) -> bool: ...

    def is_emm_create_exceptions_report(self) -> bool: ...

    def is_emm_create_usage_report(self) -> bool: ...

    def is_export_members_report(self) -> bool: ...

    def is_export_members_report_fail(self) -> bool: ...

    def is_external_sharing_create_report(self) -> bool: ...

    def is_external_sharing_report_failed(self) -> bool: ...

    def is_no_expiration_link_gen_create_report(self) -> bool: ...

    def is_no_expiration_link_gen_report_failed(self) -> bool: ...

    def is_no_password_link_gen_create_report(self) -> bool: ...

    def is_no_password_link_gen_report_failed(self) -> bool: ...

    def is_no_password_link_view_create_report(self) -> bool: ...

    def is_no_password_link_view_report_failed(self) -> bool: ...

    def is_outdated_link_view_create_report(self) -> bool: ...

    def is_outdated_link_view_report_failed(self) -> bool: ...

    def is_paper_admin_export_start(self) -> bool: ...

    def is_smart_sync_create_admin_privilege_report(self) -> bool: ...

    def is_team_activity_create_report(self) -> bool: ...

    def is_team_activity_create_report_fail(self) -> bool: ...

    def is_collection_share(self) -> bool: ...

    def is_file_transfers_file_add(self) -> bool: ...

    def is_file_transfers_transfer_delete(self) -> bool: ...

    def is_file_transfers_transfer_download(self) -> bool: ...

    def is_file_transfers_transfer_send(self) -> bool: ...

    def is_file_transfers_transfer_view(self) -> bool: ...

    def is_note_acl_invite_only(self) -> bool: ...

    def is_note_acl_link(self) -> bool: ...

    def is_note_acl_team_link(self) -> bool: ...

    def is_note_shared(self) -> bool: ...

    def is_note_share_receive(self) -> bool: ...

    def is_open_note_shared(self) -> bool: ...

    def is_sf_add_group(self) -> bool: ...

    def is_sf_allow_non_members_to_view_shared_links(self) -> bool: ...

    def is_sf_external_invite_warn(self) -> bool: ...

    def is_sf_fb_invite(self) -> bool: ...

    def is_sf_fb_invite_change_role(self) -> bool: ...

    def is_sf_fb_uninvite(self) -> bool: ...

    def is_sf_invite_group(self) -> bool: ...

    def is_sf_team_grant_access(self) -> bool: ...

    def is_sf_team_invite(self) -> bool: ...

    def is_sf_team_invite_change_role(self) -> bool: ...

    def is_sf_team_join(self) -> bool: ...

    def is_sf_team_join_from_oob_link(self) -> bool: ...

    def is_sf_team_uninvite(self) -> bool: ...

    def is_shared_content_add_invitees(self) -> bool: ...

    def is_shared_content_add_link_expiry(self) -> bool: ...

    def is_shared_content_add_link_password(self) -> bool: ...

    def is_shared_content_add_member(self) -> bool: ...

    def is_shared_content_change_downloads_policy(self) -> bool: ...

    def is_shared_content_change_invitee_role(self) -> bool: ...

    def is_shared_content_change_link_audience(self) -> bool: ...

    def is_shared_content_change_link_expiry(self) -> bool: ...

    def is_shared_content_change_link_password(self) -> bool: ...

    def is_shared_content_change_member_role(self) -> bool: ...

    def is_shared_content_change_viewer_info_policy(self) -> bool: ...

    def is_shared_content_claim_invitation(self) -> bool: ...

    def is_shared_content_copy(self) -> bool: ...

    def is_shared_content_download(self) -> bool: ...

    def is_shared_content_relinquish_membership(self) -> bool: ...

    def is_shared_content_remove_invitees(self) -> bool: ...

    def is_shared_content_remove_link_expiry(self) -> bool: ...

    def is_shared_content_remove_link_password(self) -> bool: ...

    def is_shared_content_remove_member(self) -> bool: ...

    def is_shared_content_request_access(self) -> bool: ...

    def is_shared_content_restore_invitees(self) -> bool: ...

    def is_shared_content_restore_member(self) -> bool: ...

    def is_shared_content_unshare(self) -> bool: ...

    def is_shared_content_view(self) -> bool: ...

    def is_shared_folder_change_link_policy(self) -> bool: ...

    def is_shared_folder_change_members_inheritance_policy(self) -> bool: ...

    def is_shared_folder_change_members_management_policy(self) -> bool: ...

    def is_shared_folder_change_members_policy(self) -> bool: ...

    def is_shared_folder_create(self) -> bool: ...

    def is_shared_folder_decline_invitation(self) -> bool: ...

    def is_shared_folder_mount(self) -> bool: ...

    def is_shared_folder_nest(self) -> bool: ...

    def is_shared_folder_transfer_ownership(self) -> bool: ...

    def is_shared_folder_unmount(self) -> bool: ...

    def is_shared_link_add_expiry(self) -> bool: ...

    def is_shared_link_change_expiry(self) -> bool: ...

    def is_shared_link_change_visibility(self) -> bool: ...

    def is_shared_link_copy(self) -> bool: ...

    def is_shared_link_create(self) -> bool: ...

    def is_shared_link_disable(self) -> bool: ...

    def is_shared_link_download(self) -> bool: ...

    def is_shared_link_remove_expiry(self) -> bool: ...

    def is_shared_link_settings_add_expiration(self) -> bool: ...

    def is_shared_link_settings_add_password(self) -> bool: ...

    def is_shared_link_settings_allow_download_disabled(self) -> bool: ...

    def is_shared_link_settings_allow_download_enabled(self) -> bool: ...

    def is_shared_link_settings_change_audience(self) -> bool: ...

    def is_shared_link_settings_change_expiration(self) -> bool: ...

    def is_shared_link_settings_change_password(self) -> bool: ...

    def is_shared_link_settings_remove_expiration(self) -> bool: ...

    def is_shared_link_settings_remove_password(self) -> bool: ...

    def is_shared_link_share(self) -> bool: ...

    def is_shared_link_view(self) -> bool: ...

    def is_shared_note_opened(self) -> bool: ...

    def is_shmodel_disable_downloads(self) -> bool: ...

    def is_shmodel_enable_downloads(self) -> bool: ...

    def is_shmodel_group_share(self) -> bool: ...

    def is_showcase_access_granted(self) -> bool: ...

    def is_showcase_add_member(self) -> bool: ...

    def is_showcase_archived(self) -> bool: ...

    def is_showcase_created(self) -> bool: ...

    def is_showcase_delete_comment(self) -> bool: ...

    def is_showcase_edited(self) -> bool: ...

    def is_showcase_edit_comment(self) -> bool: ...

    def is_showcase_file_added(self) -> bool: ...

    def is_showcase_file_download(self) -> bool: ...

    def is_showcase_file_removed(self) -> bool: ...

    def is_showcase_file_view(self) -> bool: ...

    def is_showcase_permanently_deleted(self) -> bool: ...

    def is_showcase_post_comment(self) -> bool: ...

    def is_showcase_remove_member(self) -> bool: ...

    def is_showcase_renamed(self) -> bool: ...

    def is_showcase_request_access(self) -> bool: ...

    def is_showcase_resolve_comment(self) -> bool: ...

    def is_showcase_restored(self) -> bool: ...

    def is_showcase_trashed(self) -> bool: ...

    def is_showcase_trashed_deprecated(self) -> bool: ...

    def is_showcase_unresolve_comment(self) -> bool: ...

    def is_showcase_untrashed(self) -> bool: ...

    def is_showcase_untrashed_deprecated(self) -> bool: ...

    def is_showcase_view(self) -> bool: ...

    def is_sso_add_cert(self) -> bool: ...

    def is_sso_add_login_url(self) -> bool: ...

    def is_sso_add_logout_url(self) -> bool: ...

    def is_sso_change_cert(self) -> bool: ...

    def is_sso_change_login_url(self) -> bool: ...

    def is_sso_change_logout_url(self) -> bool: ...

    def is_sso_change_saml_identity_mode(self) -> bool: ...

    def is_sso_remove_cert(self) -> bool: ...

    def is_sso_remove_login_url(self) -> bool: ...

    def is_sso_remove_logout_url(self) -> bool: ...

    def is_team_folder_change_status(self) -> bool: ...

    def is_team_folder_create(self) -> bool: ...

    def is_team_folder_downgrade(self) -> bool: ...

    def is_team_folder_permanently_delete(self) -> bool: ...

    def is_team_folder_rename(self) -> bool: ...

    def is_team_selective_sync_settings_changed(self) -> bool: ...

    def is_account_capture_change_policy(self) -> bool: ...

    def is_allow_download_disabled(self) -> bool: ...

    def is_allow_download_enabled(self) -> bool: ...

    def is_app_permissions_changed(self) -> bool: ...

    def is_camera_uploads_policy_changed(self) -> bool: ...

    def is_capture_transcript_policy_changed(self) -> bool: ...

    def is_classification_change_policy(self) -> bool: ...

    def is_computer_backup_policy_changed(self) -> bool: ...

    def is_content_administration_policy_changed(self) -> bool: ...

    def is_data_placement_restriction_change_policy(self) -> bool: ...

    def is_data_placement_restriction_satisfy_policy(self) -> bool: ...

    def is_device_approvals_add_exception(self) -> bool: ...

    def is_device_approvals_change_desktop_policy(self) -> bool: ...

    def is_device_approvals_change_mobile_policy(self) -> bool: ...

    def is_device_approvals_change_overage_action(self) -> bool: ...

    def is_device_approvals_change_unlink_action(self) -> bool: ...

    def is_device_approvals_remove_exception(self) -> bool: ...

    def is_directory_restrictions_add_members(self) -> bool: ...

    def is_directory_restrictions_remove_members(self) -> bool: ...

    def is_email_ingest_policy_changed(self) -> bool: ...

    def is_emm_add_exception(self) -> bool: ...

    def is_emm_change_policy(self) -> bool: ...

    def is_emm_remove_exception(self) -> bool: ...

    def is_extended_version_history_change_policy(self) -> bool: ...

    def is_external_drive_backup_policy_changed(self) -> bool: ...

    def is_file_comments_change_policy(self) -> bool: ...

    def is_file_locking_policy_changed(self) -> bool: ...

    def is_file_requests_change_policy(self) -> bool: ...

    def is_file_requests_emails_enabled(self) -> bool: ...

    def is_file_requests_emails_restricted_to_team_only(self) -> bool: ...

    def is_file_transfers_policy_changed(self) -> bool: ...

    def is_google_sso_change_policy(self) -> bool: ...

    def is_group_user_management_change_policy(self) -> bool: ...

    def is_integration_policy_changed(self) -> bool: ...

    def is_invite_acceptance_email_policy_changed(self) -> bool: ...

    def is_member_requests_change_policy(self) -> bool: ...

    def is_member_send_invite_policy_changed(self) -> bool: ...

    def is_member_space_limits_add_exception(self) -> bool: ...

    def is_member_space_limits_change_caps_type_policy(self) -> bool: ...

    def is_member_space_limits_change_policy(self) -> bool: ...

    def is_member_space_limits_remove_exception(self) -> bool: ...

    def is_member_suggestions_change_policy(self) -> bool: ...

    def is_microsoft_office_addin_change_policy(self) -> bool: ...

    def is_network_control_change_policy(self) -> bool: ...

    def is_paper_change_deployment_policy(self) -> bool: ...

    def is_paper_change_member_link_policy(self) -> bool: ...

    def is_paper_change_member_policy(self) -> bool: ...

    def is_paper_change_policy(self) -> bool: ...

    def is_paper_default_folder_policy_changed(self) -> bool: ...

    def is_paper_desktop_policy_changed(self) -> bool: ...

    def is_paper_enabled_users_group_addition(self) -> bool: ...

    def is_paper_enabled_users_group_removal(self) -> bool: ...

    def is_password_strength_requirements_change_policy(self) -> bool: ...

    def is_permanent_delete_change_policy(self) -> bool: ...

    def is_reseller_support_change_policy(self) -> bool: ...

    def is_rewind_policy_changed(self) -> bool: ...

    def is_send_for_signature_policy_changed(self) -> bool: ...

    def is_sharing_change_folder_join_policy(self) -> bool: ...

    def is_sharing_change_link_allow_change_expiration_policy(self) -> bool: ...

    def is_sharing_change_link_default_expiration_policy(self) -> bool: ...

    def is_sharing_change_link_enforce_password_policy(self) -> bool: ...

    def is_sharing_change_link_policy(self) -> bool: ...

    def is_sharing_change_member_policy(self) -> bool: ...

    def is_showcase_change_download_policy(self) -> bool: ...

    def is_showcase_change_enabled_policy(self) -> bool: ...

    def is_showcase_change_external_sharing_policy(self) -> bool: ...

    def is_smarter_smart_sync_policy_changed(self) -> bool: ...

    def is_smart_sync_change_policy(self) -> bool: ...

    def is_smart_sync_not_opt_out(self) -> bool: ...

    def is_smart_sync_opt_out(self) -> bool: ...

    def is_sso_change_policy(self) -> bool: ...

    def is_team_branding_policy_changed(self) -> bool: ...

    def is_team_extensions_policy_changed(self) -> bool: ...

    def is_team_selective_sync_policy_changed(self) -> bool: ...

    def is_team_sharing_whitelist_subjects_changed(self) -> bool: ...

    def is_tfa_add_exception(self) -> bool: ...

    def is_tfa_change_policy(self) -> bool: ...

    def is_tfa_remove_exception(self) -> bool: ...

    def is_two_account_change_policy(self) -> bool: ...

    def is_viewer_info_policy_changed(self) -> bool: ...

    def is_watermarking_policy_changed(self) -> bool: ...

    def is_web_sessions_change_active_session_limit(self) -> bool: ...

    def is_web_sessions_change_fixed_length_policy(self) -> bool: ...

    def is_web_sessions_change_idle_length_policy(self) -> bool: ...

    def is_data_residency_migration_request_successful(self) -> bool: ...

    def is_data_residency_migration_request_unsuccessful(self) -> bool: ...

    def is_team_merge_from(self) -> bool: ...

    def is_team_merge_to(self) -> bool: ...

    def is_team_profile_add_background(self) -> bool: ...

    def is_team_profile_add_logo(self) -> bool: ...

    def is_team_profile_change_background(self) -> bool: ...

    def is_team_profile_change_default_language(self) -> bool: ...

    def is_team_profile_change_logo(self) -> bool: ...

    def is_team_profile_change_name(self) -> bool: ...

    def is_team_profile_remove_background(self) -> bool: ...

    def is_team_profile_remove_logo(self) -> bool: ...

    def is_tfa_add_backup_phone(self) -> bool: ...

    def is_tfa_add_security_key(self) -> bool: ...

    def is_tfa_change_backup_phone(self) -> bool: ...

    def is_tfa_change_status(self) -> bool: ...

    def is_tfa_remove_backup_phone(self) -> bool: ...

    def is_tfa_remove_security_key(self) -> bool: ...

    def is_tfa_reset(self) -> bool: ...

    def is_changed_enterprise_admin_role(self) -> bool: ...

    def is_changed_enterprise_connected_team_status(self) -> bool: ...

    def is_ended_enterprise_admin_session(self) -> bool: ...

    def is_ended_enterprise_admin_session_deprecated(self) -> bool: ...

    def is_enterprise_settings_locking(self) -> bool: ...

    def is_guest_admin_change_status(self) -> bool: ...

    def is_started_enterprise_admin_session(self) -> bool: ...

    def is_team_merge_request_accepted(self) -> bool: ...

    def is_team_merge_request_accepted_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_accepted_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_auto_canceled(self) -> bool: ...

    def is_team_merge_request_canceled(self) -> bool: ...

    def is_team_merge_request_canceled_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_canceled_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_expired(self) -> bool: ...

    def is_team_merge_request_expired_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_expired_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_rejected_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_rejected_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_reminder(self) -> bool: ...

    def is_team_merge_request_reminder_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_reminder_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_revoked(self) -> bool: ...

    def is_team_merge_request_sent_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_sent_shown_to_secondary_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def admin_alerting_alert_state_changed(cls, val: AdminAlertingAlertStateChangedType) -> EventType: ...

    @classmethod
    def admin_alerting_changed_alert_config(cls, val: AdminAlertingChangedAlertConfigType) -> EventType: ...

    @classmethod
    def admin_alerting_triggered_alert(cls, val: AdminAlertingTriggeredAlertType) -> EventType: ...

    @classmethod
    def app_blocked_by_permissions(cls, val: AppBlockedByPermissionsType) -> EventType: ...

    @classmethod
    def app_link_team(cls, val: AppLinkTeamType) -> EventType: ...

    @classmethod
    def app_link_user(cls, val: AppLinkUserType) -> EventType: ...

    @classmethod
    def app_unlink_team(cls, val: AppUnlinkTeamType) -> EventType: ...

    @classmethod
    def app_unlink_user(cls, val: AppUnlinkUserType) -> EventType: ...

    @classmethod
    def integration_connected(cls, val: IntegrationConnectedType) -> EventType: ...

    @classmethod
    def integration_disconnected(cls, val: IntegrationDisconnectedType) -> EventType: ...

    @classmethod
    def file_add_comment(cls, val: FileAddCommentType) -> EventType: ...

    @classmethod
    def file_change_comment_subscription(cls, val: FileChangeCommentSubscriptionType) -> EventType: ...

    @classmethod
    def file_delete_comment(cls, val: FileDeleteCommentType) -> EventType: ...

    @classmethod
    def file_edit_comment(cls, val: FileEditCommentType) -> EventType: ...

    @classmethod
    def file_like_comment(cls, val: FileLikeCommentType) -> EventType: ...

    @classmethod
    def file_resolve_comment(cls, val: FileResolveCommentType) -> EventType: ...

    @classmethod
    def file_unlike_comment(cls, val: FileUnlikeCommentType) -> EventType: ...

    @classmethod
    def file_unresolve_comment(cls, val: FileUnresolveCommentType) -> EventType: ...

    @classmethod
    def governance_policy_add_folders(cls, val: GovernancePolicyAddFoldersType) -> EventType: ...

    @classmethod
    def governance_policy_add_folder_failed(cls, val: GovernancePolicyAddFolderFailedType) -> EventType: ...

    @classmethod
    def governance_policy_content_disposed(cls, val: GovernancePolicyContentDisposedType) -> EventType: ...

    @classmethod
    def governance_policy_create(cls, val: GovernancePolicyCreateType) -> EventType: ...

    @classmethod
    def governance_policy_delete(cls, val: GovernancePolicyDeleteType) -> EventType: ...

    @classmethod
    def governance_policy_edit_details(cls, val: GovernancePolicyEditDetailsType) -> EventType: ...

    @classmethod
    def governance_policy_edit_duration(cls, val: GovernancePolicyEditDurationType) -> EventType: ...

    @classmethod
    def governance_policy_export_created(cls, val: GovernancePolicyExportCreatedType) -> EventType: ...

    @classmethod
    def governance_policy_export_removed(cls, val: GovernancePolicyExportRemovedType) -> EventType: ...

    @classmethod
    def governance_policy_remove_folders(cls, val: GovernancePolicyRemoveFoldersType) -> EventType: ...

    @classmethod
    def governance_policy_report_created(cls, val: GovernancePolicyReportCreatedType) -> EventType: ...

    @classmethod
    def governance_policy_zip_part_downloaded(cls, val: GovernancePolicyZipPartDownloadedType) -> EventType: ...

    @classmethod
    def legal_holds_activate_a_hold(cls, val: LegalHoldsActivateAHoldType) -> EventType: ...

    @classmethod
    def legal_holds_add_members(cls, val: LegalHoldsAddMembersType) -> EventType: ...

    @classmethod
    def legal_holds_change_hold_details(cls, val: LegalHoldsChangeHoldDetailsType) -> EventType: ...

    @classmethod
    def legal_holds_change_hold_name(cls, val: LegalHoldsChangeHoldNameType) -> EventType: ...

    @classmethod
    def legal_holds_export_a_hold(cls, val: LegalHoldsExportAHoldType) -> EventType: ...

    @classmethod
    def legal_holds_export_cancelled(cls, val: LegalHoldsExportCancelledType) -> EventType: ...

    @classmethod
    def legal_holds_export_downloaded(cls, val: LegalHoldsExportDownloadedType) -> EventType: ...

    @classmethod
    def legal_holds_export_removed(cls, val: LegalHoldsExportRemovedType) -> EventType: ...

    @classmethod
    def legal_holds_release_a_hold(cls, val: LegalHoldsReleaseAHoldType) -> EventType: ...

    @classmethod
    def legal_holds_remove_members(cls, val: LegalHoldsRemoveMembersType) -> EventType: ...

    @classmethod
    def legal_holds_report_a_hold(cls, val: LegalHoldsReportAHoldType) -> EventType: ...

    @classmethod
    def device_change_ip_desktop(cls, val: DeviceChangeIpDesktopType) -> EventType: ...

    @classmethod
    def device_change_ip_mobile(cls, val: DeviceChangeIpMobileType) -> EventType: ...

    @classmethod
    def device_change_ip_web(cls, val: DeviceChangeIpWebType) -> EventType: ...

    @classmethod
    def device_delete_on_unlink_fail(cls, val: DeviceDeleteOnUnlinkFailType) -> EventType: ...

    @classmethod
    def device_delete_on_unlink_success(cls, val: DeviceDeleteOnUnlinkSuccessType) -> EventType: ...

    @classmethod
    def device_link_fail(cls, val: DeviceLinkFailType) -> EventType: ...

    @classmethod
    def device_link_success(cls, val: DeviceLinkSuccessType) -> EventType: ...

    @classmethod
    def device_management_disabled(cls, val: DeviceManagementDisabledType) -> EventType: ...

    @classmethod
    def device_management_enabled(cls, val: DeviceManagementEnabledType) -> EventType: ...

    @classmethod
    def device_sync_backup_status_changed(cls, val: DeviceSyncBackupStatusChangedType) -> EventType: ...

    @classmethod
    def device_unlink(cls, val: DeviceUnlinkType) -> EventType: ...

    @classmethod
    def dropbox_passwords_exported(cls, val: DropboxPasswordsExportedType) -> EventType: ...

    @classmethod
    def dropbox_passwords_new_device_enrolled(cls, val: DropboxPasswordsNewDeviceEnrolledType) -> EventType: ...

    @classmethod
    def emm_refresh_auth_token(cls, val: EmmRefreshAuthTokenType) -> EventType: ...

    @classmethod
    def account_capture_change_availability(cls, val: AccountCaptureChangeAvailabilityType) -> EventType: ...

    @classmethod
    def account_capture_migrate_account(cls, val: AccountCaptureMigrateAccountType) -> EventType: ...

    @classmethod
    def account_capture_notification_emails_sent(cls, val: AccountCaptureNotificationEmailsSentType) -> EventType: ...

    @classmethod
    def account_capture_relinquish_account(cls, val: AccountCaptureRelinquishAccountType) -> EventType: ...

    @classmethod
    def disabled_domain_invites(cls, val: DisabledDomainInvitesType) -> EventType: ...

    @classmethod
    def domain_invites_approve_request_to_join_team(cls, val: DomainInvitesApproveRequestToJoinTeamType) -> EventType: ...

    @classmethod
    def domain_invites_decline_request_to_join_team(cls, val: DomainInvitesDeclineRequestToJoinTeamType) -> EventType: ...

    @classmethod
    def domain_invites_email_existing_users(cls, val: DomainInvitesEmailExistingUsersType) -> EventType: ...

    @classmethod
    def domain_invites_request_to_join_team(cls, val: DomainInvitesRequestToJoinTeamType) -> EventType: ...

    @classmethod
    def domain_invites_set_invite_new_user_pref_to_no(cls, val: DomainInvitesSetInviteNewUserPrefToNoType) -> EventType: ...

    @classmethod
    def domain_invites_set_invite_new_user_pref_to_yes(cls, val: DomainInvitesSetInviteNewUserPrefToYesType) -> EventType: ...

    @classmethod
    def domain_verification_add_domain_fail(cls, val: DomainVerificationAddDomainFailType) -> EventType: ...

    @classmethod
    def domain_verification_add_domain_success(cls, val: DomainVerificationAddDomainSuccessType) -> EventType: ...

    @classmethod
    def domain_verification_remove_domain(cls, val: DomainVerificationRemoveDomainType) -> EventType: ...

    @classmethod
    def enabled_domain_invites(cls, val: EnabledDomainInvitesType) -> EventType: ...

    @classmethod
    def apply_naming_convention(cls, val: ApplyNamingConventionType) -> EventType: ...

    @classmethod
    def create_folder(cls, val: CreateFolderType) -> EventType: ...

    @classmethod
    def file_add(cls, val: FileAddType) -> EventType: ...

    @classmethod
    def file_copy(cls, val: FileCopyType) -> EventType: ...

    @classmethod
    def file_delete(cls, val: FileDeleteType) -> EventType: ...

    @classmethod
    def file_download(cls, val: FileDownloadType) -> EventType: ...

    @classmethod
    def file_edit(cls, val: FileEditType) -> EventType: ...

    @classmethod
    def file_get_copy_reference(cls, val: FileGetCopyReferenceType) -> EventType: ...

    @classmethod
    def file_locking_lock_status_changed(cls, val: FileLockingLockStatusChangedType) -> EventType: ...

    @classmethod
    def file_move(cls, val: FileMoveType) -> EventType: ...

    @classmethod
    def file_permanently_delete(cls, val: FilePermanentlyDeleteType) -> EventType: ...

    @classmethod
    def file_preview(cls, val: FilePreviewType) -> EventType: ...

    @classmethod
    def file_rename(cls, val: FileRenameType) -> EventType: ...

    @classmethod
    def file_restore(cls, val: FileRestoreType) -> EventType: ...

    @classmethod
    def file_revert(cls, val: FileRevertType) -> EventType: ...

    @classmethod
    def file_rollback_changes(cls, val: FileRollbackChangesType) -> EventType: ...

    @classmethod
    def file_save_copy_reference(cls, val: FileSaveCopyReferenceType) -> EventType: ...

    @classmethod
    def folder_overview_description_changed(cls, val: FolderOverviewDescriptionChangedType) -> EventType: ...

    @classmethod
    def folder_overview_item_pinned(cls, val: FolderOverviewItemPinnedType) -> EventType: ...

    @classmethod
    def folder_overview_item_unpinned(cls, val: FolderOverviewItemUnpinnedType) -> EventType: ...

    @classmethod
    def object_label_added(cls, val: ObjectLabelAddedType) -> EventType: ...

    @classmethod
    def object_label_removed(cls, val: ObjectLabelRemovedType) -> EventType: ...

    @classmethod
    def object_label_updated_value(cls, val: ObjectLabelUpdatedValueType) -> EventType: ...

    @classmethod
    def organize_folder_with_tidy(cls, val: OrganizeFolderWithTidyType) -> EventType: ...

    @classmethod
    def rewind_folder(cls, val: RewindFolderType) -> EventType: ...

    @classmethod
    def undo_naming_convention(cls, val: UndoNamingConventionType) -> EventType: ...

    @classmethod
    def undo_organize_folder_with_tidy(cls, val: UndoOrganizeFolderWithTidyType) -> EventType: ...

    @classmethod
    def user_tags_added(cls, val: UserTagsAddedType) -> EventType: ...

    @classmethod
    def user_tags_removed(cls, val: UserTagsRemovedType) -> EventType: ...

    @classmethod
    def email_ingest_receive_file(cls, val: EmailIngestReceiveFileType) -> EventType: ...

    @classmethod
    def file_request_change(cls, val: FileRequestChangeType) -> EventType: ...

    @classmethod
    def file_request_close(cls, val: FileRequestCloseType) -> EventType: ...

    @classmethod
    def file_request_create(cls, val: FileRequestCreateType) -> EventType: ...

    @classmethod
    def file_request_delete(cls, val: FileRequestDeleteType) -> EventType: ...

    @classmethod
    def file_request_receive_file(cls, val: FileRequestReceiveFileType) -> EventType: ...

    @classmethod
    def group_add_external_id(cls, val: GroupAddExternalIdType) -> EventType: ...

    @classmethod
    def group_add_member(cls, val: GroupAddMemberType) -> EventType: ...

    @classmethod
    def group_change_external_id(cls, val: GroupChangeExternalIdType) -> EventType: ...

    @classmethod
    def group_change_management_type(cls, val: GroupChangeManagementTypeType) -> EventType: ...

    @classmethod
    def group_change_member_role(cls, val: GroupChangeMemberRoleType) -> EventType: ...

    @classmethod
    def group_create(cls, val: GroupCreateType) -> EventType: ...

    @classmethod
    def group_delete(cls, val: GroupDeleteType) -> EventType: ...

    @classmethod
    def group_description_updated(cls, val: GroupDescriptionUpdatedType) -> EventType: ...

    @classmethod
    def group_join_policy_updated(cls, val: GroupJoinPolicyUpdatedType) -> EventType: ...

    @classmethod
    def group_moved(cls, val: GroupMovedType) -> EventType: ...

    @classmethod
    def group_remove_external_id(cls, val: GroupRemoveExternalIdType) -> EventType: ...

    @classmethod
    def group_remove_member(cls, val: GroupRemoveMemberType) -> EventType: ...

    @classmethod
    def group_rename(cls, val: GroupRenameType) -> EventType: ...

    @classmethod
    def account_lock_or_unlocked(cls, val: AccountLockOrUnlockedType) -> EventType: ...

    @classmethod
    def emm_error(cls, val: EmmErrorType) -> EventType: ...

    @classmethod
    def guest_admin_signed_in_via_trusted_teams(cls, val: GuestAdminSignedInViaTrustedTeamsType) -> EventType: ...

    @classmethod
    def guest_admin_signed_out_via_trusted_teams(cls, val: GuestAdminSignedOutViaTrustedTeamsType) -> EventType: ...

    @classmethod
    def login_fail(cls, val: LoginFailType) -> EventType: ...

    @classmethod
    def login_success(cls, val: LoginSuccessType) -> EventType: ...

    @classmethod
    def logout(cls, val: LogoutType) -> EventType: ...

    @classmethod
    def reseller_support_session_end(cls, val: ResellerSupportSessionEndType) -> EventType: ...

    @classmethod
    def reseller_support_session_start(cls, val: ResellerSupportSessionStartType) -> EventType: ...

    @classmethod
    def sign_in_as_session_end(cls, val: SignInAsSessionEndType) -> EventType: ...

    @classmethod
    def sign_in_as_session_start(cls, val: SignInAsSessionStartType) -> EventType: ...

    @classmethod
    def sso_error(cls, val: SsoErrorType) -> EventType: ...

    @classmethod
    def create_team_invite_link(cls, val: CreateTeamInviteLinkType) -> EventType: ...

    @classmethod
    def delete_team_invite_link(cls, val: DeleteTeamInviteLinkType) -> EventType: ...

    @classmethod
    def member_add_external_id(cls, val: MemberAddExternalIdType) -> EventType: ...

    @classmethod
    def member_add_name(cls, val: MemberAddNameType) -> EventType: ...

    @classmethod
    def member_change_admin_role(cls, val: MemberChangeAdminRoleType) -> EventType: ...

    @classmethod
    def member_change_email(cls, val: MemberChangeEmailType) -> EventType: ...

    @classmethod
    def member_change_external_id(cls, val: MemberChangeExternalIdType) -> EventType: ...

    @classmethod
    def member_change_membership_type(cls, val: MemberChangeMembershipTypeType) -> EventType: ...

    @classmethod
    def member_change_name(cls, val: MemberChangeNameType) -> EventType: ...

    @classmethod
    def member_change_reseller_role(cls, val: MemberChangeResellerRoleType) -> EventType: ...

    @classmethod
    def member_change_status(cls, val: MemberChangeStatusType) -> EventType: ...

    @classmethod
    def member_delete_manual_contacts(cls, val: MemberDeleteManualContactsType) -> EventType: ...

    @classmethod
    def member_delete_profile_photo(cls, val: MemberDeleteProfilePhotoType) -> EventType: ...

    @classmethod
    def member_permanently_delete_account_contents(cls, val: MemberPermanentlyDeleteAccountContentsType) -> EventType: ...

    @classmethod
    def member_remove_external_id(cls, val: MemberRemoveExternalIdType) -> EventType: ...

    @classmethod
    def member_set_profile_photo(cls, val: MemberSetProfilePhotoType) -> EventType: ...

    @classmethod
    def member_space_limits_add_custom_quota(cls, val: MemberSpaceLimitsAddCustomQuotaType) -> EventType: ...

    @classmethod
    def member_space_limits_change_custom_quota(cls, val: MemberSpaceLimitsChangeCustomQuotaType) -> EventType: ...

    @classmethod
    def member_space_limits_change_status(cls, val: MemberSpaceLimitsChangeStatusType) -> EventType: ...

    @classmethod
    def member_space_limits_remove_custom_quota(cls, val: MemberSpaceLimitsRemoveCustomQuotaType) -> EventType: ...

    @classmethod
    def member_suggest(cls, val: MemberSuggestType) -> EventType: ...

    @classmethod
    def member_transfer_account_contents(cls, val: MemberTransferAccountContentsType) -> EventType: ...

    @classmethod
    def pending_secondary_email_added(cls, val: PendingSecondaryEmailAddedType) -> EventType: ...

    @classmethod
    def secondary_email_deleted(cls, val: SecondaryEmailDeletedType) -> EventType: ...

    @classmethod
    def secondary_email_verified(cls, val: SecondaryEmailVerifiedType) -> EventType: ...

    @classmethod
    def secondary_mails_policy_changed(cls, val: SecondaryMailsPolicyChangedType) -> EventType: ...

    @classmethod
    def binder_add_page(cls, val: BinderAddPageType) -> EventType: ...

    @classmethod
    def binder_add_section(cls, val: BinderAddSectionType) -> EventType: ...

    @classmethod
    def binder_remove_page(cls, val: BinderRemovePageType) -> EventType: ...

    @classmethod
    def binder_remove_section(cls, val: BinderRemoveSectionType) -> EventType: ...

    @classmethod
    def binder_rename_page(cls, val: BinderRenamePageType) -> EventType: ...

    @classmethod
    def binder_rename_section(cls, val: BinderRenameSectionType) -> EventType: ...

    @classmethod
    def binder_reorder_page(cls, val: BinderReorderPageType) -> EventType: ...

    @classmethod
    def binder_reorder_section(cls, val: BinderReorderSectionType) -> EventType: ...

    @classmethod
    def paper_content_add_member(cls, val: PaperContentAddMemberType) -> EventType: ...

    @classmethod
    def paper_content_add_to_folder(cls, val: PaperContentAddToFolderType) -> EventType: ...

    @classmethod
    def paper_content_archive(cls, val: PaperContentArchiveType) -> EventType: ...

    @classmethod
    def paper_content_create(cls, val: PaperContentCreateType) -> EventType: ...

    @classmethod
    def paper_content_permanently_delete(cls, val: PaperContentPermanentlyDeleteType) -> EventType: ...

    @classmethod
    def paper_content_remove_from_folder(cls, val: PaperContentRemoveFromFolderType) -> EventType: ...

    @classmethod
    def paper_content_remove_member(cls, val: PaperContentRemoveMemberType) -> EventType: ...

    @classmethod
    def paper_content_rename(cls, val: PaperContentRenameType) -> EventType: ...

    @classmethod
    def paper_content_restore(cls, val: PaperContentRestoreType) -> EventType: ...

    @classmethod
    def paper_doc_add_comment(cls, val: PaperDocAddCommentType) -> EventType: ...

    @classmethod
    def paper_doc_change_member_role(cls, val: PaperDocChangeMemberRoleType) -> EventType: ...

    @classmethod
    def paper_doc_change_sharing_policy(cls, val: PaperDocChangeSharingPolicyType) -> EventType: ...

    @classmethod
    def paper_doc_change_subscription(cls, val: PaperDocChangeSubscriptionType) -> EventType: ...

    @classmethod
    def paper_doc_deleted(cls, val: PaperDocDeletedType) -> EventType: ...

    @classmethod
    def paper_doc_delete_comment(cls, val: PaperDocDeleteCommentType) -> EventType: ...

    @classmethod
    def paper_doc_download(cls, val: PaperDocDownloadType) -> EventType: ...

    @classmethod
    def paper_doc_edit(cls, val: PaperDocEditType) -> EventType: ...

    @classmethod
    def paper_doc_edit_comment(cls, val: PaperDocEditCommentType) -> EventType: ...

    @classmethod
    def paper_doc_followed(cls, val: PaperDocFollowedType) -> EventType: ...

    @classmethod
    def paper_doc_mention(cls, val: PaperDocMentionType) -> EventType: ...

    @classmethod
    def paper_doc_ownership_changed(cls, val: PaperDocOwnershipChangedType) -> EventType: ...

    @classmethod
    def paper_doc_request_access(cls, val: PaperDocRequestAccessType) -> EventType: ...

    @classmethod
    def paper_doc_resolve_comment(cls, val: PaperDocResolveCommentType) -> EventType: ...

    @classmethod
    def paper_doc_revert(cls, val: PaperDocRevertType) -> EventType: ...

    @classmethod
    def paper_doc_slack_share(cls, val: PaperDocSlackShareType) -> EventType: ...

    @classmethod
    def paper_doc_team_invite(cls, val: PaperDocTeamInviteType) -> EventType: ...

    @classmethod
    def paper_doc_trashed(cls, val: PaperDocTrashedType) -> EventType: ...

    @classmethod
    def paper_doc_unresolve_comment(cls, val: PaperDocUnresolveCommentType) -> EventType: ...

    @classmethod
    def paper_doc_untrashed(cls, val: PaperDocUntrashedType) -> EventType: ...

    @classmethod
    def paper_doc_view(cls, val: PaperDocViewType) -> EventType: ...

    @classmethod
    def paper_external_view_allow(cls, val: PaperExternalViewAllowType) -> EventType: ...

    @classmethod
    def paper_external_view_default_team(cls, val: PaperExternalViewDefaultTeamType) -> EventType: ...

    @classmethod
    def paper_external_view_forbid(cls, val: PaperExternalViewForbidType) -> EventType: ...

    @classmethod
    def paper_folder_change_subscription(cls, val: PaperFolderChangeSubscriptionType) -> EventType: ...

    @classmethod
    def paper_folder_deleted(cls, val: PaperFolderDeletedType) -> EventType: ...

    @classmethod
    def paper_folder_followed(cls, val: PaperFolderFollowedType) -> EventType: ...

    @classmethod
    def paper_folder_team_invite(cls, val: PaperFolderTeamInviteType) -> EventType: ...

    @classmethod
    def paper_published_link_change_permission(cls, val: PaperPublishedLinkChangePermissionType) -> EventType: ...

    @classmethod
    def paper_published_link_create(cls, val: PaperPublishedLinkCreateType) -> EventType: ...

    @classmethod
    def paper_published_link_disabled(cls, val: PaperPublishedLinkDisabledType) -> EventType: ...

    @classmethod
    def paper_published_link_view(cls, val: PaperPublishedLinkViewType) -> EventType: ...

    @classmethod
    def password_change(cls, val: PasswordChangeType) -> EventType: ...

    @classmethod
    def password_reset(cls, val: PasswordResetType) -> EventType: ...

    @classmethod
    def password_reset_all(cls, val: PasswordResetAllType) -> EventType: ...

    @classmethod
    def classification_create_report(cls, val: ClassificationCreateReportType) -> EventType: ...

    @classmethod
    def classification_create_report_fail(cls, val: ClassificationCreateReportFailType) -> EventType: ...

    @classmethod
    def emm_create_exceptions_report(cls, val: EmmCreateExceptionsReportType) -> EventType: ...

    @classmethod
    def emm_create_usage_report(cls, val: EmmCreateUsageReportType) -> EventType: ...

    @classmethod
    def export_members_report(cls, val: ExportMembersReportType) -> EventType: ...

    @classmethod
    def export_members_report_fail(cls, val: ExportMembersReportFailType) -> EventType: ...

    @classmethod
    def external_sharing_create_report(cls, val: ExternalSharingCreateReportType) -> EventType: ...

    @classmethod
    def external_sharing_report_failed(cls, val: ExternalSharingReportFailedType) -> EventType: ...

    @classmethod
    def no_expiration_link_gen_create_report(cls, val: NoExpirationLinkGenCreateReportType) -> EventType: ...

    @classmethod
    def no_expiration_link_gen_report_failed(cls, val: NoExpirationLinkGenReportFailedType) -> EventType: ...

    @classmethod
    def no_password_link_gen_create_report(cls, val: NoPasswordLinkGenCreateReportType) -> EventType: ...

    @classmethod
    def no_password_link_gen_report_failed(cls, val: NoPasswordLinkGenReportFailedType) -> EventType: ...

    @classmethod
    def no_password_link_view_create_report(cls, val: NoPasswordLinkViewCreateReportType) -> EventType: ...

    @classmethod
    def no_password_link_view_report_failed(cls, val: NoPasswordLinkViewReportFailedType) -> EventType: ...

    @classmethod
    def outdated_link_view_create_report(cls, val: OutdatedLinkViewCreateReportType) -> EventType: ...

    @classmethod
    def outdated_link_view_report_failed(cls, val: OutdatedLinkViewReportFailedType) -> EventType: ...

    @classmethod
    def paper_admin_export_start(cls, val: PaperAdminExportStartType) -> EventType: ...

    @classmethod
    def smart_sync_create_admin_privilege_report(cls, val: SmartSyncCreateAdminPrivilegeReportType) -> EventType: ...

    @classmethod
    def team_activity_create_report(cls, val: TeamActivityCreateReportType) -> EventType: ...

    @classmethod
    def team_activity_create_report_fail(cls, val: TeamActivityCreateReportFailType) -> EventType: ...

    @classmethod
    def collection_share(cls, val: CollectionShareType) -> EventType: ...

    @classmethod
    def file_transfers_file_add(cls, val: FileTransfersFileAddType) -> EventType: ...

    @classmethod
    def file_transfers_transfer_delete(cls, val: FileTransfersTransferDeleteType) -> EventType: ...

    @classmethod
    def file_transfers_transfer_download(cls, val: FileTransfersTransferDownloadType) -> EventType: ...

    @classmethod
    def file_transfers_transfer_send(cls, val: FileTransfersTransferSendType) -> EventType: ...

    @classmethod
    def file_transfers_transfer_view(cls, val: FileTransfersTransferViewType) -> EventType: ...

    @classmethod
    def note_acl_invite_only(cls, val: NoteAclInviteOnlyType) -> EventType: ...

    @classmethod
    def note_acl_link(cls, val: NoteAclLinkType) -> EventType: ...

    @classmethod
    def note_acl_team_link(cls, val: NoteAclTeamLinkType) -> EventType: ...

    @classmethod
    def note_shared(cls, val: NoteSharedType) -> EventType: ...

    @classmethod
    def note_share_receive(cls, val: NoteShareReceiveType) -> EventType: ...

    @classmethod
    def open_note_shared(cls, val: OpenNoteSharedType) -> EventType: ...

    @classmethod
    def sf_add_group(cls, val: SfAddGroupType) -> EventType: ...

    @classmethod
    def sf_allow_non_members_to_view_shared_links(cls, val: SfAllowNonMembersToViewSharedLinksType) -> EventType: ...

    @classmethod
    def sf_external_invite_warn(cls, val: SfExternalInviteWarnType) -> EventType: ...

    @classmethod
    def sf_fb_invite(cls, val: SfFbInviteType) -> EventType: ...

    @classmethod
    def sf_fb_invite_change_role(cls, val: SfFbInviteChangeRoleType) -> EventType: ...

    @classmethod
    def sf_fb_uninvite(cls, val: SfFbUninviteType) -> EventType: ...

    @classmethod
    def sf_invite_group(cls, val: SfInviteGroupType) -> EventType: ...

    @classmethod
    def sf_team_grant_access(cls, val: SfTeamGrantAccessType) -> EventType: ...

    @classmethod
    def sf_team_invite(cls, val: SfTeamInviteType) -> EventType: ...

    @classmethod
    def sf_team_invite_change_role(cls, val: SfTeamInviteChangeRoleType) -> EventType: ...

    @classmethod
    def sf_team_join(cls, val: SfTeamJoinType) -> EventType: ...

    @classmethod
    def sf_team_join_from_oob_link(cls, val: SfTeamJoinFromOobLinkType) -> EventType: ...

    @classmethod
    def sf_team_uninvite(cls, val: SfTeamUninviteType) -> EventType: ...

    @classmethod
    def shared_content_add_invitees(cls, val: SharedContentAddInviteesType) -> EventType: ...

    @classmethod
    def shared_content_add_link_expiry(cls, val: SharedContentAddLinkExpiryType) -> EventType: ...

    @classmethod
    def shared_content_add_link_password(cls, val: SharedContentAddLinkPasswordType) -> EventType: ...

    @classmethod
    def shared_content_add_member(cls, val: SharedContentAddMemberType) -> EventType: ...

    @classmethod
    def shared_content_change_downloads_policy(cls, val: SharedContentChangeDownloadsPolicyType) -> EventType: ...

    @classmethod
    def shared_content_change_invitee_role(cls, val: SharedContentChangeInviteeRoleType) -> EventType: ...

    @classmethod
    def shared_content_change_link_audience(cls, val: SharedContentChangeLinkAudienceType) -> EventType: ...

    @classmethod
    def shared_content_change_link_expiry(cls, val: SharedContentChangeLinkExpiryType) -> EventType: ...

    @classmethod
    def shared_content_change_link_password(cls, val: SharedContentChangeLinkPasswordType) -> EventType: ...

    @classmethod
    def shared_content_change_member_role(cls, val: SharedContentChangeMemberRoleType) -> EventType: ...

    @classmethod
    def shared_content_change_viewer_info_policy(cls, val: SharedContentChangeViewerInfoPolicyType) -> EventType: ...

    @classmethod
    def shared_content_claim_invitation(cls, val: SharedContentClaimInvitationType) -> EventType: ...

    @classmethod
    def shared_content_copy(cls, val: SharedContentCopyType) -> EventType: ...

    @classmethod
    def shared_content_download(cls, val: SharedContentDownloadType) -> EventType: ...

    @classmethod
    def shared_content_relinquish_membership(cls, val: SharedContentRelinquishMembershipType) -> EventType: ...

    @classmethod
    def shared_content_remove_invitees(cls, val: SharedContentRemoveInviteesType) -> EventType: ...

    @classmethod
    def shared_content_remove_link_expiry(cls, val: SharedContentRemoveLinkExpiryType) -> EventType: ...

    @classmethod
    def shared_content_remove_link_password(cls, val: SharedContentRemoveLinkPasswordType) -> EventType: ...

    @classmethod
    def shared_content_remove_member(cls, val: SharedContentRemoveMemberType) -> EventType: ...

    @classmethod
    def shared_content_request_access(cls, val: SharedContentRequestAccessType) -> EventType: ...

    @classmethod
    def shared_content_restore_invitees(cls, val: SharedContentRestoreInviteesType) -> EventType: ...

    @classmethod
    def shared_content_restore_member(cls, val: SharedContentRestoreMemberType) -> EventType: ...

    @classmethod
    def shared_content_unshare(cls, val: SharedContentUnshareType) -> EventType: ...

    @classmethod
    def shared_content_view(cls, val: SharedContentViewType) -> EventType: ...

    @classmethod
    def shared_folder_change_link_policy(cls, val: SharedFolderChangeLinkPolicyType) -> EventType: ...

    @classmethod
    def shared_folder_change_members_inheritance_policy(cls, val: SharedFolderChangeMembersInheritancePolicyType) -> EventType: ...

    @classmethod
    def shared_folder_change_members_management_policy(cls, val: SharedFolderChangeMembersManagementPolicyType) -> EventType: ...

    @classmethod
    def shared_folder_change_members_policy(cls, val: SharedFolderChangeMembersPolicyType) -> EventType: ...

    @classmethod
    def shared_folder_create(cls, val: SharedFolderCreateType) -> EventType: ...

    @classmethod
    def shared_folder_decline_invitation(cls, val: SharedFolderDeclineInvitationType) -> EventType: ...

    @classmethod
    def shared_folder_mount(cls, val: SharedFolderMountType) -> EventType: ...

    @classmethod
    def shared_folder_nest(cls, val: SharedFolderNestType) -> EventType: ...

    @classmethod
    def shared_folder_transfer_ownership(cls, val: SharedFolderTransferOwnershipType) -> EventType: ...

    @classmethod
    def shared_folder_unmount(cls, val: SharedFolderUnmountType) -> EventType: ...

    @classmethod
    def shared_link_add_expiry(cls, val: SharedLinkAddExpiryType) -> EventType: ...

    @classmethod
    def shared_link_change_expiry(cls, val: SharedLinkChangeExpiryType) -> EventType: ...

    @classmethod
    def shared_link_change_visibility(cls, val: SharedLinkChangeVisibilityType) -> EventType: ...

    @classmethod
    def shared_link_copy(cls, val: SharedLinkCopyType) -> EventType: ...

    @classmethod
    def shared_link_create(cls, val: SharedLinkCreateType) -> EventType: ...

    @classmethod
    def shared_link_disable(cls, val: SharedLinkDisableType) -> EventType: ...

    @classmethod
    def shared_link_download(cls, val: SharedLinkDownloadType) -> EventType: ...

    @classmethod
    def shared_link_remove_expiry(cls, val: SharedLinkRemoveExpiryType) -> EventType: ...

    @classmethod
    def shared_link_settings_add_expiration(cls, val: SharedLinkSettingsAddExpirationType) -> EventType: ...

    @classmethod
    def shared_link_settings_add_password(cls, val: SharedLinkSettingsAddPasswordType) -> EventType: ...

    @classmethod
    def shared_link_settings_allow_download_disabled(cls, val: SharedLinkSettingsAllowDownloadDisabledType) -> EventType: ...

    @classmethod
    def shared_link_settings_allow_download_enabled(cls, val: SharedLinkSettingsAllowDownloadEnabledType) -> EventType: ...

    @classmethod
    def shared_link_settings_change_audience(cls, val: SharedLinkSettingsChangeAudienceType) -> EventType: ...

    @classmethod
    def shared_link_settings_change_expiration(cls, val: SharedLinkSettingsChangeExpirationType) -> EventType: ...

    @classmethod
    def shared_link_settings_change_password(cls, val: SharedLinkSettingsChangePasswordType) -> EventType: ...

    @classmethod
    def shared_link_settings_remove_expiration(cls, val: SharedLinkSettingsRemoveExpirationType) -> EventType: ...

    @classmethod
    def shared_link_settings_remove_password(cls, val: SharedLinkSettingsRemovePasswordType) -> EventType: ...

    @classmethod
    def shared_link_share(cls, val: SharedLinkShareType) -> EventType: ...

    @classmethod
    def shared_link_view(cls, val: SharedLinkViewType) -> EventType: ...

    @classmethod
    def shared_note_opened(cls, val: SharedNoteOpenedType) -> EventType: ...

    @classmethod
    def shmodel_disable_downloads(cls, val: ShmodelDisableDownloadsType) -> EventType: ...

    @classmethod
    def shmodel_enable_downloads(cls, val: ShmodelEnableDownloadsType) -> EventType: ...

    @classmethod
    def shmodel_group_share(cls, val: ShmodelGroupShareType) -> EventType: ...

    @classmethod
    def showcase_access_granted(cls, val: ShowcaseAccessGrantedType) -> EventType: ...

    @classmethod
    def showcase_add_member(cls, val: ShowcaseAddMemberType) -> EventType: ...

    @classmethod
    def showcase_archived(cls, val: ShowcaseArchivedType) -> EventType: ...

    @classmethod
    def showcase_created(cls, val: ShowcaseCreatedType) -> EventType: ...

    @classmethod
    def showcase_delete_comment(cls, val: ShowcaseDeleteCommentType) -> EventType: ...

    @classmethod
    def showcase_edited(cls, val: ShowcaseEditedType) -> EventType: ...

    @classmethod
    def showcase_edit_comment(cls, val: ShowcaseEditCommentType) -> EventType: ...

    @classmethod
    def showcase_file_added(cls, val: ShowcaseFileAddedType) -> EventType: ...

    @classmethod
    def showcase_file_download(cls, val: ShowcaseFileDownloadType) -> EventType: ...

    @classmethod
    def showcase_file_removed(cls, val: ShowcaseFileRemovedType) -> EventType: ...

    @classmethod
    def showcase_file_view(cls, val: ShowcaseFileViewType) -> EventType: ...

    @classmethod
    def showcase_permanently_deleted(cls, val: ShowcasePermanentlyDeletedType) -> EventType: ...

    @classmethod
    def showcase_post_comment(cls, val: ShowcasePostCommentType) -> EventType: ...

    @classmethod
    def showcase_remove_member(cls, val: ShowcaseRemoveMemberType) -> EventType: ...

    @classmethod
    def showcase_renamed(cls, val: ShowcaseRenamedType) -> EventType: ...

    @classmethod
    def showcase_request_access(cls, val: ShowcaseRequestAccessType) -> EventType: ...

    @classmethod
    def showcase_resolve_comment(cls, val: ShowcaseResolveCommentType) -> EventType: ...

    @classmethod
    def showcase_restored(cls, val: ShowcaseRestoredType) -> EventType: ...

    @classmethod
    def showcase_trashed(cls, val: ShowcaseTrashedType) -> EventType: ...

    @classmethod
    def showcase_trashed_deprecated(cls, val: ShowcaseTrashedDeprecatedType) -> EventType: ...

    @classmethod
    def showcase_unresolve_comment(cls, val: ShowcaseUnresolveCommentType) -> EventType: ...

    @classmethod
    def showcase_untrashed(cls, val: ShowcaseUntrashedType) -> EventType: ...

    @classmethod
    def showcase_untrashed_deprecated(cls, val: ShowcaseUntrashedDeprecatedType) -> EventType: ...

    @classmethod
    def showcase_view(cls, val: ShowcaseViewType) -> EventType: ...

    @classmethod
    def sso_add_cert(cls, val: SsoAddCertType) -> EventType: ...

    @classmethod
    def sso_add_login_url(cls, val: SsoAddLoginUrlType) -> EventType: ...

    @classmethod
    def sso_add_logout_url(cls, val: SsoAddLogoutUrlType) -> EventType: ...

    @classmethod
    def sso_change_cert(cls, val: SsoChangeCertType) -> EventType: ...

    @classmethod
    def sso_change_login_url(cls, val: SsoChangeLoginUrlType) -> EventType: ...

    @classmethod
    def sso_change_logout_url(cls, val: SsoChangeLogoutUrlType) -> EventType: ...

    @classmethod
    def sso_change_saml_identity_mode(cls, val: SsoChangeSamlIdentityModeType) -> EventType: ...

    @classmethod
    def sso_remove_cert(cls, val: SsoRemoveCertType) -> EventType: ...

    @classmethod
    def sso_remove_login_url(cls, val: SsoRemoveLoginUrlType) -> EventType: ...

    @classmethod
    def sso_remove_logout_url(cls, val: SsoRemoveLogoutUrlType) -> EventType: ...

    @classmethod
    def team_folder_change_status(cls, val: TeamFolderChangeStatusType) -> EventType: ...

    @classmethod
    def team_folder_create(cls, val: TeamFolderCreateType) -> EventType: ...

    @classmethod
    def team_folder_downgrade(cls, val: TeamFolderDowngradeType) -> EventType: ...

    @classmethod
    def team_folder_permanently_delete(cls, val: TeamFolderPermanentlyDeleteType) -> EventType: ...

    @classmethod
    def team_folder_rename(cls, val: TeamFolderRenameType) -> EventType: ...

    @classmethod
    def team_selective_sync_settings_changed(cls, val: TeamSelectiveSyncSettingsChangedType) -> EventType: ...

    @classmethod
    def account_capture_change_policy(cls, val: AccountCaptureChangePolicyType) -> EventType: ...

    @classmethod
    def allow_download_disabled(cls, val: AllowDownloadDisabledType) -> EventType: ...

    @classmethod
    def allow_download_enabled(cls, val: AllowDownloadEnabledType) -> EventType: ...

    @classmethod
    def app_permissions_changed(cls, val: AppPermissionsChangedType) -> EventType: ...

    @classmethod
    def camera_uploads_policy_changed(cls, val: CameraUploadsPolicyChangedType) -> EventType: ...

    @classmethod
    def capture_transcript_policy_changed(cls, val: CaptureTranscriptPolicyChangedType) -> EventType: ...

    @classmethod
    def classification_change_policy(cls, val: ClassificationChangePolicyType) -> EventType: ...

    @classmethod
    def computer_backup_policy_changed(cls, val: ComputerBackupPolicyChangedType) -> EventType: ...

    @classmethod
    def content_administration_policy_changed(cls, val: ContentAdministrationPolicyChangedType) -> EventType: ...

    @classmethod
    def data_placement_restriction_change_policy(cls, val: DataPlacementRestrictionChangePolicyType) -> EventType: ...

    @classmethod
    def data_placement_restriction_satisfy_policy(cls, val: DataPlacementRestrictionSatisfyPolicyType) -> EventType: ...

    @classmethod
    def device_approvals_add_exception(cls, val: DeviceApprovalsAddExceptionType) -> EventType: ...

    @classmethod
    def device_approvals_change_desktop_policy(cls, val: DeviceApprovalsChangeDesktopPolicyType) -> EventType: ...

    @classmethod
    def device_approvals_change_mobile_policy(cls, val: DeviceApprovalsChangeMobilePolicyType) -> EventType: ...

    @classmethod
    def device_approvals_change_overage_action(cls, val: DeviceApprovalsChangeOverageActionType) -> EventType: ...

    @classmethod
    def device_approvals_change_unlink_action(cls, val: DeviceApprovalsChangeUnlinkActionType) -> EventType: ...

    @classmethod
    def device_approvals_remove_exception(cls, val: DeviceApprovalsRemoveExceptionType) -> EventType: ...

    @classmethod
    def directory_restrictions_add_members(cls, val: DirectoryRestrictionsAddMembersType) -> EventType: ...

    @classmethod
    def directory_restrictions_remove_members(cls, val: DirectoryRestrictionsRemoveMembersType) -> EventType: ...

    @classmethod
    def email_ingest_policy_changed(cls, val: EmailIngestPolicyChangedType) -> EventType: ...

    @classmethod
    def emm_add_exception(cls, val: EmmAddExceptionType) -> EventType: ...

    @classmethod
    def emm_change_policy(cls, val: EmmChangePolicyType) -> EventType: ...

    @classmethod
    def emm_remove_exception(cls, val: EmmRemoveExceptionType) -> EventType: ...

    @classmethod
    def extended_version_history_change_policy(cls, val: ExtendedVersionHistoryChangePolicyType) -> EventType: ...

    @classmethod
    def external_drive_backup_policy_changed(cls, val: ExternalDriveBackupPolicyChangedType) -> EventType: ...

    @classmethod
    def file_comments_change_policy(cls, val: FileCommentsChangePolicyType) -> EventType: ...

    @classmethod
    def file_locking_policy_changed(cls, val: FileLockingPolicyChangedType) -> EventType: ...

    @classmethod
    def file_requests_change_policy(cls, val: FileRequestsChangePolicyType) -> EventType: ...

    @classmethod
    def file_requests_emails_enabled(cls, val: FileRequestsEmailsEnabledType) -> EventType: ...

    @classmethod
    def file_requests_emails_restricted_to_team_only(cls, val: FileRequestsEmailsRestrictedToTeamOnlyType) -> EventType: ...

    @classmethod
    def file_transfers_policy_changed(cls, val: FileTransfersPolicyChangedType) -> EventType: ...

    @classmethod
    def google_sso_change_policy(cls, val: GoogleSsoChangePolicyType) -> EventType: ...

    @classmethod
    def group_user_management_change_policy(cls, val: GroupUserManagementChangePolicyType) -> EventType: ...

    @classmethod
    def integration_policy_changed(cls, val: IntegrationPolicyChangedType) -> EventType: ...

    @classmethod
    def invite_acceptance_email_policy_changed(cls, val: InviteAcceptanceEmailPolicyChangedType) -> EventType: ...

    @classmethod
    def member_requests_change_policy(cls, val: MemberRequestsChangePolicyType) -> EventType: ...

    @classmethod
    def member_send_invite_policy_changed(cls, val: MemberSendInvitePolicyChangedType) -> EventType: ...

    @classmethod
    def member_space_limits_add_exception(cls, val: MemberSpaceLimitsAddExceptionType) -> EventType: ...

    @classmethod
    def member_space_limits_change_caps_type_policy(cls, val: MemberSpaceLimitsChangeCapsTypePolicyType) -> EventType: ...

    @classmethod
    def member_space_limits_change_policy(cls, val: MemberSpaceLimitsChangePolicyType) -> EventType: ...

    @classmethod
    def member_space_limits_remove_exception(cls, val: MemberSpaceLimitsRemoveExceptionType) -> EventType: ...

    @classmethod
    def member_suggestions_change_policy(cls, val: MemberSuggestionsChangePolicyType) -> EventType: ...

    @classmethod
    def microsoft_office_addin_change_policy(cls, val: MicrosoftOfficeAddinChangePolicyType) -> EventType: ...

    @classmethod
    def network_control_change_policy(cls, val: NetworkControlChangePolicyType) -> EventType: ...

    @classmethod
    def paper_change_deployment_policy(cls, val: PaperChangeDeploymentPolicyType) -> EventType: ...

    @classmethod
    def paper_change_member_link_policy(cls, val: PaperChangeMemberLinkPolicyType) -> EventType: ...

    @classmethod
    def paper_change_member_policy(cls, val: PaperChangeMemberPolicyType) -> EventType: ...

    @classmethod
    def paper_change_policy(cls, val: PaperChangePolicyType) -> EventType: ...

    @classmethod
    def paper_default_folder_policy_changed(cls, val: PaperDefaultFolderPolicyChangedType) -> EventType: ...

    @classmethod
    def paper_desktop_policy_changed(cls, val: PaperDesktopPolicyChangedType) -> EventType: ...

    @classmethod
    def paper_enabled_users_group_addition(cls, val: PaperEnabledUsersGroupAdditionType) -> EventType: ...

    @classmethod
    def paper_enabled_users_group_removal(cls, val: PaperEnabledUsersGroupRemovalType) -> EventType: ...

    @classmethod
    def password_strength_requirements_change_policy(cls, val: PasswordStrengthRequirementsChangePolicyType) -> EventType: ...

    @classmethod
    def permanent_delete_change_policy(cls, val: PermanentDeleteChangePolicyType) -> EventType: ...

    @classmethod
    def reseller_support_change_policy(cls, val: ResellerSupportChangePolicyType) -> EventType: ...

    @classmethod
    def rewind_policy_changed(cls, val: RewindPolicyChangedType) -> EventType: ...

    @classmethod
    def send_for_signature_policy_changed(cls, val: SendForSignaturePolicyChangedType) -> EventType: ...

    @classmethod
    def sharing_change_folder_join_policy(cls, val: SharingChangeFolderJoinPolicyType) -> EventType: ...

    @classmethod
    def sharing_change_link_allow_change_expiration_policy(cls, val: SharingChangeLinkAllowChangeExpirationPolicyType) -> EventType: ...

    @classmethod
    def sharing_change_link_default_expiration_policy(cls, val: SharingChangeLinkDefaultExpirationPolicyType) -> EventType: ...

    @classmethod
    def sharing_change_link_enforce_password_policy(cls, val: SharingChangeLinkEnforcePasswordPolicyType) -> EventType: ...

    @classmethod
    def sharing_change_link_policy(cls, val: SharingChangeLinkPolicyType) -> EventType: ...

    @classmethod
    def sharing_change_member_policy(cls, val: SharingChangeMemberPolicyType) -> EventType: ...

    @classmethod
    def showcase_change_download_policy(cls, val: ShowcaseChangeDownloadPolicyType) -> EventType: ...

    @classmethod
    def showcase_change_enabled_policy(cls, val: ShowcaseChangeEnabledPolicyType) -> EventType: ...

    @classmethod
    def showcase_change_external_sharing_policy(cls, val: ShowcaseChangeExternalSharingPolicyType) -> EventType: ...

    @classmethod
    def smarter_smart_sync_policy_changed(cls, val: SmarterSmartSyncPolicyChangedType) -> EventType: ...

    @classmethod
    def smart_sync_change_policy(cls, val: SmartSyncChangePolicyType) -> EventType: ...

    @classmethod
    def smart_sync_not_opt_out(cls, val: SmartSyncNotOptOutType) -> EventType: ...

    @classmethod
    def smart_sync_opt_out(cls, val: SmartSyncOptOutType) -> EventType: ...

    @classmethod
    def sso_change_policy(cls, val: SsoChangePolicyType) -> EventType: ...

    @classmethod
    def team_branding_policy_changed(cls, val: TeamBrandingPolicyChangedType) -> EventType: ...

    @classmethod
    def team_extensions_policy_changed(cls, val: TeamExtensionsPolicyChangedType) -> EventType: ...

    @classmethod
    def team_selective_sync_policy_changed(cls, val: TeamSelectiveSyncPolicyChangedType) -> EventType: ...

    @classmethod
    def team_sharing_whitelist_subjects_changed(cls, val: TeamSharingWhitelistSubjectsChangedType) -> EventType: ...

    @classmethod
    def tfa_add_exception(cls, val: TfaAddExceptionType) -> EventType: ...

    @classmethod
    def tfa_change_policy(cls, val: TfaChangePolicyType) -> EventType: ...

    @classmethod
    def tfa_remove_exception(cls, val: TfaRemoveExceptionType) -> EventType: ...

    @classmethod
    def two_account_change_policy(cls, val: TwoAccountChangePolicyType) -> EventType: ...

    @classmethod
    def viewer_info_policy_changed(cls, val: ViewerInfoPolicyChangedType) -> EventType: ...

    @classmethod
    def watermarking_policy_changed(cls, val: WatermarkingPolicyChangedType) -> EventType: ...

    @classmethod
    def web_sessions_change_active_session_limit(cls, val: WebSessionsChangeActiveSessionLimitType) -> EventType: ...

    @classmethod
    def web_sessions_change_fixed_length_policy(cls, val: WebSessionsChangeFixedLengthPolicyType) -> EventType: ...

    @classmethod
    def web_sessions_change_idle_length_policy(cls, val: WebSessionsChangeIdleLengthPolicyType) -> EventType: ...

    @classmethod
    def data_residency_migration_request_successful(cls, val: DataResidencyMigrationRequestSuccessfulType) -> EventType: ...

    @classmethod
    def data_residency_migration_request_unsuccessful(cls, val: DataResidencyMigrationRequestUnsuccessfulType) -> EventType: ...

    @classmethod
    def team_merge_from(cls, val: TeamMergeFromType) -> EventType: ...

    @classmethod
    def team_merge_to(cls, val: TeamMergeToType) -> EventType: ...

    @classmethod
    def team_profile_add_background(cls, val: TeamProfileAddBackgroundType) -> EventType: ...

    @classmethod
    def team_profile_add_logo(cls, val: TeamProfileAddLogoType) -> EventType: ...

    @classmethod
    def team_profile_change_background(cls, val: TeamProfileChangeBackgroundType) -> EventType: ...

    @classmethod
    def team_profile_change_default_language(cls, val: TeamProfileChangeDefaultLanguageType) -> EventType: ...

    @classmethod
    def team_profile_change_logo(cls, val: TeamProfileChangeLogoType) -> EventType: ...

    @classmethod
    def team_profile_change_name(cls, val: TeamProfileChangeNameType) -> EventType: ...

    @classmethod
    def team_profile_remove_background(cls, val: TeamProfileRemoveBackgroundType) -> EventType: ...

    @classmethod
    def team_profile_remove_logo(cls, val: TeamProfileRemoveLogoType) -> EventType: ...

    @classmethod
    def tfa_add_backup_phone(cls, val: TfaAddBackupPhoneType) -> EventType: ...

    @classmethod
    def tfa_add_security_key(cls, val: TfaAddSecurityKeyType) -> EventType: ...

    @classmethod
    def tfa_change_backup_phone(cls, val: TfaChangeBackupPhoneType) -> EventType: ...

    @classmethod
    def tfa_change_status(cls, val: TfaChangeStatusType) -> EventType: ...

    @classmethod
    def tfa_remove_backup_phone(cls, val: TfaRemoveBackupPhoneType) -> EventType: ...

    @classmethod
    def tfa_remove_security_key(cls, val: TfaRemoveSecurityKeyType) -> EventType: ...

    @classmethod
    def tfa_reset(cls, val: TfaResetType) -> EventType: ...

    @classmethod
    def changed_enterprise_admin_role(cls, val: ChangedEnterpriseAdminRoleType) -> EventType: ...

    @classmethod
    def changed_enterprise_connected_team_status(cls, val: ChangedEnterpriseConnectedTeamStatusType) -> EventType: ...

    @classmethod
    def ended_enterprise_admin_session(cls, val: EndedEnterpriseAdminSessionType) -> EventType: ...

    @classmethod
    def ended_enterprise_admin_session_deprecated(cls, val: EndedEnterpriseAdminSessionDeprecatedType) -> EventType: ...

    @classmethod
    def enterprise_settings_locking(cls, val: EnterpriseSettingsLockingType) -> EventType: ...

    @classmethod
    def guest_admin_change_status(cls, val: GuestAdminChangeStatusType) -> EventType: ...

    @classmethod
    def started_enterprise_admin_session(cls, val: StartedEnterpriseAdminSessionType) -> EventType: ...

    @classmethod
    def team_merge_request_accepted(cls, val: TeamMergeRequestAcceptedType) -> EventType: ...

    @classmethod
    def team_merge_request_accepted_shown_to_primary_team(cls, val: TeamMergeRequestAcceptedShownToPrimaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_accepted_shown_to_secondary_team(cls, val: TeamMergeRequestAcceptedShownToSecondaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_auto_canceled(cls, val: TeamMergeRequestAutoCanceledType) -> EventType: ...

    @classmethod
    def team_merge_request_canceled(cls, val: TeamMergeRequestCanceledType) -> EventType: ...

    @classmethod
    def team_merge_request_canceled_shown_to_primary_team(cls, val: TeamMergeRequestCanceledShownToPrimaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_canceled_shown_to_secondary_team(cls, val: TeamMergeRequestCanceledShownToSecondaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_expired(cls, val: TeamMergeRequestExpiredType) -> EventType: ...

    @classmethod
    def team_merge_request_expired_shown_to_primary_team(cls, val: TeamMergeRequestExpiredShownToPrimaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_expired_shown_to_secondary_team(cls, val: TeamMergeRequestExpiredShownToSecondaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_rejected_shown_to_primary_team(cls, val: TeamMergeRequestRejectedShownToPrimaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_rejected_shown_to_secondary_team(cls, val: TeamMergeRequestRejectedShownToSecondaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_reminder(cls, val: TeamMergeRequestReminderType) -> EventType: ...

    @classmethod
    def team_merge_request_reminder_shown_to_primary_team(cls, val: TeamMergeRequestReminderShownToPrimaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_reminder_shown_to_secondary_team(cls, val: TeamMergeRequestReminderShownToSecondaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_revoked(cls, val: TeamMergeRequestRevokedType) -> EventType: ...

    @classmethod
    def team_merge_request_sent_shown_to_primary_team(cls, val: TeamMergeRequestSentShownToPrimaryTeamType) -> EventType: ...

    @classmethod
    def team_merge_request_sent_shown_to_secondary_team(cls, val: TeamMergeRequestSentShownToSecondaryTeamType) -> EventType: ...

    def get_admin_alerting_alert_state_changed(self) -> AdminAlertingAlertStateChangedType: ...

    def get_admin_alerting_changed_alert_config(self) -> AdminAlertingChangedAlertConfigType: ...

    def get_admin_alerting_triggered_alert(self) -> AdminAlertingTriggeredAlertType: ...

    def get_app_blocked_by_permissions(self) -> AppBlockedByPermissionsType: ...

    def get_app_link_team(self) -> AppLinkTeamType: ...

    def get_app_link_user(self) -> AppLinkUserType: ...

    def get_app_unlink_team(self) -> AppUnlinkTeamType: ...

    def get_app_unlink_user(self) -> AppUnlinkUserType: ...

    def get_integration_connected(self) -> IntegrationConnectedType: ...

    def get_integration_disconnected(self) -> IntegrationDisconnectedType: ...

    def get_file_add_comment(self) -> FileAddCommentType: ...

    def get_file_change_comment_subscription(self) -> FileChangeCommentSubscriptionType: ...

    def get_file_delete_comment(self) -> FileDeleteCommentType: ...

    def get_file_edit_comment(self) -> FileEditCommentType: ...

    def get_file_like_comment(self) -> FileLikeCommentType: ...

    def get_file_resolve_comment(self) -> FileResolveCommentType: ...

    def get_file_unlike_comment(self) -> FileUnlikeCommentType: ...

    def get_file_unresolve_comment(self) -> FileUnresolveCommentType: ...

    def get_governance_policy_add_folders(self) -> GovernancePolicyAddFoldersType: ...

    def get_governance_policy_add_folder_failed(self) -> GovernancePolicyAddFolderFailedType: ...

    def get_governance_policy_content_disposed(self) -> GovernancePolicyContentDisposedType: ...

    def get_governance_policy_create(self) -> GovernancePolicyCreateType: ...

    def get_governance_policy_delete(self) -> GovernancePolicyDeleteType: ...

    def get_governance_policy_edit_details(self) -> GovernancePolicyEditDetailsType: ...

    def get_governance_policy_edit_duration(self) -> GovernancePolicyEditDurationType: ...

    def get_governance_policy_export_created(self) -> GovernancePolicyExportCreatedType: ...

    def get_governance_policy_export_removed(self) -> GovernancePolicyExportRemovedType: ...

    def get_governance_policy_remove_folders(self) -> GovernancePolicyRemoveFoldersType: ...

    def get_governance_policy_report_created(self) -> GovernancePolicyReportCreatedType: ...

    def get_governance_policy_zip_part_downloaded(self) -> GovernancePolicyZipPartDownloadedType: ...

    def get_legal_holds_activate_a_hold(self) -> LegalHoldsActivateAHoldType: ...

    def get_legal_holds_add_members(self) -> LegalHoldsAddMembersType: ...

    def get_legal_holds_change_hold_details(self) -> LegalHoldsChangeHoldDetailsType: ...

    def get_legal_holds_change_hold_name(self) -> LegalHoldsChangeHoldNameType: ...

    def get_legal_holds_export_a_hold(self) -> LegalHoldsExportAHoldType: ...

    def get_legal_holds_export_cancelled(self) -> LegalHoldsExportCancelledType: ...

    def get_legal_holds_export_downloaded(self) -> LegalHoldsExportDownloadedType: ...

    def get_legal_holds_export_removed(self) -> LegalHoldsExportRemovedType: ...

    def get_legal_holds_release_a_hold(self) -> LegalHoldsReleaseAHoldType: ...

    def get_legal_holds_remove_members(self) -> LegalHoldsRemoveMembersType: ...

    def get_legal_holds_report_a_hold(self) -> LegalHoldsReportAHoldType: ...

    def get_device_change_ip_desktop(self) -> DeviceChangeIpDesktopType: ...

    def get_device_change_ip_mobile(self) -> DeviceChangeIpMobileType: ...

    def get_device_change_ip_web(self) -> DeviceChangeIpWebType: ...

    def get_device_delete_on_unlink_fail(self) -> DeviceDeleteOnUnlinkFailType: ...

    def get_device_delete_on_unlink_success(self) -> DeviceDeleteOnUnlinkSuccessType: ...

    def get_device_link_fail(self) -> DeviceLinkFailType: ...

    def get_device_link_success(self) -> DeviceLinkSuccessType: ...

    def get_device_management_disabled(self) -> DeviceManagementDisabledType: ...

    def get_device_management_enabled(self) -> DeviceManagementEnabledType: ...

    def get_device_sync_backup_status_changed(self) -> DeviceSyncBackupStatusChangedType: ...

    def get_device_unlink(self) -> DeviceUnlinkType: ...

    def get_dropbox_passwords_exported(self) -> DropboxPasswordsExportedType: ...

    def get_dropbox_passwords_new_device_enrolled(self) -> DropboxPasswordsNewDeviceEnrolledType: ...

    def get_emm_refresh_auth_token(self) -> EmmRefreshAuthTokenType: ...

    def get_account_capture_change_availability(self) -> AccountCaptureChangeAvailabilityType: ...

    def get_account_capture_migrate_account(self) -> AccountCaptureMigrateAccountType: ...

    def get_account_capture_notification_emails_sent(self) -> AccountCaptureNotificationEmailsSentType: ...

    def get_account_capture_relinquish_account(self) -> AccountCaptureRelinquishAccountType: ...

    def get_disabled_domain_invites(self) -> DisabledDomainInvitesType: ...

    def get_domain_invites_approve_request_to_join_team(self) -> DomainInvitesApproveRequestToJoinTeamType: ...

    def get_domain_invites_decline_request_to_join_team(self) -> DomainInvitesDeclineRequestToJoinTeamType: ...

    def get_domain_invites_email_existing_users(self) -> DomainInvitesEmailExistingUsersType: ...

    def get_domain_invites_request_to_join_team(self) -> DomainInvitesRequestToJoinTeamType: ...

    def get_domain_invites_set_invite_new_user_pref_to_no(self) -> DomainInvitesSetInviteNewUserPrefToNoType: ...

    def get_domain_invites_set_invite_new_user_pref_to_yes(self) -> DomainInvitesSetInviteNewUserPrefToYesType: ...

    def get_domain_verification_add_domain_fail(self) -> DomainVerificationAddDomainFailType: ...

    def get_domain_verification_add_domain_success(self) -> DomainVerificationAddDomainSuccessType: ...

    def get_domain_verification_remove_domain(self) -> DomainVerificationRemoveDomainType: ...

    def get_enabled_domain_invites(self) -> EnabledDomainInvitesType: ...

    def get_apply_naming_convention(self) -> ApplyNamingConventionType: ...

    def get_create_folder(self) -> CreateFolderType: ...

    def get_file_add(self) -> FileAddType: ...

    def get_file_copy(self) -> FileCopyType: ...

    def get_file_delete(self) -> FileDeleteType: ...

    def get_file_download(self) -> FileDownloadType: ...

    def get_file_edit(self) -> FileEditType: ...

    def get_file_get_copy_reference(self) -> FileGetCopyReferenceType: ...

    def get_file_locking_lock_status_changed(self) -> FileLockingLockStatusChangedType: ...

    def get_file_move(self) -> FileMoveType: ...

    def get_file_permanently_delete(self) -> FilePermanentlyDeleteType: ...

    def get_file_preview(self) -> FilePreviewType: ...

    def get_file_rename(self) -> FileRenameType: ...

    def get_file_restore(self) -> FileRestoreType: ...

    def get_file_revert(self) -> FileRevertType: ...

    def get_file_rollback_changes(self) -> FileRollbackChangesType: ...

    def get_file_save_copy_reference(self) -> FileSaveCopyReferenceType: ...

    def get_folder_overview_description_changed(self) -> FolderOverviewDescriptionChangedType: ...

    def get_folder_overview_item_pinned(self) -> FolderOverviewItemPinnedType: ...

    def get_folder_overview_item_unpinned(self) -> FolderOverviewItemUnpinnedType: ...

    def get_object_label_added(self) -> ObjectLabelAddedType: ...

    def get_object_label_removed(self) -> ObjectLabelRemovedType: ...

    def get_object_label_updated_value(self) -> ObjectLabelUpdatedValueType: ...

    def get_organize_folder_with_tidy(self) -> OrganizeFolderWithTidyType: ...

    def get_rewind_folder(self) -> RewindFolderType: ...

    def get_undo_naming_convention(self) -> UndoNamingConventionType: ...

    def get_undo_organize_folder_with_tidy(self) -> UndoOrganizeFolderWithTidyType: ...

    def get_user_tags_added(self) -> UserTagsAddedType: ...

    def get_user_tags_removed(self) -> UserTagsRemovedType: ...

    def get_email_ingest_receive_file(self) -> EmailIngestReceiveFileType: ...

    def get_file_request_change(self) -> FileRequestChangeType: ...

    def get_file_request_close(self) -> FileRequestCloseType: ...

    def get_file_request_create(self) -> FileRequestCreateType: ...

    def get_file_request_delete(self) -> FileRequestDeleteType: ...

    def get_file_request_receive_file(self) -> FileRequestReceiveFileType: ...

    def get_group_add_external_id(self) -> GroupAddExternalIdType: ...

    def get_group_add_member(self) -> GroupAddMemberType: ...

    def get_group_change_external_id(self) -> GroupChangeExternalIdType: ...

    def get_group_change_management_type(self) -> GroupChangeManagementTypeType: ...

    def get_group_change_member_role(self) -> GroupChangeMemberRoleType: ...

    def get_group_create(self) -> GroupCreateType: ...

    def get_group_delete(self) -> GroupDeleteType: ...

    def get_group_description_updated(self) -> GroupDescriptionUpdatedType: ...

    def get_group_join_policy_updated(self) -> GroupJoinPolicyUpdatedType: ...

    def get_group_moved(self) -> GroupMovedType: ...

    def get_group_remove_external_id(self) -> GroupRemoveExternalIdType: ...

    def get_group_remove_member(self) -> GroupRemoveMemberType: ...

    def get_group_rename(self) -> GroupRenameType: ...

    def get_account_lock_or_unlocked(self) -> AccountLockOrUnlockedType: ...

    def get_emm_error(self) -> EmmErrorType: ...

    def get_guest_admin_signed_in_via_trusted_teams(self) -> GuestAdminSignedInViaTrustedTeamsType: ...

    def get_guest_admin_signed_out_via_trusted_teams(self) -> GuestAdminSignedOutViaTrustedTeamsType: ...

    def get_login_fail(self) -> LoginFailType: ...

    def get_login_success(self) -> LoginSuccessType: ...

    def get_logout(self) -> LogoutType: ...

    def get_reseller_support_session_end(self) -> ResellerSupportSessionEndType: ...

    def get_reseller_support_session_start(self) -> ResellerSupportSessionStartType: ...

    def get_sign_in_as_session_end(self) -> SignInAsSessionEndType: ...

    def get_sign_in_as_session_start(self) -> SignInAsSessionStartType: ...

    def get_sso_error(self) -> SsoErrorType: ...

    def get_create_team_invite_link(self) -> CreateTeamInviteLinkType: ...

    def get_delete_team_invite_link(self) -> DeleteTeamInviteLinkType: ...

    def get_member_add_external_id(self) -> MemberAddExternalIdType: ...

    def get_member_add_name(self) -> MemberAddNameType: ...

    def get_member_change_admin_role(self) -> MemberChangeAdminRoleType: ...

    def get_member_change_email(self) -> MemberChangeEmailType: ...

    def get_member_change_external_id(self) -> MemberChangeExternalIdType: ...

    def get_member_change_membership_type(self) -> MemberChangeMembershipTypeType: ...

    def get_member_change_name(self) -> MemberChangeNameType: ...

    def get_member_change_reseller_role(self) -> MemberChangeResellerRoleType: ...

    def get_member_change_status(self) -> MemberChangeStatusType: ...

    def get_member_delete_manual_contacts(self) -> MemberDeleteManualContactsType: ...

    def get_member_delete_profile_photo(self) -> MemberDeleteProfilePhotoType: ...

    def get_member_permanently_delete_account_contents(self) -> MemberPermanentlyDeleteAccountContentsType: ...

    def get_member_remove_external_id(self) -> MemberRemoveExternalIdType: ...

    def get_member_set_profile_photo(self) -> MemberSetProfilePhotoType: ...

    def get_member_space_limits_add_custom_quota(self) -> MemberSpaceLimitsAddCustomQuotaType: ...

    def get_member_space_limits_change_custom_quota(self) -> MemberSpaceLimitsChangeCustomQuotaType: ...

    def get_member_space_limits_change_status(self) -> MemberSpaceLimitsChangeStatusType: ...

    def get_member_space_limits_remove_custom_quota(self) -> MemberSpaceLimitsRemoveCustomQuotaType: ...

    def get_member_suggest(self) -> MemberSuggestType: ...

    def get_member_transfer_account_contents(self) -> MemberTransferAccountContentsType: ...

    def get_pending_secondary_email_added(self) -> PendingSecondaryEmailAddedType: ...

    def get_secondary_email_deleted(self) -> SecondaryEmailDeletedType: ...

    def get_secondary_email_verified(self) -> SecondaryEmailVerifiedType: ...

    def get_secondary_mails_policy_changed(self) -> SecondaryMailsPolicyChangedType: ...

    def get_binder_add_page(self) -> BinderAddPageType: ...

    def get_binder_add_section(self) -> BinderAddSectionType: ...

    def get_binder_remove_page(self) -> BinderRemovePageType: ...

    def get_binder_remove_section(self) -> BinderRemoveSectionType: ...

    def get_binder_rename_page(self) -> BinderRenamePageType: ...

    def get_binder_rename_section(self) -> BinderRenameSectionType: ...

    def get_binder_reorder_page(self) -> BinderReorderPageType: ...

    def get_binder_reorder_section(self) -> BinderReorderSectionType: ...

    def get_paper_content_add_member(self) -> PaperContentAddMemberType: ...

    def get_paper_content_add_to_folder(self) -> PaperContentAddToFolderType: ...

    def get_paper_content_archive(self) -> PaperContentArchiveType: ...

    def get_paper_content_create(self) -> PaperContentCreateType: ...

    def get_paper_content_permanently_delete(self) -> PaperContentPermanentlyDeleteType: ...

    def get_paper_content_remove_from_folder(self) -> PaperContentRemoveFromFolderType: ...

    def get_paper_content_remove_member(self) -> PaperContentRemoveMemberType: ...

    def get_paper_content_rename(self) -> PaperContentRenameType: ...

    def get_paper_content_restore(self) -> PaperContentRestoreType: ...

    def get_paper_doc_add_comment(self) -> PaperDocAddCommentType: ...

    def get_paper_doc_change_member_role(self) -> PaperDocChangeMemberRoleType: ...

    def get_paper_doc_change_sharing_policy(self) -> PaperDocChangeSharingPolicyType: ...

    def get_paper_doc_change_subscription(self) -> PaperDocChangeSubscriptionType: ...

    def get_paper_doc_deleted(self) -> PaperDocDeletedType: ...

    def get_paper_doc_delete_comment(self) -> PaperDocDeleteCommentType: ...

    def get_paper_doc_download(self) -> PaperDocDownloadType: ...

    def get_paper_doc_edit(self) -> PaperDocEditType: ...

    def get_paper_doc_edit_comment(self) -> PaperDocEditCommentType: ...

    def get_paper_doc_followed(self) -> PaperDocFollowedType: ...

    def get_paper_doc_mention(self) -> PaperDocMentionType: ...

    def get_paper_doc_ownership_changed(self) -> PaperDocOwnershipChangedType: ...

    def get_paper_doc_request_access(self) -> PaperDocRequestAccessType: ...

    def get_paper_doc_resolve_comment(self) -> PaperDocResolveCommentType: ...

    def get_paper_doc_revert(self) -> PaperDocRevertType: ...

    def get_paper_doc_slack_share(self) -> PaperDocSlackShareType: ...

    def get_paper_doc_team_invite(self) -> PaperDocTeamInviteType: ...

    def get_paper_doc_trashed(self) -> PaperDocTrashedType: ...

    def get_paper_doc_unresolve_comment(self) -> PaperDocUnresolveCommentType: ...

    def get_paper_doc_untrashed(self) -> PaperDocUntrashedType: ...

    def get_paper_doc_view(self) -> PaperDocViewType: ...

    def get_paper_external_view_allow(self) -> PaperExternalViewAllowType: ...

    def get_paper_external_view_default_team(self) -> PaperExternalViewDefaultTeamType: ...

    def get_paper_external_view_forbid(self) -> PaperExternalViewForbidType: ...

    def get_paper_folder_change_subscription(self) -> PaperFolderChangeSubscriptionType: ...

    def get_paper_folder_deleted(self) -> PaperFolderDeletedType: ...

    def get_paper_folder_followed(self) -> PaperFolderFollowedType: ...

    def get_paper_folder_team_invite(self) -> PaperFolderTeamInviteType: ...

    def get_paper_published_link_change_permission(self) -> PaperPublishedLinkChangePermissionType: ...

    def get_paper_published_link_create(self) -> PaperPublishedLinkCreateType: ...

    def get_paper_published_link_disabled(self) -> PaperPublishedLinkDisabledType: ...

    def get_paper_published_link_view(self) -> PaperPublishedLinkViewType: ...

    def get_password_change(self) -> PasswordChangeType: ...

    def get_password_reset(self) -> PasswordResetType: ...

    def get_password_reset_all(self) -> PasswordResetAllType: ...

    def get_classification_create_report(self) -> ClassificationCreateReportType: ...

    def get_classification_create_report_fail(self) -> ClassificationCreateReportFailType: ...

    def get_emm_create_exceptions_report(self) -> EmmCreateExceptionsReportType: ...

    def get_emm_create_usage_report(self) -> EmmCreateUsageReportType: ...

    def get_export_members_report(self) -> ExportMembersReportType: ...

    def get_export_members_report_fail(self) -> ExportMembersReportFailType: ...

    def get_external_sharing_create_report(self) -> ExternalSharingCreateReportType: ...

    def get_external_sharing_report_failed(self) -> ExternalSharingReportFailedType: ...

    def get_no_expiration_link_gen_create_report(self) -> NoExpirationLinkGenCreateReportType: ...

    def get_no_expiration_link_gen_report_failed(self) -> NoExpirationLinkGenReportFailedType: ...

    def get_no_password_link_gen_create_report(self) -> NoPasswordLinkGenCreateReportType: ...

    def get_no_password_link_gen_report_failed(self) -> NoPasswordLinkGenReportFailedType: ...

    def get_no_password_link_view_create_report(self) -> NoPasswordLinkViewCreateReportType: ...

    def get_no_password_link_view_report_failed(self) -> NoPasswordLinkViewReportFailedType: ...

    def get_outdated_link_view_create_report(self) -> OutdatedLinkViewCreateReportType: ...

    def get_outdated_link_view_report_failed(self) -> OutdatedLinkViewReportFailedType: ...

    def get_paper_admin_export_start(self) -> PaperAdminExportStartType: ...

    def get_smart_sync_create_admin_privilege_report(self) -> SmartSyncCreateAdminPrivilegeReportType: ...

    def get_team_activity_create_report(self) -> TeamActivityCreateReportType: ...

    def get_team_activity_create_report_fail(self) -> TeamActivityCreateReportFailType: ...

    def get_collection_share(self) -> CollectionShareType: ...

    def get_file_transfers_file_add(self) -> FileTransfersFileAddType: ...

    def get_file_transfers_transfer_delete(self) -> FileTransfersTransferDeleteType: ...

    def get_file_transfers_transfer_download(self) -> FileTransfersTransferDownloadType: ...

    def get_file_transfers_transfer_send(self) -> FileTransfersTransferSendType: ...

    def get_file_transfers_transfer_view(self) -> FileTransfersTransferViewType: ...

    def get_note_acl_invite_only(self) -> NoteAclInviteOnlyType: ...

    def get_note_acl_link(self) -> NoteAclLinkType: ...

    def get_note_acl_team_link(self) -> NoteAclTeamLinkType: ...

    def get_note_shared(self) -> NoteSharedType: ...

    def get_note_share_receive(self) -> NoteShareReceiveType: ...

    def get_open_note_shared(self) -> OpenNoteSharedType: ...

    def get_sf_add_group(self) -> SfAddGroupType: ...

    def get_sf_allow_non_members_to_view_shared_links(self) -> SfAllowNonMembersToViewSharedLinksType: ...

    def get_sf_external_invite_warn(self) -> SfExternalInviteWarnType: ...

    def get_sf_fb_invite(self) -> SfFbInviteType: ...

    def get_sf_fb_invite_change_role(self) -> SfFbInviteChangeRoleType: ...

    def get_sf_fb_uninvite(self) -> SfFbUninviteType: ...

    def get_sf_invite_group(self) -> SfInviteGroupType: ...

    def get_sf_team_grant_access(self) -> SfTeamGrantAccessType: ...

    def get_sf_team_invite(self) -> SfTeamInviteType: ...

    def get_sf_team_invite_change_role(self) -> SfTeamInviteChangeRoleType: ...

    def get_sf_team_join(self) -> SfTeamJoinType: ...

    def get_sf_team_join_from_oob_link(self) -> SfTeamJoinFromOobLinkType: ...

    def get_sf_team_uninvite(self) -> SfTeamUninviteType: ...

    def get_shared_content_add_invitees(self) -> SharedContentAddInviteesType: ...

    def get_shared_content_add_link_expiry(self) -> SharedContentAddLinkExpiryType: ...

    def get_shared_content_add_link_password(self) -> SharedContentAddLinkPasswordType: ...

    def get_shared_content_add_member(self) -> SharedContentAddMemberType: ...

    def get_shared_content_change_downloads_policy(self) -> SharedContentChangeDownloadsPolicyType: ...

    def get_shared_content_change_invitee_role(self) -> SharedContentChangeInviteeRoleType: ...

    def get_shared_content_change_link_audience(self) -> SharedContentChangeLinkAudienceType: ...

    def get_shared_content_change_link_expiry(self) -> SharedContentChangeLinkExpiryType: ...

    def get_shared_content_change_link_password(self) -> SharedContentChangeLinkPasswordType: ...

    def get_shared_content_change_member_role(self) -> SharedContentChangeMemberRoleType: ...

    def get_shared_content_change_viewer_info_policy(self) -> SharedContentChangeViewerInfoPolicyType: ...

    def get_shared_content_claim_invitation(self) -> SharedContentClaimInvitationType: ...

    def get_shared_content_copy(self) -> SharedContentCopyType: ...

    def get_shared_content_download(self) -> SharedContentDownloadType: ...

    def get_shared_content_relinquish_membership(self) -> SharedContentRelinquishMembershipType: ...

    def get_shared_content_remove_invitees(self) -> SharedContentRemoveInviteesType: ...

    def get_shared_content_remove_link_expiry(self) -> SharedContentRemoveLinkExpiryType: ...

    def get_shared_content_remove_link_password(self) -> SharedContentRemoveLinkPasswordType: ...

    def get_shared_content_remove_member(self) -> SharedContentRemoveMemberType: ...

    def get_shared_content_request_access(self) -> SharedContentRequestAccessType: ...

    def get_shared_content_restore_invitees(self) -> SharedContentRestoreInviteesType: ...

    def get_shared_content_restore_member(self) -> SharedContentRestoreMemberType: ...

    def get_shared_content_unshare(self) -> SharedContentUnshareType: ...

    def get_shared_content_view(self) -> SharedContentViewType: ...

    def get_shared_folder_change_link_policy(self) -> SharedFolderChangeLinkPolicyType: ...

    def get_shared_folder_change_members_inheritance_policy(self) -> SharedFolderChangeMembersInheritancePolicyType: ...

    def get_shared_folder_change_members_management_policy(self) -> SharedFolderChangeMembersManagementPolicyType: ...

    def get_shared_folder_change_members_policy(self) -> SharedFolderChangeMembersPolicyType: ...

    def get_shared_folder_create(self) -> SharedFolderCreateType: ...

    def get_shared_folder_decline_invitation(self) -> SharedFolderDeclineInvitationType: ...

    def get_shared_folder_mount(self) -> SharedFolderMountType: ...

    def get_shared_folder_nest(self) -> SharedFolderNestType: ...

    def get_shared_folder_transfer_ownership(self) -> SharedFolderTransferOwnershipType: ...

    def get_shared_folder_unmount(self) -> SharedFolderUnmountType: ...

    def get_shared_link_add_expiry(self) -> SharedLinkAddExpiryType: ...

    def get_shared_link_change_expiry(self) -> SharedLinkChangeExpiryType: ...

    def get_shared_link_change_visibility(self) -> SharedLinkChangeVisibilityType: ...

    def get_shared_link_copy(self) -> SharedLinkCopyType: ...

    def get_shared_link_create(self) -> SharedLinkCreateType: ...

    def get_shared_link_disable(self) -> SharedLinkDisableType: ...

    def get_shared_link_download(self) -> SharedLinkDownloadType: ...

    def get_shared_link_remove_expiry(self) -> SharedLinkRemoveExpiryType: ...

    def get_shared_link_settings_add_expiration(self) -> SharedLinkSettingsAddExpirationType: ...

    def get_shared_link_settings_add_password(self) -> SharedLinkSettingsAddPasswordType: ...

    def get_shared_link_settings_allow_download_disabled(self) -> SharedLinkSettingsAllowDownloadDisabledType: ...

    def get_shared_link_settings_allow_download_enabled(self) -> SharedLinkSettingsAllowDownloadEnabledType: ...

    def get_shared_link_settings_change_audience(self) -> SharedLinkSettingsChangeAudienceType: ...

    def get_shared_link_settings_change_expiration(self) -> SharedLinkSettingsChangeExpirationType: ...

    def get_shared_link_settings_change_password(self) -> SharedLinkSettingsChangePasswordType: ...

    def get_shared_link_settings_remove_expiration(self) -> SharedLinkSettingsRemoveExpirationType: ...

    def get_shared_link_settings_remove_password(self) -> SharedLinkSettingsRemovePasswordType: ...

    def get_shared_link_share(self) -> SharedLinkShareType: ...

    def get_shared_link_view(self) -> SharedLinkViewType: ...

    def get_shared_note_opened(self) -> SharedNoteOpenedType: ...

    def get_shmodel_disable_downloads(self) -> ShmodelDisableDownloadsType: ...

    def get_shmodel_enable_downloads(self) -> ShmodelEnableDownloadsType: ...

    def get_shmodel_group_share(self) -> ShmodelGroupShareType: ...

    def get_showcase_access_granted(self) -> ShowcaseAccessGrantedType: ...

    def get_showcase_add_member(self) -> ShowcaseAddMemberType: ...

    def get_showcase_archived(self) -> ShowcaseArchivedType: ...

    def get_showcase_created(self) -> ShowcaseCreatedType: ...

    def get_showcase_delete_comment(self) -> ShowcaseDeleteCommentType: ...

    def get_showcase_edited(self) -> ShowcaseEditedType: ...

    def get_showcase_edit_comment(self) -> ShowcaseEditCommentType: ...

    def get_showcase_file_added(self) -> ShowcaseFileAddedType: ...

    def get_showcase_file_download(self) -> ShowcaseFileDownloadType: ...

    def get_showcase_file_removed(self) -> ShowcaseFileRemovedType: ...

    def get_showcase_file_view(self) -> ShowcaseFileViewType: ...

    def get_showcase_permanently_deleted(self) -> ShowcasePermanentlyDeletedType: ...

    def get_showcase_post_comment(self) -> ShowcasePostCommentType: ...

    def get_showcase_remove_member(self) -> ShowcaseRemoveMemberType: ...

    def get_showcase_renamed(self) -> ShowcaseRenamedType: ...

    def get_showcase_request_access(self) -> ShowcaseRequestAccessType: ...

    def get_showcase_resolve_comment(self) -> ShowcaseResolveCommentType: ...

    def get_showcase_restored(self) -> ShowcaseRestoredType: ...

    def get_showcase_trashed(self) -> ShowcaseTrashedType: ...

    def get_showcase_trashed_deprecated(self) -> ShowcaseTrashedDeprecatedType: ...

    def get_showcase_unresolve_comment(self) -> ShowcaseUnresolveCommentType: ...

    def get_showcase_untrashed(self) -> ShowcaseUntrashedType: ...

    def get_showcase_untrashed_deprecated(self) -> ShowcaseUntrashedDeprecatedType: ...

    def get_showcase_view(self) -> ShowcaseViewType: ...

    def get_sso_add_cert(self) -> SsoAddCertType: ...

    def get_sso_add_login_url(self) -> SsoAddLoginUrlType: ...

    def get_sso_add_logout_url(self) -> SsoAddLogoutUrlType: ...

    def get_sso_change_cert(self) -> SsoChangeCertType: ...

    def get_sso_change_login_url(self) -> SsoChangeLoginUrlType: ...

    def get_sso_change_logout_url(self) -> SsoChangeLogoutUrlType: ...

    def get_sso_change_saml_identity_mode(self) -> SsoChangeSamlIdentityModeType: ...

    def get_sso_remove_cert(self) -> SsoRemoveCertType: ...

    def get_sso_remove_login_url(self) -> SsoRemoveLoginUrlType: ...

    def get_sso_remove_logout_url(self) -> SsoRemoveLogoutUrlType: ...

    def get_team_folder_change_status(self) -> TeamFolderChangeStatusType: ...

    def get_team_folder_create(self) -> TeamFolderCreateType: ...

    def get_team_folder_downgrade(self) -> TeamFolderDowngradeType: ...

    def get_team_folder_permanently_delete(self) -> TeamFolderPermanentlyDeleteType: ...

    def get_team_folder_rename(self) -> TeamFolderRenameType: ...

    def get_team_selective_sync_settings_changed(self) -> TeamSelectiveSyncSettingsChangedType: ...

    def get_account_capture_change_policy(self) -> AccountCaptureChangePolicyType: ...

    def get_allow_download_disabled(self) -> AllowDownloadDisabledType: ...

    def get_allow_download_enabled(self) -> AllowDownloadEnabledType: ...

    def get_app_permissions_changed(self) -> AppPermissionsChangedType: ...

    def get_camera_uploads_policy_changed(self) -> CameraUploadsPolicyChangedType: ...

    def get_capture_transcript_policy_changed(self) -> CaptureTranscriptPolicyChangedType: ...

    def get_classification_change_policy(self) -> ClassificationChangePolicyType: ...

    def get_computer_backup_policy_changed(self) -> ComputerBackupPolicyChangedType: ...

    def get_content_administration_policy_changed(self) -> ContentAdministrationPolicyChangedType: ...

    def get_data_placement_restriction_change_policy(self) -> DataPlacementRestrictionChangePolicyType: ...

    def get_data_placement_restriction_satisfy_policy(self) -> DataPlacementRestrictionSatisfyPolicyType: ...

    def get_device_approvals_add_exception(self) -> DeviceApprovalsAddExceptionType: ...

    def get_device_approvals_change_desktop_policy(self) -> DeviceApprovalsChangeDesktopPolicyType: ...

    def get_device_approvals_change_mobile_policy(self) -> DeviceApprovalsChangeMobilePolicyType: ...

    def get_device_approvals_change_overage_action(self) -> DeviceApprovalsChangeOverageActionType: ...

    def get_device_approvals_change_unlink_action(self) -> DeviceApprovalsChangeUnlinkActionType: ...

    def get_device_approvals_remove_exception(self) -> DeviceApprovalsRemoveExceptionType: ...

    def get_directory_restrictions_add_members(self) -> DirectoryRestrictionsAddMembersType: ...

    def get_directory_restrictions_remove_members(self) -> DirectoryRestrictionsRemoveMembersType: ...

    def get_email_ingest_policy_changed(self) -> EmailIngestPolicyChangedType: ...

    def get_emm_add_exception(self) -> EmmAddExceptionType: ...

    def get_emm_change_policy(self) -> EmmChangePolicyType: ...

    def get_emm_remove_exception(self) -> EmmRemoveExceptionType: ...

    def get_extended_version_history_change_policy(self) -> ExtendedVersionHistoryChangePolicyType: ...

    def get_external_drive_backup_policy_changed(self) -> ExternalDriveBackupPolicyChangedType: ...

    def get_file_comments_change_policy(self) -> FileCommentsChangePolicyType: ...

    def get_file_locking_policy_changed(self) -> FileLockingPolicyChangedType: ...

    def get_file_requests_change_policy(self) -> FileRequestsChangePolicyType: ...

    def get_file_requests_emails_enabled(self) -> FileRequestsEmailsEnabledType: ...

    def get_file_requests_emails_restricted_to_team_only(self) -> FileRequestsEmailsRestrictedToTeamOnlyType: ...

    def get_file_transfers_policy_changed(self) -> FileTransfersPolicyChangedType: ...

    def get_google_sso_change_policy(self) -> GoogleSsoChangePolicyType: ...

    def get_group_user_management_change_policy(self) -> GroupUserManagementChangePolicyType: ...

    def get_integration_policy_changed(self) -> IntegrationPolicyChangedType: ...

    def get_invite_acceptance_email_policy_changed(self) -> InviteAcceptanceEmailPolicyChangedType: ...

    def get_member_requests_change_policy(self) -> MemberRequestsChangePolicyType: ...

    def get_member_send_invite_policy_changed(self) -> MemberSendInvitePolicyChangedType: ...

    def get_member_space_limits_add_exception(self) -> MemberSpaceLimitsAddExceptionType: ...

    def get_member_space_limits_change_caps_type_policy(self) -> MemberSpaceLimitsChangeCapsTypePolicyType: ...

    def get_member_space_limits_change_policy(self) -> MemberSpaceLimitsChangePolicyType: ...

    def get_member_space_limits_remove_exception(self) -> MemberSpaceLimitsRemoveExceptionType: ...

    def get_member_suggestions_change_policy(self) -> MemberSuggestionsChangePolicyType: ...

    def get_microsoft_office_addin_change_policy(self) -> MicrosoftOfficeAddinChangePolicyType: ...

    def get_network_control_change_policy(self) -> NetworkControlChangePolicyType: ...

    def get_paper_change_deployment_policy(self) -> PaperChangeDeploymentPolicyType: ...

    def get_paper_change_member_link_policy(self) -> PaperChangeMemberLinkPolicyType: ...

    def get_paper_change_member_policy(self) -> PaperChangeMemberPolicyType: ...

    def get_paper_change_policy(self) -> PaperChangePolicyType: ...

    def get_paper_default_folder_policy_changed(self) -> PaperDefaultFolderPolicyChangedType: ...

    def get_paper_desktop_policy_changed(self) -> PaperDesktopPolicyChangedType: ...

    def get_paper_enabled_users_group_addition(self) -> PaperEnabledUsersGroupAdditionType: ...

    def get_paper_enabled_users_group_removal(self) -> PaperEnabledUsersGroupRemovalType: ...

    def get_password_strength_requirements_change_policy(self) -> PasswordStrengthRequirementsChangePolicyType: ...

    def get_permanent_delete_change_policy(self) -> PermanentDeleteChangePolicyType: ...

    def get_reseller_support_change_policy(self) -> ResellerSupportChangePolicyType: ...

    def get_rewind_policy_changed(self) -> RewindPolicyChangedType: ...

    def get_send_for_signature_policy_changed(self) -> SendForSignaturePolicyChangedType: ...

    def get_sharing_change_folder_join_policy(self) -> SharingChangeFolderJoinPolicyType: ...

    def get_sharing_change_link_allow_change_expiration_policy(self) -> SharingChangeLinkAllowChangeExpirationPolicyType: ...

    def get_sharing_change_link_default_expiration_policy(self) -> SharingChangeLinkDefaultExpirationPolicyType: ...

    def get_sharing_change_link_enforce_password_policy(self) -> SharingChangeLinkEnforcePasswordPolicyType: ...

    def get_sharing_change_link_policy(self) -> SharingChangeLinkPolicyType: ...

    def get_sharing_change_member_policy(self) -> SharingChangeMemberPolicyType: ...

    def get_showcase_change_download_policy(self) -> ShowcaseChangeDownloadPolicyType: ...

    def get_showcase_change_enabled_policy(self) -> ShowcaseChangeEnabledPolicyType: ...

    def get_showcase_change_external_sharing_policy(self) -> ShowcaseChangeExternalSharingPolicyType: ...

    def get_smarter_smart_sync_policy_changed(self) -> SmarterSmartSyncPolicyChangedType: ...

    def get_smart_sync_change_policy(self) -> SmartSyncChangePolicyType: ...

    def get_smart_sync_not_opt_out(self) -> SmartSyncNotOptOutType: ...

    def get_smart_sync_opt_out(self) -> SmartSyncOptOutType: ...

    def get_sso_change_policy(self) -> SsoChangePolicyType: ...

    def get_team_branding_policy_changed(self) -> TeamBrandingPolicyChangedType: ...

    def get_team_extensions_policy_changed(self) -> TeamExtensionsPolicyChangedType: ...

    def get_team_selective_sync_policy_changed(self) -> TeamSelectiveSyncPolicyChangedType: ...

    def get_team_sharing_whitelist_subjects_changed(self) -> TeamSharingWhitelistSubjectsChangedType: ...

    def get_tfa_add_exception(self) -> TfaAddExceptionType: ...

    def get_tfa_change_policy(self) -> TfaChangePolicyType: ...

    def get_tfa_remove_exception(self) -> TfaRemoveExceptionType: ...

    def get_two_account_change_policy(self) -> TwoAccountChangePolicyType: ...

    def get_viewer_info_policy_changed(self) -> ViewerInfoPolicyChangedType: ...

    def get_watermarking_policy_changed(self) -> WatermarkingPolicyChangedType: ...

    def get_web_sessions_change_active_session_limit(self) -> WebSessionsChangeActiveSessionLimitType: ...

    def get_web_sessions_change_fixed_length_policy(self) -> WebSessionsChangeFixedLengthPolicyType: ...

    def get_web_sessions_change_idle_length_policy(self) -> WebSessionsChangeIdleLengthPolicyType: ...

    def get_data_residency_migration_request_successful(self) -> DataResidencyMigrationRequestSuccessfulType: ...

    def get_data_residency_migration_request_unsuccessful(self) -> DataResidencyMigrationRequestUnsuccessfulType: ...

    def get_team_merge_from(self) -> TeamMergeFromType: ...

    def get_team_merge_to(self) -> TeamMergeToType: ...

    def get_team_profile_add_background(self) -> TeamProfileAddBackgroundType: ...

    def get_team_profile_add_logo(self) -> TeamProfileAddLogoType: ...

    def get_team_profile_change_background(self) -> TeamProfileChangeBackgroundType: ...

    def get_team_profile_change_default_language(self) -> TeamProfileChangeDefaultLanguageType: ...

    def get_team_profile_change_logo(self) -> TeamProfileChangeLogoType: ...

    def get_team_profile_change_name(self) -> TeamProfileChangeNameType: ...

    def get_team_profile_remove_background(self) -> TeamProfileRemoveBackgroundType: ...

    def get_team_profile_remove_logo(self) -> TeamProfileRemoveLogoType: ...

    def get_tfa_add_backup_phone(self) -> TfaAddBackupPhoneType: ...

    def get_tfa_add_security_key(self) -> TfaAddSecurityKeyType: ...

    def get_tfa_change_backup_phone(self) -> TfaChangeBackupPhoneType: ...

    def get_tfa_change_status(self) -> TfaChangeStatusType: ...

    def get_tfa_remove_backup_phone(self) -> TfaRemoveBackupPhoneType: ...

    def get_tfa_remove_security_key(self) -> TfaRemoveSecurityKeyType: ...

    def get_tfa_reset(self) -> TfaResetType: ...

    def get_changed_enterprise_admin_role(self) -> ChangedEnterpriseAdminRoleType: ...

    def get_changed_enterprise_connected_team_status(self) -> ChangedEnterpriseConnectedTeamStatusType: ...

    def get_ended_enterprise_admin_session(self) -> EndedEnterpriseAdminSessionType: ...

    def get_ended_enterprise_admin_session_deprecated(self) -> EndedEnterpriseAdminSessionDeprecatedType: ...

    def get_enterprise_settings_locking(self) -> EnterpriseSettingsLockingType: ...

    def get_guest_admin_change_status(self) -> GuestAdminChangeStatusType: ...

    def get_started_enterprise_admin_session(self) -> StartedEnterpriseAdminSessionType: ...

    def get_team_merge_request_accepted(self) -> TeamMergeRequestAcceptedType: ...

    def get_team_merge_request_accepted_shown_to_primary_team(self) -> TeamMergeRequestAcceptedShownToPrimaryTeamType: ...

    def get_team_merge_request_accepted_shown_to_secondary_team(self) -> TeamMergeRequestAcceptedShownToSecondaryTeamType: ...

    def get_team_merge_request_auto_canceled(self) -> TeamMergeRequestAutoCanceledType: ...

    def get_team_merge_request_canceled(self) -> TeamMergeRequestCanceledType: ...

    def get_team_merge_request_canceled_shown_to_primary_team(self) -> TeamMergeRequestCanceledShownToPrimaryTeamType: ...

    def get_team_merge_request_canceled_shown_to_secondary_team(self) -> TeamMergeRequestCanceledShownToSecondaryTeamType: ...

    def get_team_merge_request_expired(self) -> TeamMergeRequestExpiredType: ...

    def get_team_merge_request_expired_shown_to_primary_team(self) -> TeamMergeRequestExpiredShownToPrimaryTeamType: ...

    def get_team_merge_request_expired_shown_to_secondary_team(self) -> TeamMergeRequestExpiredShownToSecondaryTeamType: ...

    def get_team_merge_request_rejected_shown_to_primary_team(self) -> TeamMergeRequestRejectedShownToPrimaryTeamType: ...

    def get_team_merge_request_rejected_shown_to_secondary_team(self) -> TeamMergeRequestRejectedShownToSecondaryTeamType: ...

    def get_team_merge_request_reminder(self) -> TeamMergeRequestReminderType: ...

    def get_team_merge_request_reminder_shown_to_primary_team(self) -> TeamMergeRequestReminderShownToPrimaryTeamType: ...

    def get_team_merge_request_reminder_shown_to_secondary_team(self) -> TeamMergeRequestReminderShownToSecondaryTeamType: ...

    def get_team_merge_request_revoked(self) -> TeamMergeRequestRevokedType: ...

    def get_team_merge_request_sent_shown_to_primary_team(self) -> TeamMergeRequestSentShownToPrimaryTeamType: ...

    def get_team_merge_request_sent_shown_to_secondary_team(self) -> TeamMergeRequestSentShownToSecondaryTeamType: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EventType_validator: bv.Validator = ...

class EventTypeArg(bb.Union):
    admin_alerting_alert_state_changed: EventTypeArg = ...
    admin_alerting_changed_alert_config: EventTypeArg = ...
    admin_alerting_triggered_alert: EventTypeArg = ...
    app_blocked_by_permissions: EventTypeArg = ...
    app_link_team: EventTypeArg = ...
    app_link_user: EventTypeArg = ...
    app_unlink_team: EventTypeArg = ...
    app_unlink_user: EventTypeArg = ...
    integration_connected: EventTypeArg = ...
    integration_disconnected: EventTypeArg = ...
    file_add_comment: EventTypeArg = ...
    file_change_comment_subscription: EventTypeArg = ...
    file_delete_comment: EventTypeArg = ...
    file_edit_comment: EventTypeArg = ...
    file_like_comment: EventTypeArg = ...
    file_resolve_comment: EventTypeArg = ...
    file_unlike_comment: EventTypeArg = ...
    file_unresolve_comment: EventTypeArg = ...
    governance_policy_add_folders: EventTypeArg = ...
    governance_policy_add_folder_failed: EventTypeArg = ...
    governance_policy_content_disposed: EventTypeArg = ...
    governance_policy_create: EventTypeArg = ...
    governance_policy_delete: EventTypeArg = ...
    governance_policy_edit_details: EventTypeArg = ...
    governance_policy_edit_duration: EventTypeArg = ...
    governance_policy_export_created: EventTypeArg = ...
    governance_policy_export_removed: EventTypeArg = ...
    governance_policy_remove_folders: EventTypeArg = ...
    governance_policy_report_created: EventTypeArg = ...
    governance_policy_zip_part_downloaded: EventTypeArg = ...
    legal_holds_activate_a_hold: EventTypeArg = ...
    legal_holds_add_members: EventTypeArg = ...
    legal_holds_change_hold_details: EventTypeArg = ...
    legal_holds_change_hold_name: EventTypeArg = ...
    legal_holds_export_a_hold: EventTypeArg = ...
    legal_holds_export_cancelled: EventTypeArg = ...
    legal_holds_export_downloaded: EventTypeArg = ...
    legal_holds_export_removed: EventTypeArg = ...
    legal_holds_release_a_hold: EventTypeArg = ...
    legal_holds_remove_members: EventTypeArg = ...
    legal_holds_report_a_hold: EventTypeArg = ...
    device_change_ip_desktop: EventTypeArg = ...
    device_change_ip_mobile: EventTypeArg = ...
    device_change_ip_web: EventTypeArg = ...
    device_delete_on_unlink_fail: EventTypeArg = ...
    device_delete_on_unlink_success: EventTypeArg = ...
    device_link_fail: EventTypeArg = ...
    device_link_success: EventTypeArg = ...
    device_management_disabled: EventTypeArg = ...
    device_management_enabled: EventTypeArg = ...
    device_sync_backup_status_changed: EventTypeArg = ...
    device_unlink: EventTypeArg = ...
    dropbox_passwords_exported: EventTypeArg = ...
    dropbox_passwords_new_device_enrolled: EventTypeArg = ...
    emm_refresh_auth_token: EventTypeArg = ...
    account_capture_change_availability: EventTypeArg = ...
    account_capture_migrate_account: EventTypeArg = ...
    account_capture_notification_emails_sent: EventTypeArg = ...
    account_capture_relinquish_account: EventTypeArg = ...
    disabled_domain_invites: EventTypeArg = ...
    domain_invites_approve_request_to_join_team: EventTypeArg = ...
    domain_invites_decline_request_to_join_team: EventTypeArg = ...
    domain_invites_email_existing_users: EventTypeArg = ...
    domain_invites_request_to_join_team: EventTypeArg = ...
    domain_invites_set_invite_new_user_pref_to_no: EventTypeArg = ...
    domain_invites_set_invite_new_user_pref_to_yes: EventTypeArg = ...
    domain_verification_add_domain_fail: EventTypeArg = ...
    domain_verification_add_domain_success: EventTypeArg = ...
    domain_verification_remove_domain: EventTypeArg = ...
    enabled_domain_invites: EventTypeArg = ...
    apply_naming_convention: EventTypeArg = ...
    create_folder: EventTypeArg = ...
    file_add: EventTypeArg = ...
    file_copy: EventTypeArg = ...
    file_delete: EventTypeArg = ...
    file_download: EventTypeArg = ...
    file_edit: EventTypeArg = ...
    file_get_copy_reference: EventTypeArg = ...
    file_locking_lock_status_changed: EventTypeArg = ...
    file_move: EventTypeArg = ...
    file_permanently_delete: EventTypeArg = ...
    file_preview: EventTypeArg = ...
    file_rename: EventTypeArg = ...
    file_restore: EventTypeArg = ...
    file_revert: EventTypeArg = ...
    file_rollback_changes: EventTypeArg = ...
    file_save_copy_reference: EventTypeArg = ...
    folder_overview_description_changed: EventTypeArg = ...
    folder_overview_item_pinned: EventTypeArg = ...
    folder_overview_item_unpinned: EventTypeArg = ...
    object_label_added: EventTypeArg = ...
    object_label_removed: EventTypeArg = ...
    object_label_updated_value: EventTypeArg = ...
    organize_folder_with_tidy: EventTypeArg = ...
    rewind_folder: EventTypeArg = ...
    undo_naming_convention: EventTypeArg = ...
    undo_organize_folder_with_tidy: EventTypeArg = ...
    user_tags_added: EventTypeArg = ...
    user_tags_removed: EventTypeArg = ...
    email_ingest_receive_file: EventTypeArg = ...
    file_request_change: EventTypeArg = ...
    file_request_close: EventTypeArg = ...
    file_request_create: EventTypeArg = ...
    file_request_delete: EventTypeArg = ...
    file_request_receive_file: EventTypeArg = ...
    group_add_external_id: EventTypeArg = ...
    group_add_member: EventTypeArg = ...
    group_change_external_id: EventTypeArg = ...
    group_change_management_type: EventTypeArg = ...
    group_change_member_role: EventTypeArg = ...
    group_create: EventTypeArg = ...
    group_delete: EventTypeArg = ...
    group_description_updated: EventTypeArg = ...
    group_join_policy_updated: EventTypeArg = ...
    group_moved: EventTypeArg = ...
    group_remove_external_id: EventTypeArg = ...
    group_remove_member: EventTypeArg = ...
    group_rename: EventTypeArg = ...
    account_lock_or_unlocked: EventTypeArg = ...
    emm_error: EventTypeArg = ...
    guest_admin_signed_in_via_trusted_teams: EventTypeArg = ...
    guest_admin_signed_out_via_trusted_teams: EventTypeArg = ...
    login_fail: EventTypeArg = ...
    login_success: EventTypeArg = ...
    logout: EventTypeArg = ...
    reseller_support_session_end: EventTypeArg = ...
    reseller_support_session_start: EventTypeArg = ...
    sign_in_as_session_end: EventTypeArg = ...
    sign_in_as_session_start: EventTypeArg = ...
    sso_error: EventTypeArg = ...
    create_team_invite_link: EventTypeArg = ...
    delete_team_invite_link: EventTypeArg = ...
    member_add_external_id: EventTypeArg = ...
    member_add_name: EventTypeArg = ...
    member_change_admin_role: EventTypeArg = ...
    member_change_email: EventTypeArg = ...
    member_change_external_id: EventTypeArg = ...
    member_change_membership_type: EventTypeArg = ...
    member_change_name: EventTypeArg = ...
    member_change_reseller_role: EventTypeArg = ...
    member_change_status: EventTypeArg = ...
    member_delete_manual_contacts: EventTypeArg = ...
    member_delete_profile_photo: EventTypeArg = ...
    member_permanently_delete_account_contents: EventTypeArg = ...
    member_remove_external_id: EventTypeArg = ...
    member_set_profile_photo: EventTypeArg = ...
    member_space_limits_add_custom_quota: EventTypeArg = ...
    member_space_limits_change_custom_quota: EventTypeArg = ...
    member_space_limits_change_status: EventTypeArg = ...
    member_space_limits_remove_custom_quota: EventTypeArg = ...
    member_suggest: EventTypeArg = ...
    member_transfer_account_contents: EventTypeArg = ...
    pending_secondary_email_added: EventTypeArg = ...
    secondary_email_deleted: EventTypeArg = ...
    secondary_email_verified: EventTypeArg = ...
    secondary_mails_policy_changed: EventTypeArg = ...
    binder_add_page: EventTypeArg = ...
    binder_add_section: EventTypeArg = ...
    binder_remove_page: EventTypeArg = ...
    binder_remove_section: EventTypeArg = ...
    binder_rename_page: EventTypeArg = ...
    binder_rename_section: EventTypeArg = ...
    binder_reorder_page: EventTypeArg = ...
    binder_reorder_section: EventTypeArg = ...
    paper_content_add_member: EventTypeArg = ...
    paper_content_add_to_folder: EventTypeArg = ...
    paper_content_archive: EventTypeArg = ...
    paper_content_create: EventTypeArg = ...
    paper_content_permanently_delete: EventTypeArg = ...
    paper_content_remove_from_folder: EventTypeArg = ...
    paper_content_remove_member: EventTypeArg = ...
    paper_content_rename: EventTypeArg = ...
    paper_content_restore: EventTypeArg = ...
    paper_doc_add_comment: EventTypeArg = ...
    paper_doc_change_member_role: EventTypeArg = ...
    paper_doc_change_sharing_policy: EventTypeArg = ...
    paper_doc_change_subscription: EventTypeArg = ...
    paper_doc_deleted: EventTypeArg = ...
    paper_doc_delete_comment: EventTypeArg = ...
    paper_doc_download: EventTypeArg = ...
    paper_doc_edit: EventTypeArg = ...
    paper_doc_edit_comment: EventTypeArg = ...
    paper_doc_followed: EventTypeArg = ...
    paper_doc_mention: EventTypeArg = ...
    paper_doc_ownership_changed: EventTypeArg = ...
    paper_doc_request_access: EventTypeArg = ...
    paper_doc_resolve_comment: EventTypeArg = ...
    paper_doc_revert: EventTypeArg = ...
    paper_doc_slack_share: EventTypeArg = ...
    paper_doc_team_invite: EventTypeArg = ...
    paper_doc_trashed: EventTypeArg = ...
    paper_doc_unresolve_comment: EventTypeArg = ...
    paper_doc_untrashed: EventTypeArg = ...
    paper_doc_view: EventTypeArg = ...
    paper_external_view_allow: EventTypeArg = ...
    paper_external_view_default_team: EventTypeArg = ...
    paper_external_view_forbid: EventTypeArg = ...
    paper_folder_change_subscription: EventTypeArg = ...
    paper_folder_deleted: EventTypeArg = ...
    paper_folder_followed: EventTypeArg = ...
    paper_folder_team_invite: EventTypeArg = ...
    paper_published_link_change_permission: EventTypeArg = ...
    paper_published_link_create: EventTypeArg = ...
    paper_published_link_disabled: EventTypeArg = ...
    paper_published_link_view: EventTypeArg = ...
    password_change: EventTypeArg = ...
    password_reset: EventTypeArg = ...
    password_reset_all: EventTypeArg = ...
    classification_create_report: EventTypeArg = ...
    classification_create_report_fail: EventTypeArg = ...
    emm_create_exceptions_report: EventTypeArg = ...
    emm_create_usage_report: EventTypeArg = ...
    export_members_report: EventTypeArg = ...
    export_members_report_fail: EventTypeArg = ...
    external_sharing_create_report: EventTypeArg = ...
    external_sharing_report_failed: EventTypeArg = ...
    no_expiration_link_gen_create_report: EventTypeArg = ...
    no_expiration_link_gen_report_failed: EventTypeArg = ...
    no_password_link_gen_create_report: EventTypeArg = ...
    no_password_link_gen_report_failed: EventTypeArg = ...
    no_password_link_view_create_report: EventTypeArg = ...
    no_password_link_view_report_failed: EventTypeArg = ...
    outdated_link_view_create_report: EventTypeArg = ...
    outdated_link_view_report_failed: EventTypeArg = ...
    paper_admin_export_start: EventTypeArg = ...
    smart_sync_create_admin_privilege_report: EventTypeArg = ...
    team_activity_create_report: EventTypeArg = ...
    team_activity_create_report_fail: EventTypeArg = ...
    collection_share: EventTypeArg = ...
    file_transfers_file_add: EventTypeArg = ...
    file_transfers_transfer_delete: EventTypeArg = ...
    file_transfers_transfer_download: EventTypeArg = ...
    file_transfers_transfer_send: EventTypeArg = ...
    file_transfers_transfer_view: EventTypeArg = ...
    note_acl_invite_only: EventTypeArg = ...
    note_acl_link: EventTypeArg = ...
    note_acl_team_link: EventTypeArg = ...
    note_shared: EventTypeArg = ...
    note_share_receive: EventTypeArg = ...
    open_note_shared: EventTypeArg = ...
    sf_add_group: EventTypeArg = ...
    sf_allow_non_members_to_view_shared_links: EventTypeArg = ...
    sf_external_invite_warn: EventTypeArg = ...
    sf_fb_invite: EventTypeArg = ...
    sf_fb_invite_change_role: EventTypeArg = ...
    sf_fb_uninvite: EventTypeArg = ...
    sf_invite_group: EventTypeArg = ...
    sf_team_grant_access: EventTypeArg = ...
    sf_team_invite: EventTypeArg = ...
    sf_team_invite_change_role: EventTypeArg = ...
    sf_team_join: EventTypeArg = ...
    sf_team_join_from_oob_link: EventTypeArg = ...
    sf_team_uninvite: EventTypeArg = ...
    shared_content_add_invitees: EventTypeArg = ...
    shared_content_add_link_expiry: EventTypeArg = ...
    shared_content_add_link_password: EventTypeArg = ...
    shared_content_add_member: EventTypeArg = ...
    shared_content_change_downloads_policy: EventTypeArg = ...
    shared_content_change_invitee_role: EventTypeArg = ...
    shared_content_change_link_audience: EventTypeArg = ...
    shared_content_change_link_expiry: EventTypeArg = ...
    shared_content_change_link_password: EventTypeArg = ...
    shared_content_change_member_role: EventTypeArg = ...
    shared_content_change_viewer_info_policy: EventTypeArg = ...
    shared_content_claim_invitation: EventTypeArg = ...
    shared_content_copy: EventTypeArg = ...
    shared_content_download: EventTypeArg = ...
    shared_content_relinquish_membership: EventTypeArg = ...
    shared_content_remove_invitees: EventTypeArg = ...
    shared_content_remove_link_expiry: EventTypeArg = ...
    shared_content_remove_link_password: EventTypeArg = ...
    shared_content_remove_member: EventTypeArg = ...
    shared_content_request_access: EventTypeArg = ...
    shared_content_restore_invitees: EventTypeArg = ...
    shared_content_restore_member: EventTypeArg = ...
    shared_content_unshare: EventTypeArg = ...
    shared_content_view: EventTypeArg = ...
    shared_folder_change_link_policy: EventTypeArg = ...
    shared_folder_change_members_inheritance_policy: EventTypeArg = ...
    shared_folder_change_members_management_policy: EventTypeArg = ...
    shared_folder_change_members_policy: EventTypeArg = ...
    shared_folder_create: EventTypeArg = ...
    shared_folder_decline_invitation: EventTypeArg = ...
    shared_folder_mount: EventTypeArg = ...
    shared_folder_nest: EventTypeArg = ...
    shared_folder_transfer_ownership: EventTypeArg = ...
    shared_folder_unmount: EventTypeArg = ...
    shared_link_add_expiry: EventTypeArg = ...
    shared_link_change_expiry: EventTypeArg = ...
    shared_link_change_visibility: EventTypeArg = ...
    shared_link_copy: EventTypeArg = ...
    shared_link_create: EventTypeArg = ...
    shared_link_disable: EventTypeArg = ...
    shared_link_download: EventTypeArg = ...
    shared_link_remove_expiry: EventTypeArg = ...
    shared_link_settings_add_expiration: EventTypeArg = ...
    shared_link_settings_add_password: EventTypeArg = ...
    shared_link_settings_allow_download_disabled: EventTypeArg = ...
    shared_link_settings_allow_download_enabled: EventTypeArg = ...
    shared_link_settings_change_audience: EventTypeArg = ...
    shared_link_settings_change_expiration: EventTypeArg = ...
    shared_link_settings_change_password: EventTypeArg = ...
    shared_link_settings_remove_expiration: EventTypeArg = ...
    shared_link_settings_remove_password: EventTypeArg = ...
    shared_link_share: EventTypeArg = ...
    shared_link_view: EventTypeArg = ...
    shared_note_opened: EventTypeArg = ...
    shmodel_disable_downloads: EventTypeArg = ...
    shmodel_enable_downloads: EventTypeArg = ...
    shmodel_group_share: EventTypeArg = ...
    showcase_access_granted: EventTypeArg = ...
    showcase_add_member: EventTypeArg = ...
    showcase_archived: EventTypeArg = ...
    showcase_created: EventTypeArg = ...
    showcase_delete_comment: EventTypeArg = ...
    showcase_edited: EventTypeArg = ...
    showcase_edit_comment: EventTypeArg = ...
    showcase_file_added: EventTypeArg = ...
    showcase_file_download: EventTypeArg = ...
    showcase_file_removed: EventTypeArg = ...
    showcase_file_view: EventTypeArg = ...
    showcase_permanently_deleted: EventTypeArg = ...
    showcase_post_comment: EventTypeArg = ...
    showcase_remove_member: EventTypeArg = ...
    showcase_renamed: EventTypeArg = ...
    showcase_request_access: EventTypeArg = ...
    showcase_resolve_comment: EventTypeArg = ...
    showcase_restored: EventTypeArg = ...
    showcase_trashed: EventTypeArg = ...
    showcase_trashed_deprecated: EventTypeArg = ...
    showcase_unresolve_comment: EventTypeArg = ...
    showcase_untrashed: EventTypeArg = ...
    showcase_untrashed_deprecated: EventTypeArg = ...
    showcase_view: EventTypeArg = ...
    sso_add_cert: EventTypeArg = ...
    sso_add_login_url: EventTypeArg = ...
    sso_add_logout_url: EventTypeArg = ...
    sso_change_cert: EventTypeArg = ...
    sso_change_login_url: EventTypeArg = ...
    sso_change_logout_url: EventTypeArg = ...
    sso_change_saml_identity_mode: EventTypeArg = ...
    sso_remove_cert: EventTypeArg = ...
    sso_remove_login_url: EventTypeArg = ...
    sso_remove_logout_url: EventTypeArg = ...
    team_folder_change_status: EventTypeArg = ...
    team_folder_create: EventTypeArg = ...
    team_folder_downgrade: EventTypeArg = ...
    team_folder_permanently_delete: EventTypeArg = ...
    team_folder_rename: EventTypeArg = ...
    team_selective_sync_settings_changed: EventTypeArg = ...
    account_capture_change_policy: EventTypeArg = ...
    allow_download_disabled: EventTypeArg = ...
    allow_download_enabled: EventTypeArg = ...
    app_permissions_changed: EventTypeArg = ...
    camera_uploads_policy_changed: EventTypeArg = ...
    capture_transcript_policy_changed: EventTypeArg = ...
    classification_change_policy: EventTypeArg = ...
    computer_backup_policy_changed: EventTypeArg = ...
    content_administration_policy_changed: EventTypeArg = ...
    data_placement_restriction_change_policy: EventTypeArg = ...
    data_placement_restriction_satisfy_policy: EventTypeArg = ...
    device_approvals_add_exception: EventTypeArg = ...
    device_approvals_change_desktop_policy: EventTypeArg = ...
    device_approvals_change_mobile_policy: EventTypeArg = ...
    device_approvals_change_overage_action: EventTypeArg = ...
    device_approvals_change_unlink_action: EventTypeArg = ...
    device_approvals_remove_exception: EventTypeArg = ...
    directory_restrictions_add_members: EventTypeArg = ...
    directory_restrictions_remove_members: EventTypeArg = ...
    email_ingest_policy_changed: EventTypeArg = ...
    emm_add_exception: EventTypeArg = ...
    emm_change_policy: EventTypeArg = ...
    emm_remove_exception: EventTypeArg = ...
    extended_version_history_change_policy: EventTypeArg = ...
    external_drive_backup_policy_changed: EventTypeArg = ...
    file_comments_change_policy: EventTypeArg = ...
    file_locking_policy_changed: EventTypeArg = ...
    file_requests_change_policy: EventTypeArg = ...
    file_requests_emails_enabled: EventTypeArg = ...
    file_requests_emails_restricted_to_team_only: EventTypeArg = ...
    file_transfers_policy_changed: EventTypeArg = ...
    google_sso_change_policy: EventTypeArg = ...
    group_user_management_change_policy: EventTypeArg = ...
    integration_policy_changed: EventTypeArg = ...
    invite_acceptance_email_policy_changed: EventTypeArg = ...
    member_requests_change_policy: EventTypeArg = ...
    member_send_invite_policy_changed: EventTypeArg = ...
    member_space_limits_add_exception: EventTypeArg = ...
    member_space_limits_change_caps_type_policy: EventTypeArg = ...
    member_space_limits_change_policy: EventTypeArg = ...
    member_space_limits_remove_exception: EventTypeArg = ...
    member_suggestions_change_policy: EventTypeArg = ...
    microsoft_office_addin_change_policy: EventTypeArg = ...
    network_control_change_policy: EventTypeArg = ...
    paper_change_deployment_policy: EventTypeArg = ...
    paper_change_member_link_policy: EventTypeArg = ...
    paper_change_member_policy: EventTypeArg = ...
    paper_change_policy: EventTypeArg = ...
    paper_default_folder_policy_changed: EventTypeArg = ...
    paper_desktop_policy_changed: EventTypeArg = ...
    paper_enabled_users_group_addition: EventTypeArg = ...
    paper_enabled_users_group_removal: EventTypeArg = ...
    password_strength_requirements_change_policy: EventTypeArg = ...
    permanent_delete_change_policy: EventTypeArg = ...
    reseller_support_change_policy: EventTypeArg = ...
    rewind_policy_changed: EventTypeArg = ...
    send_for_signature_policy_changed: EventTypeArg = ...
    sharing_change_folder_join_policy: EventTypeArg = ...
    sharing_change_link_allow_change_expiration_policy: EventTypeArg = ...
    sharing_change_link_default_expiration_policy: EventTypeArg = ...
    sharing_change_link_enforce_password_policy: EventTypeArg = ...
    sharing_change_link_policy: EventTypeArg = ...
    sharing_change_member_policy: EventTypeArg = ...
    showcase_change_download_policy: EventTypeArg = ...
    showcase_change_enabled_policy: EventTypeArg = ...
    showcase_change_external_sharing_policy: EventTypeArg = ...
    smarter_smart_sync_policy_changed: EventTypeArg = ...
    smart_sync_change_policy: EventTypeArg = ...
    smart_sync_not_opt_out: EventTypeArg = ...
    smart_sync_opt_out: EventTypeArg = ...
    sso_change_policy: EventTypeArg = ...
    team_branding_policy_changed: EventTypeArg = ...
    team_extensions_policy_changed: EventTypeArg = ...
    team_selective_sync_policy_changed: EventTypeArg = ...
    team_sharing_whitelist_subjects_changed: EventTypeArg = ...
    tfa_add_exception: EventTypeArg = ...
    tfa_change_policy: EventTypeArg = ...
    tfa_remove_exception: EventTypeArg = ...
    two_account_change_policy: EventTypeArg = ...
    viewer_info_policy_changed: EventTypeArg = ...
    watermarking_policy_changed: EventTypeArg = ...
    web_sessions_change_active_session_limit: EventTypeArg = ...
    web_sessions_change_fixed_length_policy: EventTypeArg = ...
    web_sessions_change_idle_length_policy: EventTypeArg = ...
    data_residency_migration_request_successful: EventTypeArg = ...
    data_residency_migration_request_unsuccessful: EventTypeArg = ...
    team_merge_from: EventTypeArg = ...
    team_merge_to: EventTypeArg = ...
    team_profile_add_background: EventTypeArg = ...
    team_profile_add_logo: EventTypeArg = ...
    team_profile_change_background: EventTypeArg = ...
    team_profile_change_default_language: EventTypeArg = ...
    team_profile_change_logo: EventTypeArg = ...
    team_profile_change_name: EventTypeArg = ...
    team_profile_remove_background: EventTypeArg = ...
    team_profile_remove_logo: EventTypeArg = ...
    tfa_add_backup_phone: EventTypeArg = ...
    tfa_add_security_key: EventTypeArg = ...
    tfa_change_backup_phone: EventTypeArg = ...
    tfa_change_status: EventTypeArg = ...
    tfa_remove_backup_phone: EventTypeArg = ...
    tfa_remove_security_key: EventTypeArg = ...
    tfa_reset: EventTypeArg = ...
    changed_enterprise_admin_role: EventTypeArg = ...
    changed_enterprise_connected_team_status: EventTypeArg = ...
    ended_enterprise_admin_session: EventTypeArg = ...
    ended_enterprise_admin_session_deprecated: EventTypeArg = ...
    enterprise_settings_locking: EventTypeArg = ...
    guest_admin_change_status: EventTypeArg = ...
    started_enterprise_admin_session: EventTypeArg = ...
    team_merge_request_accepted: EventTypeArg = ...
    team_merge_request_accepted_shown_to_primary_team: EventTypeArg = ...
    team_merge_request_accepted_shown_to_secondary_team: EventTypeArg = ...
    team_merge_request_auto_canceled: EventTypeArg = ...
    team_merge_request_canceled: EventTypeArg = ...
    team_merge_request_canceled_shown_to_primary_team: EventTypeArg = ...
    team_merge_request_canceled_shown_to_secondary_team: EventTypeArg = ...
    team_merge_request_expired: EventTypeArg = ...
    team_merge_request_expired_shown_to_primary_team: EventTypeArg = ...
    team_merge_request_expired_shown_to_secondary_team: EventTypeArg = ...
    team_merge_request_rejected_shown_to_primary_team: EventTypeArg = ...
    team_merge_request_rejected_shown_to_secondary_team: EventTypeArg = ...
    team_merge_request_reminder: EventTypeArg = ...
    team_merge_request_reminder_shown_to_primary_team: EventTypeArg = ...
    team_merge_request_reminder_shown_to_secondary_team: EventTypeArg = ...
    team_merge_request_revoked: EventTypeArg = ...
    team_merge_request_sent_shown_to_primary_team: EventTypeArg = ...
    team_merge_request_sent_shown_to_secondary_team: EventTypeArg = ...
    other: EventTypeArg = ...

    def is_admin_alerting_alert_state_changed(self) -> bool: ...

    def is_admin_alerting_changed_alert_config(self) -> bool: ...

    def is_admin_alerting_triggered_alert(self) -> bool: ...

    def is_app_blocked_by_permissions(self) -> bool: ...

    def is_app_link_team(self) -> bool: ...

    def is_app_link_user(self) -> bool: ...

    def is_app_unlink_team(self) -> bool: ...

    def is_app_unlink_user(self) -> bool: ...

    def is_integration_connected(self) -> bool: ...

    def is_integration_disconnected(self) -> bool: ...

    def is_file_add_comment(self) -> bool: ...

    def is_file_change_comment_subscription(self) -> bool: ...

    def is_file_delete_comment(self) -> bool: ...

    def is_file_edit_comment(self) -> bool: ...

    def is_file_like_comment(self) -> bool: ...

    def is_file_resolve_comment(self) -> bool: ...

    def is_file_unlike_comment(self) -> bool: ...

    def is_file_unresolve_comment(self) -> bool: ...

    def is_governance_policy_add_folders(self) -> bool: ...

    def is_governance_policy_add_folder_failed(self) -> bool: ...

    def is_governance_policy_content_disposed(self) -> bool: ...

    def is_governance_policy_create(self) -> bool: ...

    def is_governance_policy_delete(self) -> bool: ...

    def is_governance_policy_edit_details(self) -> bool: ...

    def is_governance_policy_edit_duration(self) -> bool: ...

    def is_governance_policy_export_created(self) -> bool: ...

    def is_governance_policy_export_removed(self) -> bool: ...

    def is_governance_policy_remove_folders(self) -> bool: ...

    def is_governance_policy_report_created(self) -> bool: ...

    def is_governance_policy_zip_part_downloaded(self) -> bool: ...

    def is_legal_holds_activate_a_hold(self) -> bool: ...

    def is_legal_holds_add_members(self) -> bool: ...

    def is_legal_holds_change_hold_details(self) -> bool: ...

    def is_legal_holds_change_hold_name(self) -> bool: ...

    def is_legal_holds_export_a_hold(self) -> bool: ...

    def is_legal_holds_export_cancelled(self) -> bool: ...

    def is_legal_holds_export_downloaded(self) -> bool: ...

    def is_legal_holds_export_removed(self) -> bool: ...

    def is_legal_holds_release_a_hold(self) -> bool: ...

    def is_legal_holds_remove_members(self) -> bool: ...

    def is_legal_holds_report_a_hold(self) -> bool: ...

    def is_device_change_ip_desktop(self) -> bool: ...

    def is_device_change_ip_mobile(self) -> bool: ...

    def is_device_change_ip_web(self) -> bool: ...

    def is_device_delete_on_unlink_fail(self) -> bool: ...

    def is_device_delete_on_unlink_success(self) -> bool: ...

    def is_device_link_fail(self) -> bool: ...

    def is_device_link_success(self) -> bool: ...

    def is_device_management_disabled(self) -> bool: ...

    def is_device_management_enabled(self) -> bool: ...

    def is_device_sync_backup_status_changed(self) -> bool: ...

    def is_device_unlink(self) -> bool: ...

    def is_dropbox_passwords_exported(self) -> bool: ...

    def is_dropbox_passwords_new_device_enrolled(self) -> bool: ...

    def is_emm_refresh_auth_token(self) -> bool: ...

    def is_account_capture_change_availability(self) -> bool: ...

    def is_account_capture_migrate_account(self) -> bool: ...

    def is_account_capture_notification_emails_sent(self) -> bool: ...

    def is_account_capture_relinquish_account(self) -> bool: ...

    def is_disabled_domain_invites(self) -> bool: ...

    def is_domain_invites_approve_request_to_join_team(self) -> bool: ...

    def is_domain_invites_decline_request_to_join_team(self) -> bool: ...

    def is_domain_invites_email_existing_users(self) -> bool: ...

    def is_domain_invites_request_to_join_team(self) -> bool: ...

    def is_domain_invites_set_invite_new_user_pref_to_no(self) -> bool: ...

    def is_domain_invites_set_invite_new_user_pref_to_yes(self) -> bool: ...

    def is_domain_verification_add_domain_fail(self) -> bool: ...

    def is_domain_verification_add_domain_success(self) -> bool: ...

    def is_domain_verification_remove_domain(self) -> bool: ...

    def is_enabled_domain_invites(self) -> bool: ...

    def is_apply_naming_convention(self) -> bool: ...

    def is_create_folder(self) -> bool: ...

    def is_file_add(self) -> bool: ...

    def is_file_copy(self) -> bool: ...

    def is_file_delete(self) -> bool: ...

    def is_file_download(self) -> bool: ...

    def is_file_edit(self) -> bool: ...

    def is_file_get_copy_reference(self) -> bool: ...

    def is_file_locking_lock_status_changed(self) -> bool: ...

    def is_file_move(self) -> bool: ...

    def is_file_permanently_delete(self) -> bool: ...

    def is_file_preview(self) -> bool: ...

    def is_file_rename(self) -> bool: ...

    def is_file_restore(self) -> bool: ...

    def is_file_revert(self) -> bool: ...

    def is_file_rollback_changes(self) -> bool: ...

    def is_file_save_copy_reference(self) -> bool: ...

    def is_folder_overview_description_changed(self) -> bool: ...

    def is_folder_overview_item_pinned(self) -> bool: ...

    def is_folder_overview_item_unpinned(self) -> bool: ...

    def is_object_label_added(self) -> bool: ...

    def is_object_label_removed(self) -> bool: ...

    def is_object_label_updated_value(self) -> bool: ...

    def is_organize_folder_with_tidy(self) -> bool: ...

    def is_rewind_folder(self) -> bool: ...

    def is_undo_naming_convention(self) -> bool: ...

    def is_undo_organize_folder_with_tidy(self) -> bool: ...

    def is_user_tags_added(self) -> bool: ...

    def is_user_tags_removed(self) -> bool: ...

    def is_email_ingest_receive_file(self) -> bool: ...

    def is_file_request_change(self) -> bool: ...

    def is_file_request_close(self) -> bool: ...

    def is_file_request_create(self) -> bool: ...

    def is_file_request_delete(self) -> bool: ...

    def is_file_request_receive_file(self) -> bool: ...

    def is_group_add_external_id(self) -> bool: ...

    def is_group_add_member(self) -> bool: ...

    def is_group_change_external_id(self) -> bool: ...

    def is_group_change_management_type(self) -> bool: ...

    def is_group_change_member_role(self) -> bool: ...

    def is_group_create(self) -> bool: ...

    def is_group_delete(self) -> bool: ...

    def is_group_description_updated(self) -> bool: ...

    def is_group_join_policy_updated(self) -> bool: ...

    def is_group_moved(self) -> bool: ...

    def is_group_remove_external_id(self) -> bool: ...

    def is_group_remove_member(self) -> bool: ...

    def is_group_rename(self) -> bool: ...

    def is_account_lock_or_unlocked(self) -> bool: ...

    def is_emm_error(self) -> bool: ...

    def is_guest_admin_signed_in_via_trusted_teams(self) -> bool: ...

    def is_guest_admin_signed_out_via_trusted_teams(self) -> bool: ...

    def is_login_fail(self) -> bool: ...

    def is_login_success(self) -> bool: ...

    def is_logout(self) -> bool: ...

    def is_reseller_support_session_end(self) -> bool: ...

    def is_reseller_support_session_start(self) -> bool: ...

    def is_sign_in_as_session_end(self) -> bool: ...

    def is_sign_in_as_session_start(self) -> bool: ...

    def is_sso_error(self) -> bool: ...

    def is_create_team_invite_link(self) -> bool: ...

    def is_delete_team_invite_link(self) -> bool: ...

    def is_member_add_external_id(self) -> bool: ...

    def is_member_add_name(self) -> bool: ...

    def is_member_change_admin_role(self) -> bool: ...

    def is_member_change_email(self) -> bool: ...

    def is_member_change_external_id(self) -> bool: ...

    def is_member_change_membership_type(self) -> bool: ...

    def is_member_change_name(self) -> bool: ...

    def is_member_change_reseller_role(self) -> bool: ...

    def is_member_change_status(self) -> bool: ...

    def is_member_delete_manual_contacts(self) -> bool: ...

    def is_member_delete_profile_photo(self) -> bool: ...

    def is_member_permanently_delete_account_contents(self) -> bool: ...

    def is_member_remove_external_id(self) -> bool: ...

    def is_member_set_profile_photo(self) -> bool: ...

    def is_member_space_limits_add_custom_quota(self) -> bool: ...

    def is_member_space_limits_change_custom_quota(self) -> bool: ...

    def is_member_space_limits_change_status(self) -> bool: ...

    def is_member_space_limits_remove_custom_quota(self) -> bool: ...

    def is_member_suggest(self) -> bool: ...

    def is_member_transfer_account_contents(self) -> bool: ...

    def is_pending_secondary_email_added(self) -> bool: ...

    def is_secondary_email_deleted(self) -> bool: ...

    def is_secondary_email_verified(self) -> bool: ...

    def is_secondary_mails_policy_changed(self) -> bool: ...

    def is_binder_add_page(self) -> bool: ...

    def is_binder_add_section(self) -> bool: ...

    def is_binder_remove_page(self) -> bool: ...

    def is_binder_remove_section(self) -> bool: ...

    def is_binder_rename_page(self) -> bool: ...

    def is_binder_rename_section(self) -> bool: ...

    def is_binder_reorder_page(self) -> bool: ...

    def is_binder_reorder_section(self) -> bool: ...

    def is_paper_content_add_member(self) -> bool: ...

    def is_paper_content_add_to_folder(self) -> bool: ...

    def is_paper_content_archive(self) -> bool: ...

    def is_paper_content_create(self) -> bool: ...

    def is_paper_content_permanently_delete(self) -> bool: ...

    def is_paper_content_remove_from_folder(self) -> bool: ...

    def is_paper_content_remove_member(self) -> bool: ...

    def is_paper_content_rename(self) -> bool: ...

    def is_paper_content_restore(self) -> bool: ...

    def is_paper_doc_add_comment(self) -> bool: ...

    def is_paper_doc_change_member_role(self) -> bool: ...

    def is_paper_doc_change_sharing_policy(self) -> bool: ...

    def is_paper_doc_change_subscription(self) -> bool: ...

    def is_paper_doc_deleted(self) -> bool: ...

    def is_paper_doc_delete_comment(self) -> bool: ...

    def is_paper_doc_download(self) -> bool: ...

    def is_paper_doc_edit(self) -> bool: ...

    def is_paper_doc_edit_comment(self) -> bool: ...

    def is_paper_doc_followed(self) -> bool: ...

    def is_paper_doc_mention(self) -> bool: ...

    def is_paper_doc_ownership_changed(self) -> bool: ...

    def is_paper_doc_request_access(self) -> bool: ...

    def is_paper_doc_resolve_comment(self) -> bool: ...

    def is_paper_doc_revert(self) -> bool: ...

    def is_paper_doc_slack_share(self) -> bool: ...

    def is_paper_doc_team_invite(self) -> bool: ...

    def is_paper_doc_trashed(self) -> bool: ...

    def is_paper_doc_unresolve_comment(self) -> bool: ...

    def is_paper_doc_untrashed(self) -> bool: ...

    def is_paper_doc_view(self) -> bool: ...

    def is_paper_external_view_allow(self) -> bool: ...

    def is_paper_external_view_default_team(self) -> bool: ...

    def is_paper_external_view_forbid(self) -> bool: ...

    def is_paper_folder_change_subscription(self) -> bool: ...

    def is_paper_folder_deleted(self) -> bool: ...

    def is_paper_folder_followed(self) -> bool: ...

    def is_paper_folder_team_invite(self) -> bool: ...

    def is_paper_published_link_change_permission(self) -> bool: ...

    def is_paper_published_link_create(self) -> bool: ...

    def is_paper_published_link_disabled(self) -> bool: ...

    def is_paper_published_link_view(self) -> bool: ...

    def is_password_change(self) -> bool: ...

    def is_password_reset(self) -> bool: ...

    def is_password_reset_all(self) -> bool: ...

    def is_classification_create_report(self) -> bool: ...

    def is_classification_create_report_fail(self) -> bool: ...

    def is_emm_create_exceptions_report(self) -> bool: ...

    def is_emm_create_usage_report(self) -> bool: ...

    def is_export_members_report(self) -> bool: ...

    def is_export_members_report_fail(self) -> bool: ...

    def is_external_sharing_create_report(self) -> bool: ...

    def is_external_sharing_report_failed(self) -> bool: ...

    def is_no_expiration_link_gen_create_report(self) -> bool: ...

    def is_no_expiration_link_gen_report_failed(self) -> bool: ...

    def is_no_password_link_gen_create_report(self) -> bool: ...

    def is_no_password_link_gen_report_failed(self) -> bool: ...

    def is_no_password_link_view_create_report(self) -> bool: ...

    def is_no_password_link_view_report_failed(self) -> bool: ...

    def is_outdated_link_view_create_report(self) -> bool: ...

    def is_outdated_link_view_report_failed(self) -> bool: ...

    def is_paper_admin_export_start(self) -> bool: ...

    def is_smart_sync_create_admin_privilege_report(self) -> bool: ...

    def is_team_activity_create_report(self) -> bool: ...

    def is_team_activity_create_report_fail(self) -> bool: ...

    def is_collection_share(self) -> bool: ...

    def is_file_transfers_file_add(self) -> bool: ...

    def is_file_transfers_transfer_delete(self) -> bool: ...

    def is_file_transfers_transfer_download(self) -> bool: ...

    def is_file_transfers_transfer_send(self) -> bool: ...

    def is_file_transfers_transfer_view(self) -> bool: ...

    def is_note_acl_invite_only(self) -> bool: ...

    def is_note_acl_link(self) -> bool: ...

    def is_note_acl_team_link(self) -> bool: ...

    def is_note_shared(self) -> bool: ...

    def is_note_share_receive(self) -> bool: ...

    def is_open_note_shared(self) -> bool: ...

    def is_sf_add_group(self) -> bool: ...

    def is_sf_allow_non_members_to_view_shared_links(self) -> bool: ...

    def is_sf_external_invite_warn(self) -> bool: ...

    def is_sf_fb_invite(self) -> bool: ...

    def is_sf_fb_invite_change_role(self) -> bool: ...

    def is_sf_fb_uninvite(self) -> bool: ...

    def is_sf_invite_group(self) -> bool: ...

    def is_sf_team_grant_access(self) -> bool: ...

    def is_sf_team_invite(self) -> bool: ...

    def is_sf_team_invite_change_role(self) -> bool: ...

    def is_sf_team_join(self) -> bool: ...

    def is_sf_team_join_from_oob_link(self) -> bool: ...

    def is_sf_team_uninvite(self) -> bool: ...

    def is_shared_content_add_invitees(self) -> bool: ...

    def is_shared_content_add_link_expiry(self) -> bool: ...

    def is_shared_content_add_link_password(self) -> bool: ...

    def is_shared_content_add_member(self) -> bool: ...

    def is_shared_content_change_downloads_policy(self) -> bool: ...

    def is_shared_content_change_invitee_role(self) -> bool: ...

    def is_shared_content_change_link_audience(self) -> bool: ...

    def is_shared_content_change_link_expiry(self) -> bool: ...

    def is_shared_content_change_link_password(self) -> bool: ...

    def is_shared_content_change_member_role(self) -> bool: ...

    def is_shared_content_change_viewer_info_policy(self) -> bool: ...

    def is_shared_content_claim_invitation(self) -> bool: ...

    def is_shared_content_copy(self) -> bool: ...

    def is_shared_content_download(self) -> bool: ...

    def is_shared_content_relinquish_membership(self) -> bool: ...

    def is_shared_content_remove_invitees(self) -> bool: ...

    def is_shared_content_remove_link_expiry(self) -> bool: ...

    def is_shared_content_remove_link_password(self) -> bool: ...

    def is_shared_content_remove_member(self) -> bool: ...

    def is_shared_content_request_access(self) -> bool: ...

    def is_shared_content_restore_invitees(self) -> bool: ...

    def is_shared_content_restore_member(self) -> bool: ...

    def is_shared_content_unshare(self) -> bool: ...

    def is_shared_content_view(self) -> bool: ...

    def is_shared_folder_change_link_policy(self) -> bool: ...

    def is_shared_folder_change_members_inheritance_policy(self) -> bool: ...

    def is_shared_folder_change_members_management_policy(self) -> bool: ...

    def is_shared_folder_change_members_policy(self) -> bool: ...

    def is_shared_folder_create(self) -> bool: ...

    def is_shared_folder_decline_invitation(self) -> bool: ...

    def is_shared_folder_mount(self) -> bool: ...

    def is_shared_folder_nest(self) -> bool: ...

    def is_shared_folder_transfer_ownership(self) -> bool: ...

    def is_shared_folder_unmount(self) -> bool: ...

    def is_shared_link_add_expiry(self) -> bool: ...

    def is_shared_link_change_expiry(self) -> bool: ...

    def is_shared_link_change_visibility(self) -> bool: ...

    def is_shared_link_copy(self) -> bool: ...

    def is_shared_link_create(self) -> bool: ...

    def is_shared_link_disable(self) -> bool: ...

    def is_shared_link_download(self) -> bool: ...

    def is_shared_link_remove_expiry(self) -> bool: ...

    def is_shared_link_settings_add_expiration(self) -> bool: ...

    def is_shared_link_settings_add_password(self) -> bool: ...

    def is_shared_link_settings_allow_download_disabled(self) -> bool: ...

    def is_shared_link_settings_allow_download_enabled(self) -> bool: ...

    def is_shared_link_settings_change_audience(self) -> bool: ...

    def is_shared_link_settings_change_expiration(self) -> bool: ...

    def is_shared_link_settings_change_password(self) -> bool: ...

    def is_shared_link_settings_remove_expiration(self) -> bool: ...

    def is_shared_link_settings_remove_password(self) -> bool: ...

    def is_shared_link_share(self) -> bool: ...

    def is_shared_link_view(self) -> bool: ...

    def is_shared_note_opened(self) -> bool: ...

    def is_shmodel_disable_downloads(self) -> bool: ...

    def is_shmodel_enable_downloads(self) -> bool: ...

    def is_shmodel_group_share(self) -> bool: ...

    def is_showcase_access_granted(self) -> bool: ...

    def is_showcase_add_member(self) -> bool: ...

    def is_showcase_archived(self) -> bool: ...

    def is_showcase_created(self) -> bool: ...

    def is_showcase_delete_comment(self) -> bool: ...

    def is_showcase_edited(self) -> bool: ...

    def is_showcase_edit_comment(self) -> bool: ...

    def is_showcase_file_added(self) -> bool: ...

    def is_showcase_file_download(self) -> bool: ...

    def is_showcase_file_removed(self) -> bool: ...

    def is_showcase_file_view(self) -> bool: ...

    def is_showcase_permanently_deleted(self) -> bool: ...

    def is_showcase_post_comment(self) -> bool: ...

    def is_showcase_remove_member(self) -> bool: ...

    def is_showcase_renamed(self) -> bool: ...

    def is_showcase_request_access(self) -> bool: ...

    def is_showcase_resolve_comment(self) -> bool: ...

    def is_showcase_restored(self) -> bool: ...

    def is_showcase_trashed(self) -> bool: ...

    def is_showcase_trashed_deprecated(self) -> bool: ...

    def is_showcase_unresolve_comment(self) -> bool: ...

    def is_showcase_untrashed(self) -> bool: ...

    def is_showcase_untrashed_deprecated(self) -> bool: ...

    def is_showcase_view(self) -> bool: ...

    def is_sso_add_cert(self) -> bool: ...

    def is_sso_add_login_url(self) -> bool: ...

    def is_sso_add_logout_url(self) -> bool: ...

    def is_sso_change_cert(self) -> bool: ...

    def is_sso_change_login_url(self) -> bool: ...

    def is_sso_change_logout_url(self) -> bool: ...

    def is_sso_change_saml_identity_mode(self) -> bool: ...

    def is_sso_remove_cert(self) -> bool: ...

    def is_sso_remove_login_url(self) -> bool: ...

    def is_sso_remove_logout_url(self) -> bool: ...

    def is_team_folder_change_status(self) -> bool: ...

    def is_team_folder_create(self) -> bool: ...

    def is_team_folder_downgrade(self) -> bool: ...

    def is_team_folder_permanently_delete(self) -> bool: ...

    def is_team_folder_rename(self) -> bool: ...

    def is_team_selective_sync_settings_changed(self) -> bool: ...

    def is_account_capture_change_policy(self) -> bool: ...

    def is_allow_download_disabled(self) -> bool: ...

    def is_allow_download_enabled(self) -> bool: ...

    def is_app_permissions_changed(self) -> bool: ...

    def is_camera_uploads_policy_changed(self) -> bool: ...

    def is_capture_transcript_policy_changed(self) -> bool: ...

    def is_classification_change_policy(self) -> bool: ...

    def is_computer_backup_policy_changed(self) -> bool: ...

    def is_content_administration_policy_changed(self) -> bool: ...

    def is_data_placement_restriction_change_policy(self) -> bool: ...

    def is_data_placement_restriction_satisfy_policy(self) -> bool: ...

    def is_device_approvals_add_exception(self) -> bool: ...

    def is_device_approvals_change_desktop_policy(self) -> bool: ...

    def is_device_approvals_change_mobile_policy(self) -> bool: ...

    def is_device_approvals_change_overage_action(self) -> bool: ...

    def is_device_approvals_change_unlink_action(self) -> bool: ...

    def is_device_approvals_remove_exception(self) -> bool: ...

    def is_directory_restrictions_add_members(self) -> bool: ...

    def is_directory_restrictions_remove_members(self) -> bool: ...

    def is_email_ingest_policy_changed(self) -> bool: ...

    def is_emm_add_exception(self) -> bool: ...

    def is_emm_change_policy(self) -> bool: ...

    def is_emm_remove_exception(self) -> bool: ...

    def is_extended_version_history_change_policy(self) -> bool: ...

    def is_external_drive_backup_policy_changed(self) -> bool: ...

    def is_file_comments_change_policy(self) -> bool: ...

    def is_file_locking_policy_changed(self) -> bool: ...

    def is_file_requests_change_policy(self) -> bool: ...

    def is_file_requests_emails_enabled(self) -> bool: ...

    def is_file_requests_emails_restricted_to_team_only(self) -> bool: ...

    def is_file_transfers_policy_changed(self) -> bool: ...

    def is_google_sso_change_policy(self) -> bool: ...

    def is_group_user_management_change_policy(self) -> bool: ...

    def is_integration_policy_changed(self) -> bool: ...

    def is_invite_acceptance_email_policy_changed(self) -> bool: ...

    def is_member_requests_change_policy(self) -> bool: ...

    def is_member_send_invite_policy_changed(self) -> bool: ...

    def is_member_space_limits_add_exception(self) -> bool: ...

    def is_member_space_limits_change_caps_type_policy(self) -> bool: ...

    def is_member_space_limits_change_policy(self) -> bool: ...

    def is_member_space_limits_remove_exception(self) -> bool: ...

    def is_member_suggestions_change_policy(self) -> bool: ...

    def is_microsoft_office_addin_change_policy(self) -> bool: ...

    def is_network_control_change_policy(self) -> bool: ...

    def is_paper_change_deployment_policy(self) -> bool: ...

    def is_paper_change_member_link_policy(self) -> bool: ...

    def is_paper_change_member_policy(self) -> bool: ...

    def is_paper_change_policy(self) -> bool: ...

    def is_paper_default_folder_policy_changed(self) -> bool: ...

    def is_paper_desktop_policy_changed(self) -> bool: ...

    def is_paper_enabled_users_group_addition(self) -> bool: ...

    def is_paper_enabled_users_group_removal(self) -> bool: ...

    def is_password_strength_requirements_change_policy(self) -> bool: ...

    def is_permanent_delete_change_policy(self) -> bool: ...

    def is_reseller_support_change_policy(self) -> bool: ...

    def is_rewind_policy_changed(self) -> bool: ...

    def is_send_for_signature_policy_changed(self) -> bool: ...

    def is_sharing_change_folder_join_policy(self) -> bool: ...

    def is_sharing_change_link_allow_change_expiration_policy(self) -> bool: ...

    def is_sharing_change_link_default_expiration_policy(self) -> bool: ...

    def is_sharing_change_link_enforce_password_policy(self) -> bool: ...

    def is_sharing_change_link_policy(self) -> bool: ...

    def is_sharing_change_member_policy(self) -> bool: ...

    def is_showcase_change_download_policy(self) -> bool: ...

    def is_showcase_change_enabled_policy(self) -> bool: ...

    def is_showcase_change_external_sharing_policy(self) -> bool: ...

    def is_smarter_smart_sync_policy_changed(self) -> bool: ...

    def is_smart_sync_change_policy(self) -> bool: ...

    def is_smart_sync_not_opt_out(self) -> bool: ...

    def is_smart_sync_opt_out(self) -> bool: ...

    def is_sso_change_policy(self) -> bool: ...

    def is_team_branding_policy_changed(self) -> bool: ...

    def is_team_extensions_policy_changed(self) -> bool: ...

    def is_team_selective_sync_policy_changed(self) -> bool: ...

    def is_team_sharing_whitelist_subjects_changed(self) -> bool: ...

    def is_tfa_add_exception(self) -> bool: ...

    def is_tfa_change_policy(self) -> bool: ...

    def is_tfa_remove_exception(self) -> bool: ...

    def is_two_account_change_policy(self) -> bool: ...

    def is_viewer_info_policy_changed(self) -> bool: ...

    def is_watermarking_policy_changed(self) -> bool: ...

    def is_web_sessions_change_active_session_limit(self) -> bool: ...

    def is_web_sessions_change_fixed_length_policy(self) -> bool: ...

    def is_web_sessions_change_idle_length_policy(self) -> bool: ...

    def is_data_residency_migration_request_successful(self) -> bool: ...

    def is_data_residency_migration_request_unsuccessful(self) -> bool: ...

    def is_team_merge_from(self) -> bool: ...

    def is_team_merge_to(self) -> bool: ...

    def is_team_profile_add_background(self) -> bool: ...

    def is_team_profile_add_logo(self) -> bool: ...

    def is_team_profile_change_background(self) -> bool: ...

    def is_team_profile_change_default_language(self) -> bool: ...

    def is_team_profile_change_logo(self) -> bool: ...

    def is_team_profile_change_name(self) -> bool: ...

    def is_team_profile_remove_background(self) -> bool: ...

    def is_team_profile_remove_logo(self) -> bool: ...

    def is_tfa_add_backup_phone(self) -> bool: ...

    def is_tfa_add_security_key(self) -> bool: ...

    def is_tfa_change_backup_phone(self) -> bool: ...

    def is_tfa_change_status(self) -> bool: ...

    def is_tfa_remove_backup_phone(self) -> bool: ...

    def is_tfa_remove_security_key(self) -> bool: ...

    def is_tfa_reset(self) -> bool: ...

    def is_changed_enterprise_admin_role(self) -> bool: ...

    def is_changed_enterprise_connected_team_status(self) -> bool: ...

    def is_ended_enterprise_admin_session(self) -> bool: ...

    def is_ended_enterprise_admin_session_deprecated(self) -> bool: ...

    def is_enterprise_settings_locking(self) -> bool: ...

    def is_guest_admin_change_status(self) -> bool: ...

    def is_started_enterprise_admin_session(self) -> bool: ...

    def is_team_merge_request_accepted(self) -> bool: ...

    def is_team_merge_request_accepted_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_accepted_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_auto_canceled(self) -> bool: ...

    def is_team_merge_request_canceled(self) -> bool: ...

    def is_team_merge_request_canceled_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_canceled_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_expired(self) -> bool: ...

    def is_team_merge_request_expired_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_expired_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_rejected_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_rejected_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_reminder(self) -> bool: ...

    def is_team_merge_request_reminder_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_reminder_shown_to_secondary_team(self) -> bool: ...

    def is_team_merge_request_revoked(self) -> bool: ...

    def is_team_merge_request_sent_shown_to_primary_team(self) -> bool: ...

    def is_team_merge_request_sent_shown_to_secondary_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EventTypeArg_validator: bv.Validator = ...

class ExportMembersReportDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExportMembersReportDetails_validator: bv.Validator = ...

class ExportMembersReportFailDetails(bb.Struct):
    def __init__(self,
                 failure_reason: team.TeamReportFailureReason = ...) -> None: ...
    failure_reason: bb.Attribute[team.TeamReportFailureReason] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExportMembersReportFailDetails_validator: bv.Validator = ...

class ExportMembersReportFailType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExportMembersReportFailType_validator: bv.Validator = ...

class ExportMembersReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExportMembersReportType_validator: bv.Validator = ...

class ExtendedVersionHistoryChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: ExtendedVersionHistoryPolicy = ...,
                 previous_value: Optional[ExtendedVersionHistoryPolicy] = ...) -> None: ...
    new_value: bb.Attribute[ExtendedVersionHistoryPolicy] = ...
    previous_value: bb.Attribute[Optional[ExtendedVersionHistoryPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExtendedVersionHistoryChangePolicyDetails_validator: bv.Validator = ...

class ExtendedVersionHistoryChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExtendedVersionHistoryChangePolicyType_validator: bv.Validator = ...

class ExtendedVersionHistoryPolicy(bb.Union):
    explicitly_limited: ExtendedVersionHistoryPolicy = ...
    explicitly_unlimited: ExtendedVersionHistoryPolicy = ...
    implicitly_limited: ExtendedVersionHistoryPolicy = ...
    implicitly_unlimited: ExtendedVersionHistoryPolicy = ...
    other: ExtendedVersionHistoryPolicy = ...

    def is_explicitly_limited(self) -> bool: ...

    def is_explicitly_unlimited(self) -> bool: ...

    def is_implicitly_limited(self) -> bool: ...

    def is_implicitly_unlimited(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExtendedVersionHistoryPolicy_validator: bv.Validator = ...

class ExternalDriveBackupPolicy(bb.Union):
    default: ExternalDriveBackupPolicy = ...
    disabled: ExternalDriveBackupPolicy = ...
    enabled: ExternalDriveBackupPolicy = ...
    other: ExternalDriveBackupPolicy = ...

    def is_default(self) -> bool: ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExternalDriveBackupPolicy_validator: bv.Validator = ...

class ExternalDriveBackupPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: ExternalDriveBackupPolicy = ...,
                 previous_value: ExternalDriveBackupPolicy = ...) -> None: ...
    new_value: bb.Attribute[ExternalDriveBackupPolicy] = ...
    previous_value: bb.Attribute[ExternalDriveBackupPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExternalDriveBackupPolicyChangedDetails_validator: bv.Validator = ...

class ExternalDriveBackupPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExternalDriveBackupPolicyChangedType_validator: bv.Validator = ...

class ExternalSharingCreateReportDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExternalSharingCreateReportDetails_validator: bv.Validator = ...

class ExternalSharingCreateReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExternalSharingCreateReportType_validator: bv.Validator = ...

class ExternalSharingReportFailedDetails(bb.Struct):
    def __init__(self,
                 failure_reason: team.TeamReportFailureReason = ...) -> None: ...
    failure_reason: bb.Attribute[team.TeamReportFailureReason] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExternalSharingReportFailedDetails_validator: bv.Validator = ...

class ExternalSharingReportFailedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExternalSharingReportFailedType_validator: bv.Validator = ...

class ExternalUserLogInfo(bb.Struct):
    def __init__(self,
                 user_identifier: Text = ...,
                 identifier_type: IdentifierType = ...) -> None: ...
    user_identifier: bb.Attribute[Text] = ...
    identifier_type: bb.Attribute[IdentifierType] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExternalUserLogInfo_validator: bv.Validator = ...

class FailureDetailsLogInfo(bb.Struct):
    def __init__(self,
                 user_friendly_message: Optional[Text] = ...,
                 technical_error_message: Optional[Text] = ...) -> None: ...
    user_friendly_message: bb.Attribute[Optional[Text]] = ...
    technical_error_message: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FailureDetailsLogInfo_validator: bv.Validator = ...

class FedAdminRole(bb.Union):
    enterprise_admin: FedAdminRole = ...
    not_enterprise_admin: FedAdminRole = ...
    other: FedAdminRole = ...

    def is_enterprise_admin(self) -> bool: ...

    def is_not_enterprise_admin(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FedAdminRole_validator: bv.Validator = ...

class FedExtraDetails(bb.Union):
    other: FedExtraDetails = ...

    def is_organization(self) -> bool: ...

    def is_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def organization(cls, val: OrganizationDetails) -> FedExtraDetails: ...

    @classmethod
    def team(cls, val: TeamDetails) -> FedExtraDetails: ...

    def get_organization(self) -> OrganizationDetails: ...

    def get_team(self) -> TeamDetails: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FedExtraDetails_validator: bv.Validator = ...

class FedHandshakeAction(bb.Union):
    accepted_invite: FedHandshakeAction = ...
    canceled_invite: FedHandshakeAction = ...
    invite_expired: FedHandshakeAction = ...
    invited: FedHandshakeAction = ...
    rejected_invite: FedHandshakeAction = ...
    removed_team: FedHandshakeAction = ...
    other: FedHandshakeAction = ...

    def is_accepted_invite(self) -> bool: ...

    def is_canceled_invite(self) -> bool: ...

    def is_invite_expired(self) -> bool: ...

    def is_invited(self) -> bool: ...

    def is_rejected_invite(self) -> bool: ...

    def is_removed_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FedHandshakeAction_validator: bv.Validator = ...

class FederationStatusChangeAdditionalInfo(bb.Union):
    other: FederationStatusChangeAdditionalInfo = ...

    def is_connected_team_name(self) -> bool: ...

    def is_non_trusted_team_details(self) -> bool: ...

    def is_organization_name(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def connected_team_name(cls, val: ConnectedTeamName) -> FederationStatusChangeAdditionalInfo: ...

    @classmethod
    def non_trusted_team_details(cls, val: NonTrustedTeamDetails) -> FederationStatusChangeAdditionalInfo: ...

    @classmethod
    def organization_name(cls, val: OrganizationName) -> FederationStatusChangeAdditionalInfo: ...

    def get_connected_team_name(self) -> ConnectedTeamName: ...

    def get_non_trusted_team_details(self) -> NonTrustedTeamDetails: ...

    def get_organization_name(self) -> OrganizationName: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FederationStatusChangeAdditionalInfo_validator: bv.Validator = ...

class FileAddCommentDetails(bb.Struct):
    def __init__(self,
                 comment_text: Optional[Text] = ...) -> None: ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileAddCommentDetails_validator: bv.Validator = ...

class FileAddCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileAddCommentType_validator: bv.Validator = ...

class FileAddDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileAddDetails_validator: bv.Validator = ...

class FileAddType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileAddType_validator: bv.Validator = ...

class FileChangeCommentSubscriptionDetails(bb.Struct):
    def __init__(self,
                 new_value: FileCommentNotificationPolicy = ...,
                 previous_value: Optional[FileCommentNotificationPolicy] = ...) -> None: ...
    new_value: bb.Attribute[FileCommentNotificationPolicy] = ...
    previous_value: bb.Attribute[Optional[FileCommentNotificationPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileChangeCommentSubscriptionDetails_validator: bv.Validator = ...

class FileChangeCommentSubscriptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileChangeCommentSubscriptionType_validator: bv.Validator = ...

class FileCommentNotificationPolicy(bb.Union):
    disabled: FileCommentNotificationPolicy = ...
    enabled: FileCommentNotificationPolicy = ...
    other: FileCommentNotificationPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileCommentNotificationPolicy_validator: bv.Validator = ...

class FileCommentsChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: FileCommentsPolicy = ...,
                 previous_value: Optional[FileCommentsPolicy] = ...) -> None: ...
    new_value: bb.Attribute[FileCommentsPolicy] = ...
    previous_value: bb.Attribute[Optional[FileCommentsPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileCommentsChangePolicyDetails_validator: bv.Validator = ...

class FileCommentsChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileCommentsChangePolicyType_validator: bv.Validator = ...

class FileCommentsPolicy(bb.Union):
    disabled: FileCommentsPolicy = ...
    enabled: FileCommentsPolicy = ...
    other: FileCommentsPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileCommentsPolicy_validator: bv.Validator = ...

class FileCopyDetails(bb.Struct):
    def __init__(self,
                 relocate_action_details: List[RelocateAssetReferencesLogInfo] = ...) -> None: ...
    relocate_action_details: bb.Attribute[List[RelocateAssetReferencesLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileCopyDetails_validator: bv.Validator = ...

class FileCopyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileCopyType_validator: bv.Validator = ...

class FileDeleteCommentDetails(bb.Struct):
    def __init__(self,
                 comment_text: Optional[Text] = ...) -> None: ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileDeleteCommentDetails_validator: bv.Validator = ...

class FileDeleteCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileDeleteCommentType_validator: bv.Validator = ...

class FileDeleteDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileDeleteDetails_validator: bv.Validator = ...

class FileDeleteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileDeleteType_validator: bv.Validator = ...

class FileDownloadDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileDownloadDetails_validator: bv.Validator = ...

class FileDownloadType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileDownloadType_validator: bv.Validator = ...

class FileEditCommentDetails(bb.Struct):
    def __init__(self,
                 previous_comment_text: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    previous_comment_text: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileEditCommentDetails_validator: bv.Validator = ...

class FileEditCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileEditCommentType_validator: bv.Validator = ...

class FileEditDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileEditDetails_validator: bv.Validator = ...

class FileEditType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileEditType_validator: bv.Validator = ...

class FileGetCopyReferenceDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileGetCopyReferenceDetails_validator: bv.Validator = ...

class FileGetCopyReferenceType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileGetCopyReferenceType_validator: bv.Validator = ...

class FileLikeCommentDetails(bb.Struct):
    def __init__(self,
                 comment_text: Optional[Text] = ...) -> None: ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileLikeCommentDetails_validator: bv.Validator = ...

class FileLikeCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileLikeCommentType_validator: bv.Validator = ...

class FileLockingLockStatusChangedDetails(bb.Struct):
    def __init__(self,
                 previous_value: LockStatus = ...,
                 new_value: LockStatus = ...) -> None: ...
    previous_value: bb.Attribute[LockStatus] = ...
    new_value: bb.Attribute[LockStatus] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileLockingLockStatusChangedDetails_validator: bv.Validator = ...

class FileLockingLockStatusChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileLockingLockStatusChangedType_validator: bv.Validator = ...

class FileLockingPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: team_policies.FileLockingPolicyState = ...,
                 previous_value: team_policies.FileLockingPolicyState = ...) -> None: ...
    new_value: bb.Attribute[team_policies.FileLockingPolicyState] = ...
    previous_value: bb.Attribute[team_policies.FileLockingPolicyState] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileLockingPolicyChangedDetails_validator: bv.Validator = ...

class FileLockingPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileLockingPolicyChangedType_validator: bv.Validator = ...

class FileOrFolderLogInfo(bb.Struct):
    def __init__(self,
                 path: PathLogInfo = ...,
                 display_name: Optional[Text] = ...,
                 file_id: Optional[Text] = ...,
                 file_size: Optional[int] = ...) -> None: ...
    path: bb.Attribute[PathLogInfo] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    file_id: bb.Attribute[Optional[Text]] = ...
    file_size: bb.Attribute[Optional[int]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileOrFolderLogInfo_validator: bv.Validator = ...

class FileLogInfo(FileOrFolderLogInfo):
    def __init__(self,
                 path: PathLogInfo = ...,
                 display_name: Optional[Text] = ...,
                 file_id: Optional[Text] = ...,
                 file_size: Optional[int] = ...) -> None: ...
    path: bb.Attribute[PathLogInfo] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    file_id: bb.Attribute[Optional[Text]] = ...
    file_size: bb.Attribute[Optional[int]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileLogInfo_validator: bv.Validator = ...

class FileMoveDetails(bb.Struct):
    def __init__(self,
                 relocate_action_details: List[RelocateAssetReferencesLogInfo] = ...) -> None: ...
    relocate_action_details: bb.Attribute[List[RelocateAssetReferencesLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileMoveDetails_validator: bv.Validator = ...

class FileMoveType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileMoveType_validator: bv.Validator = ...

class FilePermanentlyDeleteDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FilePermanentlyDeleteDetails_validator: bv.Validator = ...

class FilePermanentlyDeleteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FilePermanentlyDeleteType_validator: bv.Validator = ...

class FilePreviewDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FilePreviewDetails_validator: bv.Validator = ...

class FilePreviewType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FilePreviewType_validator: bv.Validator = ...

class FileRenameDetails(bb.Struct):
    def __init__(self,
                 relocate_action_details: List[RelocateAssetReferencesLogInfo] = ...) -> None: ...
    relocate_action_details: bb.Attribute[List[RelocateAssetReferencesLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRenameDetails_validator: bv.Validator = ...

class FileRenameType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRenameType_validator: bv.Validator = ...

class FileRequestChangeDetails(bb.Struct):
    def __init__(self,
                 new_details: FileRequestDetails = ...,
                 file_request_id: Optional[Text] = ...,
                 previous_details: Optional[FileRequestDetails] = ...) -> None: ...
    new_details: bb.Attribute[FileRequestDetails] = ...
    file_request_id: bb.Attribute[Optional[Text]] = ...
    previous_details: bb.Attribute[Optional[FileRequestDetails]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestChangeDetails_validator: bv.Validator = ...

class FileRequestChangeType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestChangeType_validator: bv.Validator = ...

class FileRequestCloseDetails(bb.Struct):
    def __init__(self,
                 file_request_id: Optional[Text] = ...,
                 previous_details: Optional[FileRequestDetails] = ...) -> None: ...
    file_request_id: bb.Attribute[Optional[Text]] = ...
    previous_details: bb.Attribute[Optional[FileRequestDetails]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestCloseDetails_validator: bv.Validator = ...

class FileRequestCloseType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestCloseType_validator: bv.Validator = ...

class FileRequestCreateDetails(bb.Struct):
    def __init__(self,
                 file_request_id: Optional[Text] = ...,
                 request_details: Optional[FileRequestDetails] = ...) -> None: ...
    file_request_id: bb.Attribute[Optional[Text]] = ...
    request_details: bb.Attribute[Optional[FileRequestDetails]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestCreateDetails_validator: bv.Validator = ...

class FileRequestCreateType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestCreateType_validator: bv.Validator = ...

class FileRequestDeadline(bb.Struct):
    def __init__(self,
                 deadline: Optional[datetime.datetime] = ...,
                 allow_late_uploads: Optional[Text] = ...) -> None: ...
    deadline: bb.Attribute[Optional[datetime.datetime]] = ...
    allow_late_uploads: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestDeadline_validator: bv.Validator = ...

class FileRequestDeleteDetails(bb.Struct):
    def __init__(self,
                 file_request_id: Optional[Text] = ...,
                 previous_details: Optional[FileRequestDetails] = ...) -> None: ...
    file_request_id: bb.Attribute[Optional[Text]] = ...
    previous_details: bb.Attribute[Optional[FileRequestDetails]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestDeleteDetails_validator: bv.Validator = ...

class FileRequestDeleteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestDeleteType_validator: bv.Validator = ...

class FileRequestDetails(bb.Struct):
    def __init__(self,
                 asset_index: int = ...,
                 deadline: Optional[FileRequestDeadline] = ...) -> None: ...
    asset_index: bb.Attribute[int] = ...
    deadline: bb.Attribute[Optional[FileRequestDeadline]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestDetails_validator: bv.Validator = ...

class FileRequestReceiveFileDetails(bb.Struct):
    def __init__(self,
                 submitted_file_names: List[Text] = ...,
                 file_request_id: Optional[Text] = ...,
                 file_request_details: Optional[FileRequestDetails] = ...,
                 submitter_name: Optional[Text] = ...,
                 submitter_email: Optional[Text] = ...) -> None: ...
    submitted_file_names: bb.Attribute[List[Text]] = ...
    file_request_id: bb.Attribute[Optional[Text]] = ...
    file_request_details: bb.Attribute[Optional[FileRequestDetails]] = ...
    submitter_name: bb.Attribute[Optional[Text]] = ...
    submitter_email: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestReceiveFileDetails_validator: bv.Validator = ...

class FileRequestReceiveFileType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestReceiveFileType_validator: bv.Validator = ...

class FileRequestsChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: FileRequestsPolicy = ...,
                 previous_value: Optional[FileRequestsPolicy] = ...) -> None: ...
    new_value: bb.Attribute[FileRequestsPolicy] = ...
    previous_value: bb.Attribute[Optional[FileRequestsPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestsChangePolicyDetails_validator: bv.Validator = ...

class FileRequestsChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestsChangePolicyType_validator: bv.Validator = ...

class FileRequestsEmailsEnabledDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestsEmailsEnabledDetails_validator: bv.Validator = ...

class FileRequestsEmailsEnabledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestsEmailsEnabledType_validator: bv.Validator = ...

class FileRequestsEmailsRestrictedToTeamOnlyDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestsEmailsRestrictedToTeamOnlyDetails_validator: bv.Validator = ...

class FileRequestsEmailsRestrictedToTeamOnlyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestsEmailsRestrictedToTeamOnlyType_validator: bv.Validator = ...

class FileRequestsPolicy(bb.Union):
    disabled: FileRequestsPolicy = ...
    enabled: FileRequestsPolicy = ...
    other: FileRequestsPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestsPolicy_validator: bv.Validator = ...

class FileResolveCommentDetails(bb.Struct):
    def __init__(self,
                 comment_text: Optional[Text] = ...) -> None: ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileResolveCommentDetails_validator: bv.Validator = ...

class FileResolveCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileResolveCommentType_validator: bv.Validator = ...

class FileRestoreDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRestoreDetails_validator: bv.Validator = ...

class FileRestoreType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRestoreType_validator: bv.Validator = ...

class FileRevertDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRevertDetails_validator: bv.Validator = ...

class FileRevertType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRevertType_validator: bv.Validator = ...

class FileRollbackChangesDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRollbackChangesDetails_validator: bv.Validator = ...

class FileRollbackChangesType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRollbackChangesType_validator: bv.Validator = ...

class FileSaveCopyReferenceDetails(bb.Struct):
    def __init__(self,
                 relocate_action_details: List[RelocateAssetReferencesLogInfo] = ...) -> None: ...
    relocate_action_details: bb.Attribute[List[RelocateAssetReferencesLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileSaveCopyReferenceDetails_validator: bv.Validator = ...

class FileSaveCopyReferenceType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileSaveCopyReferenceType_validator: bv.Validator = ...

class FileTransfersFileAddDetails(bb.Struct):
    def __init__(self,
                 file_transfer_id: Text = ...) -> None: ...
    file_transfer_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersFileAddDetails_validator: bv.Validator = ...

class FileTransfersFileAddType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersFileAddType_validator: bv.Validator = ...

class FileTransfersPolicy(bb.Union):
    disabled: FileTransfersPolicy = ...
    enabled: FileTransfersPolicy = ...
    other: FileTransfersPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersPolicy_validator: bv.Validator = ...

class FileTransfersPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: FileTransfersPolicy = ...,
                 previous_value: FileTransfersPolicy = ...) -> None: ...
    new_value: bb.Attribute[FileTransfersPolicy] = ...
    previous_value: bb.Attribute[FileTransfersPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersPolicyChangedDetails_validator: bv.Validator = ...

class FileTransfersPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersPolicyChangedType_validator: bv.Validator = ...

class FileTransfersTransferDeleteDetails(bb.Struct):
    def __init__(self,
                 file_transfer_id: Text = ...) -> None: ...
    file_transfer_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersTransferDeleteDetails_validator: bv.Validator = ...

class FileTransfersTransferDeleteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersTransferDeleteType_validator: bv.Validator = ...

class FileTransfersTransferDownloadDetails(bb.Struct):
    def __init__(self,
                 file_transfer_id: Text = ...) -> None: ...
    file_transfer_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersTransferDownloadDetails_validator: bv.Validator = ...

class FileTransfersTransferDownloadType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersTransferDownloadType_validator: bv.Validator = ...

class FileTransfersTransferSendDetails(bb.Struct):
    def __init__(self,
                 file_transfer_id: Text = ...) -> None: ...
    file_transfer_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersTransferSendDetails_validator: bv.Validator = ...

class FileTransfersTransferSendType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersTransferSendType_validator: bv.Validator = ...

class FileTransfersTransferViewDetails(bb.Struct):
    def __init__(self,
                 file_transfer_id: Text = ...) -> None: ...
    file_transfer_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersTransferViewDetails_validator: bv.Validator = ...

class FileTransfersTransferViewType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileTransfersTransferViewType_validator: bv.Validator = ...

class FileUnlikeCommentDetails(bb.Struct):
    def __init__(self,
                 comment_text: Optional[Text] = ...) -> None: ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileUnlikeCommentDetails_validator: bv.Validator = ...

class FileUnlikeCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileUnlikeCommentType_validator: bv.Validator = ...

class FileUnresolveCommentDetails(bb.Struct):
    def __init__(self,
                 comment_text: Optional[Text] = ...) -> None: ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileUnresolveCommentDetails_validator: bv.Validator = ...

class FileUnresolveCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileUnresolveCommentType_validator: bv.Validator = ...

class FolderLogInfo(FileOrFolderLogInfo):
    def __init__(self,
                 path: PathLogInfo = ...,
                 display_name: Optional[Text] = ...,
                 file_id: Optional[Text] = ...,
                 file_size: Optional[int] = ...,
                 file_count: Optional[int] = ...) -> None: ...
    path: bb.Attribute[PathLogInfo] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    file_id: bb.Attribute[Optional[Text]] = ...
    file_size: bb.Attribute[Optional[int]] = ...
    file_count: bb.Attribute[Optional[int]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FolderLogInfo_validator: bv.Validator = ...

class FolderOverviewDescriptionChangedDetails(bb.Struct):
    def __init__(self,
                 folder_overview_location_asset: int = ...) -> None: ...
    folder_overview_location_asset: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FolderOverviewDescriptionChangedDetails_validator: bv.Validator = ...

class FolderOverviewDescriptionChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FolderOverviewDescriptionChangedType_validator: bv.Validator = ...

class FolderOverviewItemPinnedDetails(bb.Struct):
    def __init__(self,
                 folder_overview_location_asset: int = ...,
                 pinned_items_asset_indices: List[int] = ...) -> None: ...
    folder_overview_location_asset: bb.Attribute[int] = ...
    pinned_items_asset_indices: bb.Attribute[List[int]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FolderOverviewItemPinnedDetails_validator: bv.Validator = ...

class FolderOverviewItemPinnedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FolderOverviewItemPinnedType_validator: bv.Validator = ...

class FolderOverviewItemUnpinnedDetails(bb.Struct):
    def __init__(self,
                 folder_overview_location_asset: int = ...,
                 pinned_items_asset_indices: List[int] = ...) -> None: ...
    folder_overview_location_asset: bb.Attribute[int] = ...
    pinned_items_asset_indices: bb.Attribute[List[int]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FolderOverviewItemUnpinnedDetails_validator: bv.Validator = ...

class FolderOverviewItemUnpinnedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FolderOverviewItemUnpinnedType_validator: bv.Validator = ...

class GeoLocationLogInfo(bb.Struct):
    def __init__(self,
                 ip_address: Text = ...,
                 city: Optional[Text] = ...,
                 region: Optional[Text] = ...,
                 country: Optional[Text] = ...) -> None: ...
    ip_address: bb.Attribute[Text] = ...
    city: bb.Attribute[Optional[Text]] = ...
    region: bb.Attribute[Optional[Text]] = ...
    country: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GeoLocationLogInfo_validator: bv.Validator = ...

class GetTeamEventsArg(bb.Struct):
    def __init__(self,
                 limit: Optional[int] = ...,
                 account_id: Optional[Text] = ...,
                 time: Optional[team_common.TimeRange] = ...,
                 category: Optional[EventCategory] = ...,
                 event_type: Optional[EventTypeArg] = ...) -> None: ...
    limit: bb.Attribute[int] = ...
    account_id: bb.Attribute[Optional[Text]] = ...
    time: bb.Attribute[Optional[team_common.TimeRange]] = ...
    category: bb.Attribute[Optional[EventCategory]] = ...
    event_type: bb.Attribute[Optional[EventTypeArg]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GetTeamEventsArg_validator: bv.Validator = ...

class GetTeamEventsContinueArg(bb.Struct):
    def __init__(self,
                 cursor: Text = ...) -> None: ...
    cursor: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GetTeamEventsContinueArg_validator: bv.Validator = ...

class GetTeamEventsContinueError(bb.Union):
    bad_cursor: GetTeamEventsContinueError = ...
    other: GetTeamEventsContinueError = ...

    def is_bad_cursor(self) -> bool: ...

    def is_reset(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def reset(cls, val: datetime.datetime) -> GetTeamEventsContinueError: ...

    def get_reset(self) -> datetime.datetime: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GetTeamEventsContinueError_validator: bv.Validator = ...

class GetTeamEventsError(bb.Union):
    account_id_not_found: GetTeamEventsError = ...
    invalid_time_range: GetTeamEventsError = ...
    invalid_filters: GetTeamEventsError = ...
    other: GetTeamEventsError = ...

    def is_account_id_not_found(self) -> bool: ...

    def is_invalid_time_range(self) -> bool: ...

    def is_invalid_filters(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GetTeamEventsError_validator: bv.Validator = ...

class GetTeamEventsResult(bb.Struct):
    def __init__(self,
                 events: List[TeamEvent] = ...,
                 cursor: Text = ...,
                 has_more: bool = ...) -> None: ...
    events: bb.Attribute[List[TeamEvent]] = ...
    cursor: bb.Attribute[Text] = ...
    has_more: bb.Attribute[bool] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GetTeamEventsResult_validator: bv.Validator = ...

class GoogleSsoChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: GoogleSsoPolicy = ...,
                 previous_value: Optional[GoogleSsoPolicy] = ...) -> None: ...
    new_value: bb.Attribute[GoogleSsoPolicy] = ...
    previous_value: bb.Attribute[Optional[GoogleSsoPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GoogleSsoChangePolicyDetails_validator: bv.Validator = ...

class GoogleSsoChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GoogleSsoChangePolicyType_validator: bv.Validator = ...

class GoogleSsoPolicy(bb.Union):
    disabled: GoogleSsoPolicy = ...
    enabled: GoogleSsoPolicy = ...
    other: GoogleSsoPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GoogleSsoPolicy_validator: bv.Validator = ...

class GovernancePolicyAddFolderFailedDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 folder: Text = ...,
                 policy_type: Optional[PolicyType] = ...,
                 reason: Optional[Text] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    folder: bb.Attribute[Text] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    reason: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyAddFolderFailedDetails_validator: bv.Validator = ...

class GovernancePolicyAddFolderFailedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyAddFolderFailedType_validator: bv.Validator = ...

class GovernancePolicyAddFoldersDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 policy_type: Optional[PolicyType] = ...,
                 folders: Optional[List[Text]] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    folders: bb.Attribute[Optional[List[Text]]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyAddFoldersDetails_validator: bv.Validator = ...

class GovernancePolicyAddFoldersType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyAddFoldersType_validator: bv.Validator = ...

class GovernancePolicyContentDisposedDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 disposition_type: DispositionActionType = ...,
                 policy_type: Optional[PolicyType] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    disposition_type: bb.Attribute[DispositionActionType] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyContentDisposedDetails_validator: bv.Validator = ...

class GovernancePolicyContentDisposedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyContentDisposedType_validator: bv.Validator = ...

class GovernancePolicyCreateDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 duration: DurationLogInfo = ...,
                 policy_type: Optional[PolicyType] = ...,
                 folders: Optional[List[Text]] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    duration: bb.Attribute[DurationLogInfo] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    folders: bb.Attribute[Optional[List[Text]]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyCreateDetails_validator: bv.Validator = ...

class GovernancePolicyCreateType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyCreateType_validator: bv.Validator = ...

class GovernancePolicyDeleteDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 policy_type: Optional[PolicyType] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyDeleteDetails_validator: bv.Validator = ...

class GovernancePolicyDeleteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyDeleteType_validator: bv.Validator = ...

class GovernancePolicyEditDetailsDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 attribute: Text = ...,
                 previous_value: Text = ...,
                 new_value: Text = ...,
                 policy_type: Optional[PolicyType] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    attribute: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[Text] = ...
    new_value: bb.Attribute[Text] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyEditDetailsDetails_validator: bv.Validator = ...

class GovernancePolicyEditDetailsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyEditDetailsType_validator: bv.Validator = ...

class GovernancePolicyEditDurationDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 previous_value: DurationLogInfo = ...,
                 new_value: DurationLogInfo = ...,
                 policy_type: Optional[PolicyType] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[DurationLogInfo] = ...
    new_value: bb.Attribute[DurationLogInfo] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyEditDurationDetails_validator: bv.Validator = ...

class GovernancePolicyEditDurationType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyEditDurationType_validator: bv.Validator = ...

class GovernancePolicyExportCreatedDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 export_name: Text = ...,
                 policy_type: Optional[PolicyType] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    export_name: bb.Attribute[Text] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyExportCreatedDetails_validator: bv.Validator = ...

class GovernancePolicyExportCreatedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyExportCreatedType_validator: bv.Validator = ...

class GovernancePolicyExportRemovedDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 export_name: Text = ...,
                 policy_type: Optional[PolicyType] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    export_name: bb.Attribute[Text] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyExportRemovedDetails_validator: bv.Validator = ...

class GovernancePolicyExportRemovedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyExportRemovedType_validator: bv.Validator = ...

class GovernancePolicyRemoveFoldersDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 policy_type: Optional[PolicyType] = ...,
                 folders: Optional[List[Text]] = ...,
                 reason: Optional[Text] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    folders: bb.Attribute[Optional[List[Text]]] = ...
    reason: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyRemoveFoldersDetails_validator: bv.Validator = ...

class GovernancePolicyRemoveFoldersType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyRemoveFoldersType_validator: bv.Validator = ...

class GovernancePolicyReportCreatedDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 policy_type: Optional[PolicyType] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyReportCreatedDetails_validator: bv.Validator = ...

class GovernancePolicyReportCreatedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyReportCreatedType_validator: bv.Validator = ...

class GovernancePolicyZipPartDownloadedDetails(bb.Struct):
    def __init__(self,
                 governance_policy_id: Text = ...,
                 name: Text = ...,
                 export_name: Text = ...,
                 policy_type: Optional[PolicyType] = ...,
                 part: Optional[Text] = ...) -> None: ...
    governance_policy_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    export_name: bb.Attribute[Text] = ...
    policy_type: bb.Attribute[Optional[PolicyType]] = ...
    part: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyZipPartDownloadedDetails_validator: bv.Validator = ...

class GovernancePolicyZipPartDownloadedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GovernancePolicyZipPartDownloadedType_validator: bv.Validator = ...

class GroupAddExternalIdDetails(bb.Struct):
    def __init__(self,
                 new_value: Text = ...) -> None: ...
    new_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupAddExternalIdDetails_validator: bv.Validator = ...

class GroupAddExternalIdType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupAddExternalIdType_validator: bv.Validator = ...

class GroupAddMemberDetails(bb.Struct):
    def __init__(self,
                 is_group_owner: bool = ...) -> None: ...
    is_group_owner: bb.Attribute[bool] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupAddMemberDetails_validator: bv.Validator = ...

class GroupAddMemberType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupAddMemberType_validator: bv.Validator = ...

class GroupChangeExternalIdDetails(bb.Struct):
    def __init__(self,
                 new_value: Text = ...,
                 previous_value: Text = ...) -> None: ...
    new_value: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupChangeExternalIdDetails_validator: bv.Validator = ...

class GroupChangeExternalIdType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupChangeExternalIdType_validator: bv.Validator = ...

class GroupChangeManagementTypeDetails(bb.Struct):
    def __init__(self,
                 new_value: team_common.GroupManagementType = ...,
                 previous_value: Optional[team_common.GroupManagementType] = ...) -> None: ...
    new_value: bb.Attribute[team_common.GroupManagementType] = ...
    previous_value: bb.Attribute[Optional[team_common.GroupManagementType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupChangeManagementTypeDetails_validator: bv.Validator = ...

class GroupChangeManagementTypeType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupChangeManagementTypeType_validator: bv.Validator = ...

class GroupChangeMemberRoleDetails(bb.Struct):
    def __init__(self,
                 is_group_owner: bool = ...) -> None: ...
    is_group_owner: bb.Attribute[bool] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupChangeMemberRoleDetails_validator: bv.Validator = ...

class GroupChangeMemberRoleType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupChangeMemberRoleType_validator: bv.Validator = ...

class GroupCreateDetails(bb.Struct):
    def __init__(self,
                 is_company_managed: Optional[bool] = ...,
                 join_policy: Optional[GroupJoinPolicy] = ...) -> None: ...
    is_company_managed: bb.Attribute[Optional[bool]] = ...
    join_policy: bb.Attribute[Optional[GroupJoinPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupCreateDetails_validator: bv.Validator = ...

class GroupCreateType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupCreateType_validator: bv.Validator = ...

class GroupDeleteDetails(bb.Struct):
    def __init__(self,
                 is_company_managed: Optional[bool] = ...) -> None: ...
    is_company_managed: bb.Attribute[Optional[bool]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupDeleteDetails_validator: bv.Validator = ...

class GroupDeleteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupDeleteType_validator: bv.Validator = ...

class GroupDescriptionUpdatedDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupDescriptionUpdatedDetails_validator: bv.Validator = ...

class GroupDescriptionUpdatedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupDescriptionUpdatedType_validator: bv.Validator = ...

class GroupJoinPolicy(bb.Union):
    open: GroupJoinPolicy = ...
    request_to_join: GroupJoinPolicy = ...
    other: GroupJoinPolicy = ...

    def is_open(self) -> bool: ...

    def is_request_to_join(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupJoinPolicy_validator: bv.Validator = ...

class GroupJoinPolicyUpdatedDetails(bb.Struct):
    def __init__(self,
                 is_company_managed: Optional[bool] = ...,
                 join_policy: Optional[GroupJoinPolicy] = ...) -> None: ...
    is_company_managed: bb.Attribute[Optional[bool]] = ...
    join_policy: bb.Attribute[Optional[GroupJoinPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupJoinPolicyUpdatedDetails_validator: bv.Validator = ...

class GroupJoinPolicyUpdatedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupJoinPolicyUpdatedType_validator: bv.Validator = ...

class GroupLogInfo(bb.Struct):
    def __init__(self,
                 display_name: Text = ...,
                 group_id: Optional[Text] = ...,
                 external_id: Optional[Text] = ...) -> None: ...
    display_name: bb.Attribute[Text] = ...
    group_id: bb.Attribute[Optional[Text]] = ...
    external_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupLogInfo_validator: bv.Validator = ...

class GroupMovedDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupMovedDetails_validator: bv.Validator = ...

class GroupMovedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupMovedType_validator: bv.Validator = ...

class GroupRemoveExternalIdDetails(bb.Struct):
    def __init__(self,
                 previous_value: Text = ...) -> None: ...
    previous_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupRemoveExternalIdDetails_validator: bv.Validator = ...

class GroupRemoveExternalIdType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupRemoveExternalIdType_validator: bv.Validator = ...

class GroupRemoveMemberDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupRemoveMemberDetails_validator: bv.Validator = ...

class GroupRemoveMemberType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupRemoveMemberType_validator: bv.Validator = ...

class GroupRenameDetails(bb.Struct):
    def __init__(self,
                 previous_value: Text = ...,
                 new_value: Text = ...) -> None: ...
    previous_value: bb.Attribute[Text] = ...
    new_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupRenameDetails_validator: bv.Validator = ...

class GroupRenameType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupRenameType_validator: bv.Validator = ...

class GroupUserManagementChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: team_policies.GroupCreation = ...,
                 previous_value: Optional[team_policies.GroupCreation] = ...) -> None: ...
    new_value: bb.Attribute[team_policies.GroupCreation] = ...
    previous_value: bb.Attribute[Optional[team_policies.GroupCreation]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupUserManagementChangePolicyDetails_validator: bv.Validator = ...

class GroupUserManagementChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupUserManagementChangePolicyType_validator: bv.Validator = ...

class GuestAdminChangeStatusDetails(bb.Struct):
    def __init__(self,
                 is_guest: bool = ...,
                 previous_value: TrustedTeamsRequestState = ...,
                 new_value: TrustedTeamsRequestState = ...,
                 action_details: TrustedTeamsRequestAction = ...,
                 guest_team_name: Optional[Text] = ...,
                 host_team_name: Optional[Text] = ...) -> None: ...
    is_guest: bb.Attribute[bool] = ...
    previous_value: bb.Attribute[TrustedTeamsRequestState] = ...
    new_value: bb.Attribute[TrustedTeamsRequestState] = ...
    action_details: bb.Attribute[TrustedTeamsRequestAction] = ...
    guest_team_name: bb.Attribute[Optional[Text]] = ...
    host_team_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GuestAdminChangeStatusDetails_validator: bv.Validator = ...

class GuestAdminChangeStatusType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GuestAdminChangeStatusType_validator: bv.Validator = ...

class GuestAdminSignedInViaTrustedTeamsDetails(bb.Struct):
    def __init__(self,
                 team_name: Optional[Text] = ...,
                 trusted_team_name: Optional[Text] = ...) -> None: ...
    team_name: bb.Attribute[Optional[Text]] = ...
    trusted_team_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GuestAdminSignedInViaTrustedTeamsDetails_validator: bv.Validator = ...

class GuestAdminSignedInViaTrustedTeamsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GuestAdminSignedInViaTrustedTeamsType_validator: bv.Validator = ...

class GuestAdminSignedOutViaTrustedTeamsDetails(bb.Struct):
    def __init__(self,
                 team_name: Optional[Text] = ...,
                 trusted_team_name: Optional[Text] = ...) -> None: ...
    team_name: bb.Attribute[Optional[Text]] = ...
    trusted_team_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GuestAdminSignedOutViaTrustedTeamsDetails_validator: bv.Validator = ...

class GuestAdminSignedOutViaTrustedTeamsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GuestAdminSignedOutViaTrustedTeamsType_validator: bv.Validator = ...

class IdentifierType(bb.Union):
    email: IdentifierType = ...
    facebook_profile_name: IdentifierType = ...
    other: IdentifierType = ...

    def is_email(self) -> bool: ...

    def is_facebook_profile_name(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

IdentifierType_validator: bv.Validator = ...

class IntegrationConnectedDetails(bb.Struct):
    def __init__(self,
                 integration_name: Text = ...) -> None: ...
    integration_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

IntegrationConnectedDetails_validator: bv.Validator = ...

class IntegrationConnectedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

IntegrationConnectedType_validator: bv.Validator = ...

class IntegrationDisconnectedDetails(bb.Struct):
    def __init__(self,
                 integration_name: Text = ...) -> None: ...
    integration_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

IntegrationDisconnectedDetails_validator: bv.Validator = ...

class IntegrationDisconnectedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

IntegrationDisconnectedType_validator: bv.Validator = ...

class IntegrationPolicy(bb.Union):
    disabled: IntegrationPolicy = ...
    enabled: IntegrationPolicy = ...
    other: IntegrationPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

IntegrationPolicy_validator: bv.Validator = ...

class IntegrationPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 integration_name: Text = ...,
                 new_value: IntegrationPolicy = ...,
                 previous_value: IntegrationPolicy = ...) -> None: ...
    integration_name: bb.Attribute[Text] = ...
    new_value: bb.Attribute[IntegrationPolicy] = ...
    previous_value: bb.Attribute[IntegrationPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

IntegrationPolicyChangedDetails_validator: bv.Validator = ...

class IntegrationPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

IntegrationPolicyChangedType_validator: bv.Validator = ...

class InviteAcceptanceEmailPolicy(bb.Union):
    disabled: InviteAcceptanceEmailPolicy = ...
    enabled: InviteAcceptanceEmailPolicy = ...
    other: InviteAcceptanceEmailPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

InviteAcceptanceEmailPolicy_validator: bv.Validator = ...

class InviteAcceptanceEmailPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: InviteAcceptanceEmailPolicy = ...,
                 previous_value: InviteAcceptanceEmailPolicy = ...) -> None: ...
    new_value: bb.Attribute[InviteAcceptanceEmailPolicy] = ...
    previous_value: bb.Attribute[InviteAcceptanceEmailPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

InviteAcceptanceEmailPolicyChangedDetails_validator: bv.Validator = ...

class InviteAcceptanceEmailPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

InviteAcceptanceEmailPolicyChangedType_validator: bv.Validator = ...

class InviteMethod(bb.Union):
    auto_approve: InviteMethod = ...
    invite_link: InviteMethod = ...
    member_invite: InviteMethod = ...
    moved_from_another_team: InviteMethod = ...
    other: InviteMethod = ...

    def is_auto_approve(self) -> bool: ...

    def is_invite_link(self) -> bool: ...

    def is_member_invite(self) -> bool: ...

    def is_moved_from_another_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

InviteMethod_validator: bv.Validator = ...

class JoinTeamDetails(bb.Struct):
    def __init__(self,
                 linked_apps: List[UserLinkedAppLogInfo] = ...,
                 linked_devices: List[LinkedDeviceLogInfo] = ...,
                 linked_shared_folders: List[FolderLogInfo] = ...,
                 was_linked_apps_truncated: Optional[bool] = ...,
                 was_linked_devices_truncated: Optional[bool] = ...,
                 was_linked_shared_folders_truncated: Optional[bool] = ...,
                 has_linked_apps: Optional[bool] = ...,
                 has_linked_devices: Optional[bool] = ...,
                 has_linked_shared_folders: Optional[bool] = ...) -> None: ...
    linked_apps: bb.Attribute[List[UserLinkedAppLogInfo]] = ...
    linked_devices: bb.Attribute[List[LinkedDeviceLogInfo]] = ...
    linked_shared_folders: bb.Attribute[List[FolderLogInfo]] = ...
    was_linked_apps_truncated: bb.Attribute[Optional[bool]] = ...
    was_linked_devices_truncated: bb.Attribute[Optional[bool]] = ...
    was_linked_shared_folders_truncated: bb.Attribute[Optional[bool]] = ...
    has_linked_apps: bb.Attribute[Optional[bool]] = ...
    has_linked_devices: bb.Attribute[Optional[bool]] = ...
    has_linked_shared_folders: bb.Attribute[Optional[bool]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

JoinTeamDetails_validator: bv.Validator = ...

class LabelType(bb.Union):
    personal_information: LabelType = ...
    test_only: LabelType = ...
    user_defined_tag: LabelType = ...
    other: LabelType = ...

    def is_personal_information(self) -> bool: ...

    def is_test_only(self) -> bool: ...

    def is_user_defined_tag(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LabelType_validator: bv.Validator = ...

class LegacyDeviceSessionLogInfo(DeviceSessionLogInfo):
    def __init__(self,
                 ip_address: Optional[Text] = ...,
                 created: Optional[datetime.datetime] = ...,
                 updated: Optional[datetime.datetime] = ...,
                 session_info: Optional[SessionLogInfo] = ...,
                 display_name: Optional[Text] = ...,
                 is_emm_managed: Optional[bool] = ...,
                 platform: Optional[Text] = ...,
                 mac_address: Optional[Text] = ...,
                 os_version: Optional[Text] = ...,
                 device_type: Optional[Text] = ...,
                 client_version: Optional[Text] = ...,
                 legacy_uniq_id: Optional[Text] = ...) -> None: ...
    ip_address: bb.Attribute[Optional[Text]] = ...
    created: bb.Attribute[Optional[datetime.datetime]] = ...
    updated: bb.Attribute[Optional[datetime.datetime]] = ...
    session_info: bb.Attribute[Optional[SessionLogInfo]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    is_emm_managed: bb.Attribute[Optional[bool]] = ...
    platform: bb.Attribute[Optional[Text]] = ...
    mac_address: bb.Attribute[Optional[Text]] = ...
    os_version: bb.Attribute[Optional[Text]] = ...
    device_type: bb.Attribute[Optional[Text]] = ...
    client_version: bb.Attribute[Optional[Text]] = ...
    legacy_uniq_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegacyDeviceSessionLogInfo_validator: bv.Validator = ...

class LegalHoldsActivateAHoldDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...,
                 start_date: datetime.datetime = ...,
                 end_date: Optional[datetime.datetime] = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    start_date: bb.Attribute[datetime.datetime] = ...
    end_date: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsActivateAHoldDetails_validator: bv.Validator = ...

class LegalHoldsActivateAHoldType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsActivateAHoldType_validator: bv.Validator = ...

class LegalHoldsAddMembersDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsAddMembersDetails_validator: bv.Validator = ...

class LegalHoldsAddMembersType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsAddMembersType_validator: bv.Validator = ...

class LegalHoldsChangeHoldDetailsDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...,
                 previous_value: Text = ...,
                 new_value: Text = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[Text] = ...
    new_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsChangeHoldDetailsDetails_validator: bv.Validator = ...

class LegalHoldsChangeHoldDetailsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsChangeHoldDetailsType_validator: bv.Validator = ...

class LegalHoldsChangeHoldNameDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 previous_value: Text = ...,
                 new_value: Text = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[Text] = ...
    new_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsChangeHoldNameDetails_validator: bv.Validator = ...

class LegalHoldsChangeHoldNameType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsChangeHoldNameType_validator: bv.Validator = ...

class LegalHoldsExportAHoldDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...,
                 export_name: Optional[Text] = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    export_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsExportAHoldDetails_validator: bv.Validator = ...

class LegalHoldsExportAHoldType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsExportAHoldType_validator: bv.Validator = ...

class LegalHoldsExportCancelledDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...,
                 export_name: Text = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    export_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsExportCancelledDetails_validator: bv.Validator = ...

class LegalHoldsExportCancelledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsExportCancelledType_validator: bv.Validator = ...

class LegalHoldsExportDownloadedDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...,
                 export_name: Text = ...,
                 part: Optional[Text] = ...,
                 file_name: Optional[Text] = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    export_name: bb.Attribute[Text] = ...
    part: bb.Attribute[Optional[Text]] = ...
    file_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsExportDownloadedDetails_validator: bv.Validator = ...

class LegalHoldsExportDownloadedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsExportDownloadedType_validator: bv.Validator = ...

class LegalHoldsExportRemovedDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...,
                 export_name: Text = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    export_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsExportRemovedDetails_validator: bv.Validator = ...

class LegalHoldsExportRemovedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsExportRemovedType_validator: bv.Validator = ...

class LegalHoldsReleaseAHoldDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsReleaseAHoldDetails_validator: bv.Validator = ...

class LegalHoldsReleaseAHoldType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsReleaseAHoldType_validator: bv.Validator = ...

class LegalHoldsRemoveMembersDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsRemoveMembersDetails_validator: bv.Validator = ...

class LegalHoldsRemoveMembersType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsRemoveMembersType_validator: bv.Validator = ...

class LegalHoldsReportAHoldDetails(bb.Struct):
    def __init__(self,
                 legal_hold_id: Text = ...,
                 name: Text = ...) -> None: ...
    legal_hold_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsReportAHoldDetails_validator: bv.Validator = ...

class LegalHoldsReportAHoldType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LegalHoldsReportAHoldType_validator: bv.Validator = ...

class LinkedDeviceLogInfo(bb.Union):
    other: LinkedDeviceLogInfo = ...

    def is_desktop_device_session(self) -> bool: ...

    def is_legacy_device_session(self) -> bool: ...

    def is_mobile_device_session(self) -> bool: ...

    def is_web_device_session(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def desktop_device_session(cls, val: DesktopDeviceSessionLogInfo) -> LinkedDeviceLogInfo: ...

    @classmethod
    def legacy_device_session(cls, val: LegacyDeviceSessionLogInfo) -> LinkedDeviceLogInfo: ...

    @classmethod
    def mobile_device_session(cls, val: MobileDeviceSessionLogInfo) -> LinkedDeviceLogInfo: ...

    @classmethod
    def web_device_session(cls, val: WebDeviceSessionLogInfo) -> LinkedDeviceLogInfo: ...

    def get_desktop_device_session(self) -> DesktopDeviceSessionLogInfo: ...

    def get_legacy_device_session(self) -> LegacyDeviceSessionLogInfo: ...

    def get_mobile_device_session(self) -> MobileDeviceSessionLogInfo: ...

    def get_web_device_session(self) -> WebDeviceSessionLogInfo: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LinkedDeviceLogInfo_validator: bv.Validator = ...

class LockStatus(bb.Union):
    locked: LockStatus = ...
    unlocked: LockStatus = ...
    other: LockStatus = ...

    def is_locked(self) -> bool: ...

    def is_unlocked(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LockStatus_validator: bv.Validator = ...

class LoginFailDetails(bb.Struct):
    def __init__(self,
                 login_method: LoginMethod = ...,
                 error_details: FailureDetailsLogInfo = ...,
                 is_emm_managed: Optional[bool] = ...) -> None: ...
    login_method: bb.Attribute[LoginMethod] = ...
    error_details: bb.Attribute[FailureDetailsLogInfo] = ...
    is_emm_managed: bb.Attribute[Optional[bool]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LoginFailDetails_validator: bv.Validator = ...

class LoginFailType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LoginFailType_validator: bv.Validator = ...

class LoginMethod(bb.Union):
    apple_oauth: LoginMethod = ...
    first_party_token_exchange: LoginMethod = ...
    google_oauth: LoginMethod = ...
    password: LoginMethod = ...
    qr_code: LoginMethod = ...
    saml: LoginMethod = ...
    two_factor_authentication: LoginMethod = ...
    web_session: LoginMethod = ...
    other: LoginMethod = ...

    def is_apple_oauth(self) -> bool: ...

    def is_first_party_token_exchange(self) -> bool: ...

    def is_google_oauth(self) -> bool: ...

    def is_password(self) -> bool: ...

    def is_qr_code(self) -> bool: ...

    def is_saml(self) -> bool: ...

    def is_two_factor_authentication(self) -> bool: ...

    def is_web_session(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LoginMethod_validator: bv.Validator = ...

class LoginSuccessDetails(bb.Struct):
    def __init__(self,
                 login_method: LoginMethod = ...,
                 is_emm_managed: Optional[bool] = ...) -> None: ...
    login_method: bb.Attribute[LoginMethod] = ...
    is_emm_managed: bb.Attribute[Optional[bool]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LoginSuccessDetails_validator: bv.Validator = ...

class LoginSuccessType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LoginSuccessType_validator: bv.Validator = ...

class LogoutDetails(bb.Struct):
    def __init__(self,
                 login_id: Optional[Text] = ...) -> None: ...
    login_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LogoutDetails_validator: bv.Validator = ...

class LogoutType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LogoutType_validator: bv.Validator = ...

class MemberAddExternalIdDetails(bb.Struct):
    def __init__(self,
                 new_value: Text = ...) -> None: ...
    new_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberAddExternalIdDetails_validator: bv.Validator = ...

class MemberAddExternalIdType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberAddExternalIdType_validator: bv.Validator = ...

class MemberAddNameDetails(bb.Struct):
    def __init__(self,
                 new_value: UserNameLogInfo = ...) -> None: ...
    new_value: bb.Attribute[UserNameLogInfo] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberAddNameDetails_validator: bv.Validator = ...

class MemberAddNameType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberAddNameType_validator: bv.Validator = ...

class MemberChangeAdminRoleDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[AdminRole] = ...,
                 previous_value: Optional[AdminRole] = ...) -> None: ...
    new_value: bb.Attribute[Optional[AdminRole]] = ...
    previous_value: bb.Attribute[Optional[AdminRole]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeAdminRoleDetails_validator: bv.Validator = ...

class MemberChangeAdminRoleType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeAdminRoleType_validator: bv.Validator = ...

class MemberChangeEmailDetails(bb.Struct):
    def __init__(self,
                 new_value: Text = ...,
                 previous_value: Optional[Text] = ...) -> None: ...
    new_value: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeEmailDetails_validator: bv.Validator = ...

class MemberChangeEmailType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeEmailType_validator: bv.Validator = ...

class MemberChangeExternalIdDetails(bb.Struct):
    def __init__(self,
                 new_value: Text = ...,
                 previous_value: Text = ...) -> None: ...
    new_value: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeExternalIdDetails_validator: bv.Validator = ...

class MemberChangeExternalIdType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeExternalIdType_validator: bv.Validator = ...

class MemberChangeMembershipTypeDetails(bb.Struct):
    def __init__(self,
                 prev_value: TeamMembershipType = ...,
                 new_value: TeamMembershipType = ...) -> None: ...
    prev_value: bb.Attribute[TeamMembershipType] = ...
    new_value: bb.Attribute[TeamMembershipType] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeMembershipTypeDetails_validator: bv.Validator = ...

class MemberChangeMembershipTypeType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeMembershipTypeType_validator: bv.Validator = ...

class MemberChangeNameDetails(bb.Struct):
    def __init__(self,
                 new_value: UserNameLogInfo = ...,
                 previous_value: Optional[UserNameLogInfo] = ...) -> None: ...
    new_value: bb.Attribute[UserNameLogInfo] = ...
    previous_value: bb.Attribute[Optional[UserNameLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeNameDetails_validator: bv.Validator = ...

class MemberChangeNameType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeNameType_validator: bv.Validator = ...

class MemberChangeResellerRoleDetails(bb.Struct):
    def __init__(self,
                 new_value: ResellerRole = ...,
                 previous_value: ResellerRole = ...) -> None: ...
    new_value: bb.Attribute[ResellerRole] = ...
    previous_value: bb.Attribute[ResellerRole] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeResellerRoleDetails_validator: bv.Validator = ...

class MemberChangeResellerRoleType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeResellerRoleType_validator: bv.Validator = ...

class MemberChangeStatusDetails(bb.Struct):
    def __init__(self,
                 new_value: MemberStatus = ...,
                 previous_value: Optional[MemberStatus] = ...,
                 action: Optional[ActionDetails] = ...,
                 new_team: Optional[Text] = ...,
                 previous_team: Optional[Text] = ...) -> None: ...
    new_value: bb.Attribute[MemberStatus] = ...
    previous_value: bb.Attribute[Optional[MemberStatus]] = ...
    action: bb.Attribute[Optional[ActionDetails]] = ...
    new_team: bb.Attribute[Optional[Text]] = ...
    previous_team: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeStatusDetails_validator: bv.Validator = ...

class MemberChangeStatusType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberChangeStatusType_validator: bv.Validator = ...

class MemberDeleteManualContactsDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberDeleteManualContactsDetails_validator: bv.Validator = ...

class MemberDeleteManualContactsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberDeleteManualContactsType_validator: bv.Validator = ...

class MemberDeleteProfilePhotoDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberDeleteProfilePhotoDetails_validator: bv.Validator = ...

class MemberDeleteProfilePhotoType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberDeleteProfilePhotoType_validator: bv.Validator = ...

class MemberPermanentlyDeleteAccountContentsDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberPermanentlyDeleteAccountContentsDetails_validator: bv.Validator = ...

class MemberPermanentlyDeleteAccountContentsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberPermanentlyDeleteAccountContentsType_validator: bv.Validator = ...

class MemberRemoveActionType(bb.Union):
    delete: MemberRemoveActionType = ...
    leave: MemberRemoveActionType = ...
    offboard: MemberRemoveActionType = ...
    offboard_and_retain_team_folders: MemberRemoveActionType = ...
    other: MemberRemoveActionType = ...

    def is_delete(self) -> bool: ...

    def is_leave(self) -> bool: ...

    def is_offboard(self) -> bool: ...

    def is_offboard_and_retain_team_folders(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberRemoveActionType_validator: bv.Validator = ...

class MemberRemoveExternalIdDetails(bb.Struct):
    def __init__(self,
                 previous_value: Text = ...) -> None: ...
    previous_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberRemoveExternalIdDetails_validator: bv.Validator = ...

class MemberRemoveExternalIdType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberRemoveExternalIdType_validator: bv.Validator = ...

class MemberRequestsChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: MemberRequestsPolicy = ...,
                 previous_value: Optional[MemberRequestsPolicy] = ...) -> None: ...
    new_value: bb.Attribute[MemberRequestsPolicy] = ...
    previous_value: bb.Attribute[Optional[MemberRequestsPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberRequestsChangePolicyDetails_validator: bv.Validator = ...

class MemberRequestsChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberRequestsChangePolicyType_validator: bv.Validator = ...

class MemberRequestsPolicy(bb.Union):
    auto_accept: MemberRequestsPolicy = ...
    disabled: MemberRequestsPolicy = ...
    require_approval: MemberRequestsPolicy = ...
    other: MemberRequestsPolicy = ...

    def is_auto_accept(self) -> bool: ...

    def is_disabled(self) -> bool: ...

    def is_require_approval(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberRequestsPolicy_validator: bv.Validator = ...

class MemberSendInvitePolicy(bb.Union):
    disabled: MemberSendInvitePolicy = ...
    everyone: MemberSendInvitePolicy = ...
    specific_members: MemberSendInvitePolicy = ...
    other: MemberSendInvitePolicy = ...

    def is_disabled(self) -> bool: ...

    def is_everyone(self) -> bool: ...

    def is_specific_members(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSendInvitePolicy_validator: bv.Validator = ...

class MemberSendInvitePolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: MemberSendInvitePolicy = ...,
                 previous_value: MemberSendInvitePolicy = ...) -> None: ...
    new_value: bb.Attribute[MemberSendInvitePolicy] = ...
    previous_value: bb.Attribute[MemberSendInvitePolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSendInvitePolicyChangedDetails_validator: bv.Validator = ...

class MemberSendInvitePolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSendInvitePolicyChangedType_validator: bv.Validator = ...

class MemberSetProfilePhotoDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSetProfilePhotoDetails_validator: bv.Validator = ...

class MemberSetProfilePhotoType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSetProfilePhotoType_validator: bv.Validator = ...

class MemberSpaceLimitsAddCustomQuotaDetails(bb.Struct):
    def __init__(self,
                 new_value: int = ...) -> None: ...
    new_value: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsAddCustomQuotaDetails_validator: bv.Validator = ...

class MemberSpaceLimitsAddCustomQuotaType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsAddCustomQuotaType_validator: bv.Validator = ...

class MemberSpaceLimitsAddExceptionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsAddExceptionDetails_validator: bv.Validator = ...

class MemberSpaceLimitsAddExceptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsAddExceptionType_validator: bv.Validator = ...

class MemberSpaceLimitsChangeCapsTypePolicyDetails(bb.Struct):
    def __init__(self,
                 previous_value: SpaceCapsType = ...,
                 new_value: SpaceCapsType = ...) -> None: ...
    previous_value: bb.Attribute[SpaceCapsType] = ...
    new_value: bb.Attribute[SpaceCapsType] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsChangeCapsTypePolicyDetails_validator: bv.Validator = ...

class MemberSpaceLimitsChangeCapsTypePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsChangeCapsTypePolicyType_validator: bv.Validator = ...

class MemberSpaceLimitsChangeCustomQuotaDetails(bb.Struct):
    def __init__(self,
                 previous_value: int = ...,
                 new_value: int = ...) -> None: ...
    previous_value: bb.Attribute[int] = ...
    new_value: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsChangeCustomQuotaDetails_validator: bv.Validator = ...

class MemberSpaceLimitsChangeCustomQuotaType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsChangeCustomQuotaType_validator: bv.Validator = ...

class MemberSpaceLimitsChangePolicyDetails(bb.Struct):
    def __init__(self,
                 previous_value: Optional[int] = ...,
                 new_value: Optional[int] = ...) -> None: ...
    previous_value: bb.Attribute[Optional[int]] = ...
    new_value: bb.Attribute[Optional[int]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsChangePolicyDetails_validator: bv.Validator = ...

class MemberSpaceLimitsChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsChangePolicyType_validator: bv.Validator = ...

class MemberSpaceLimitsChangeStatusDetails(bb.Struct):
    def __init__(self,
                 previous_value: SpaceLimitsStatus = ...,
                 new_value: SpaceLimitsStatus = ...) -> None: ...
    previous_value: bb.Attribute[SpaceLimitsStatus] = ...
    new_value: bb.Attribute[SpaceLimitsStatus] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsChangeStatusDetails_validator: bv.Validator = ...

class MemberSpaceLimitsChangeStatusType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsChangeStatusType_validator: bv.Validator = ...

class MemberSpaceLimitsRemoveCustomQuotaDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsRemoveCustomQuotaDetails_validator: bv.Validator = ...

class MemberSpaceLimitsRemoveCustomQuotaType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsRemoveCustomQuotaType_validator: bv.Validator = ...

class MemberSpaceLimitsRemoveExceptionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsRemoveExceptionDetails_validator: bv.Validator = ...

class MemberSpaceLimitsRemoveExceptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSpaceLimitsRemoveExceptionType_validator: bv.Validator = ...

class MemberStatus(bb.Union):
    active: MemberStatus = ...
    invited: MemberStatus = ...
    moved_to_another_team: MemberStatus = ...
    not_joined: MemberStatus = ...
    removed: MemberStatus = ...
    suspended: MemberStatus = ...
    other: MemberStatus = ...

    def is_active(self) -> bool: ...

    def is_invited(self) -> bool: ...

    def is_moved_to_another_team(self) -> bool: ...

    def is_not_joined(self) -> bool: ...

    def is_removed(self) -> bool: ...

    def is_suspended(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberStatus_validator: bv.Validator = ...

class MemberSuggestDetails(bb.Struct):
    def __init__(self,
                 suggested_members: List[Text] = ...) -> None: ...
    suggested_members: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSuggestDetails_validator: bv.Validator = ...

class MemberSuggestType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSuggestType_validator: bv.Validator = ...

class MemberSuggestionsChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: MemberSuggestionsPolicy = ...,
                 previous_value: Optional[MemberSuggestionsPolicy] = ...) -> None: ...
    new_value: bb.Attribute[MemberSuggestionsPolicy] = ...
    previous_value: bb.Attribute[Optional[MemberSuggestionsPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSuggestionsChangePolicyDetails_validator: bv.Validator = ...

class MemberSuggestionsChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSuggestionsChangePolicyType_validator: bv.Validator = ...

class MemberSuggestionsPolicy(bb.Union):
    disabled: MemberSuggestionsPolicy = ...
    enabled: MemberSuggestionsPolicy = ...
    other: MemberSuggestionsPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberSuggestionsPolicy_validator: bv.Validator = ...

class MemberTransferAccountContentsDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberTransferAccountContentsDetails_validator: bv.Validator = ...

class MemberTransferAccountContentsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberTransferAccountContentsType_validator: bv.Validator = ...

class MemberTransferredInternalFields(bb.Struct):
    def __init__(self,
                 source_team_id: Text = ...,
                 target_team_id: Text = ...) -> None: ...
    source_team_id: bb.Attribute[Text] = ...
    target_team_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MemberTransferredInternalFields_validator: bv.Validator = ...

class MicrosoftOfficeAddinChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: MicrosoftOfficeAddinPolicy = ...,
                 previous_value: Optional[MicrosoftOfficeAddinPolicy] = ...) -> None: ...
    new_value: bb.Attribute[MicrosoftOfficeAddinPolicy] = ...
    previous_value: bb.Attribute[Optional[MicrosoftOfficeAddinPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MicrosoftOfficeAddinChangePolicyDetails_validator: bv.Validator = ...

class MicrosoftOfficeAddinChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MicrosoftOfficeAddinChangePolicyType_validator: bv.Validator = ...

class MicrosoftOfficeAddinPolicy(bb.Union):
    disabled: MicrosoftOfficeAddinPolicy = ...
    enabled: MicrosoftOfficeAddinPolicy = ...
    other: MicrosoftOfficeAddinPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MicrosoftOfficeAddinPolicy_validator: bv.Validator = ...

class MissingDetails(bb.Struct):
    def __init__(self,
                 source_event_fields: Optional[Text] = ...) -> None: ...
    source_event_fields: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MissingDetails_validator: bv.Validator = ...

class MobileDeviceSessionLogInfo(DeviceSessionLogInfo):
    def __init__(self,
                 device_name: Text = ...,
                 client_type: team.MobileClientPlatform = ...,
                 ip_address: Optional[Text] = ...,
                 created: Optional[datetime.datetime] = ...,
                 updated: Optional[datetime.datetime] = ...,
                 session_info: Optional[MobileSessionLogInfo] = ...,
                 client_version: Optional[Text] = ...,
                 os_version: Optional[Text] = ...,
                 last_carrier: Optional[Text] = ...) -> None: ...
    device_name: bb.Attribute[Text] = ...
    client_type: bb.Attribute[team.MobileClientPlatform] = ...
    ip_address: bb.Attribute[Optional[Text]] = ...
    created: bb.Attribute[Optional[datetime.datetime]] = ...
    updated: bb.Attribute[Optional[datetime.datetime]] = ...
    session_info: bb.Attribute[Optional[MobileSessionLogInfo]] = ...
    client_version: bb.Attribute[Optional[Text]] = ...
    os_version: bb.Attribute[Optional[Text]] = ...
    last_carrier: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MobileDeviceSessionLogInfo_validator: bv.Validator = ...

class MobileSessionLogInfo(SessionLogInfo):
    def __init__(self,
                 session_id: Optional[Text] = ...) -> None: ...
    session_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

MobileSessionLogInfo_validator: bv.Validator = ...

class NamespaceRelativePathLogInfo(bb.Struct):
    def __init__(self,
                 ns_id: Optional[Text] = ...,
                 relative_path: Optional[Text] = ...,
                 is_shared_namespace: Optional[bool] = ...) -> None: ...
    ns_id: bb.Attribute[Optional[Text]] = ...
    relative_path: bb.Attribute[Optional[Text]] = ...
    is_shared_namespace: bb.Attribute[Optional[bool]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NamespaceRelativePathLogInfo_validator: bv.Validator = ...

class NetworkControlChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: NetworkControlPolicy = ...,
                 previous_value: Optional[NetworkControlPolicy] = ...) -> None: ...
    new_value: bb.Attribute[NetworkControlPolicy] = ...
    previous_value: bb.Attribute[Optional[NetworkControlPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NetworkControlChangePolicyDetails_validator: bv.Validator = ...

class NetworkControlChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NetworkControlChangePolicyType_validator: bv.Validator = ...

class NetworkControlPolicy(bb.Union):
    disabled: NetworkControlPolicy = ...
    enabled: NetworkControlPolicy = ...
    other: NetworkControlPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NetworkControlPolicy_validator: bv.Validator = ...

class NoExpirationLinkGenCreateReportDetails(bb.Struct):
    def __init__(self,
                 start_date: datetime.datetime = ...,
                 end_date: datetime.datetime = ...) -> None: ...
    start_date: bb.Attribute[datetime.datetime] = ...
    end_date: bb.Attribute[datetime.datetime] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoExpirationLinkGenCreateReportDetails_validator: bv.Validator = ...

class NoExpirationLinkGenCreateReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoExpirationLinkGenCreateReportType_validator: bv.Validator = ...

class NoExpirationLinkGenReportFailedDetails(bb.Struct):
    def __init__(self,
                 failure_reason: team.TeamReportFailureReason = ...) -> None: ...
    failure_reason: bb.Attribute[team.TeamReportFailureReason] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoExpirationLinkGenReportFailedDetails_validator: bv.Validator = ...

class NoExpirationLinkGenReportFailedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoExpirationLinkGenReportFailedType_validator: bv.Validator = ...

class NoPasswordLinkGenCreateReportDetails(bb.Struct):
    def __init__(self,
                 start_date: datetime.datetime = ...,
                 end_date: datetime.datetime = ...) -> None: ...
    start_date: bb.Attribute[datetime.datetime] = ...
    end_date: bb.Attribute[datetime.datetime] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoPasswordLinkGenCreateReportDetails_validator: bv.Validator = ...

class NoPasswordLinkGenCreateReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoPasswordLinkGenCreateReportType_validator: bv.Validator = ...

class NoPasswordLinkGenReportFailedDetails(bb.Struct):
    def __init__(self,
                 failure_reason: team.TeamReportFailureReason = ...) -> None: ...
    failure_reason: bb.Attribute[team.TeamReportFailureReason] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoPasswordLinkGenReportFailedDetails_validator: bv.Validator = ...

class NoPasswordLinkGenReportFailedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoPasswordLinkGenReportFailedType_validator: bv.Validator = ...

class NoPasswordLinkViewCreateReportDetails(bb.Struct):
    def __init__(self,
                 start_date: datetime.datetime = ...,
                 end_date: datetime.datetime = ...) -> None: ...
    start_date: bb.Attribute[datetime.datetime] = ...
    end_date: bb.Attribute[datetime.datetime] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoPasswordLinkViewCreateReportDetails_validator: bv.Validator = ...

class NoPasswordLinkViewCreateReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoPasswordLinkViewCreateReportType_validator: bv.Validator = ...

class NoPasswordLinkViewReportFailedDetails(bb.Struct):
    def __init__(self,
                 failure_reason: team.TeamReportFailureReason = ...) -> None: ...
    failure_reason: bb.Attribute[team.TeamReportFailureReason] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoPasswordLinkViewReportFailedDetails_validator: bv.Validator = ...

class NoPasswordLinkViewReportFailedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoPasswordLinkViewReportFailedType_validator: bv.Validator = ...

class UserLogInfo(bb.Struct):
    def __init__(self,
                 account_id: Optional[Text] = ...,
                 display_name: Optional[Text] = ...,
                 email: Optional[Text] = ...) -> None: ...
    account_id: bb.Attribute[Optional[Text]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    email: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserLogInfo_validator: bv.Validator = ...

class NonTeamMemberLogInfo(UserLogInfo):
    def __init__(self,
                 account_id: Optional[Text] = ...,
                 display_name: Optional[Text] = ...,
                 email: Optional[Text] = ...) -> None: ...
    account_id: bb.Attribute[Optional[Text]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    email: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NonTeamMemberLogInfo_validator: bv.Validator = ...

class NonTrustedTeamDetails(bb.Struct):
    def __init__(self,
                 team: Text = ...) -> None: ...
    team: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NonTrustedTeamDetails_validator: bv.Validator = ...

class NoteAclInviteOnlyDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteAclInviteOnlyDetails_validator: bv.Validator = ...

class NoteAclInviteOnlyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteAclInviteOnlyType_validator: bv.Validator = ...

class NoteAclLinkDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteAclLinkDetails_validator: bv.Validator = ...

class NoteAclLinkType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteAclLinkType_validator: bv.Validator = ...

class NoteAclTeamLinkDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteAclTeamLinkDetails_validator: bv.Validator = ...

class NoteAclTeamLinkType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteAclTeamLinkType_validator: bv.Validator = ...

class NoteShareReceiveDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteShareReceiveDetails_validator: bv.Validator = ...

class NoteShareReceiveType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteShareReceiveType_validator: bv.Validator = ...

class NoteSharedDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteSharedDetails_validator: bv.Validator = ...

class NoteSharedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

NoteSharedType_validator: bv.Validator = ...

class ObjectLabelAddedDetails(bb.Struct):
    def __init__(self,
                 label_type: LabelType = ...) -> None: ...
    label_type: bb.Attribute[LabelType] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ObjectLabelAddedDetails_validator: bv.Validator = ...

class ObjectLabelAddedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ObjectLabelAddedType_validator: bv.Validator = ...

class ObjectLabelRemovedDetails(bb.Struct):
    def __init__(self,
                 label_type: LabelType = ...) -> None: ...
    label_type: bb.Attribute[LabelType] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ObjectLabelRemovedDetails_validator: bv.Validator = ...

class ObjectLabelRemovedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ObjectLabelRemovedType_validator: bv.Validator = ...

class ObjectLabelUpdatedValueDetails(bb.Struct):
    def __init__(self,
                 label_type: LabelType = ...) -> None: ...
    label_type: bb.Attribute[LabelType] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ObjectLabelUpdatedValueDetails_validator: bv.Validator = ...

class ObjectLabelUpdatedValueType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ObjectLabelUpdatedValueType_validator: bv.Validator = ...

class OpenNoteSharedDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OpenNoteSharedDetails_validator: bv.Validator = ...

class OpenNoteSharedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OpenNoteSharedType_validator: bv.Validator = ...

class OrganizationDetails(bb.Struct):
    def __init__(self,
                 organization: Text = ...) -> None: ...
    organization: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OrganizationDetails_validator: bv.Validator = ...

class OrganizationName(bb.Struct):
    def __init__(self,
                 organization: Text = ...) -> None: ...
    organization: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OrganizationName_validator: bv.Validator = ...

class OrganizeFolderWithTidyDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OrganizeFolderWithTidyDetails_validator: bv.Validator = ...

class OrganizeFolderWithTidyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OrganizeFolderWithTidyType_validator: bv.Validator = ...

class OriginLogInfo(bb.Struct):
    def __init__(self,
                 access_method: AccessMethodLogInfo = ...,
                 geo_location: Optional[GeoLocationLogInfo] = ...) -> None: ...
    access_method: bb.Attribute[AccessMethodLogInfo] = ...
    geo_location: bb.Attribute[Optional[GeoLocationLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OriginLogInfo_validator: bv.Validator = ...

class OutdatedLinkViewCreateReportDetails(bb.Struct):
    def __init__(self,
                 start_date: datetime.datetime = ...,
                 end_date: datetime.datetime = ...) -> None: ...
    start_date: bb.Attribute[datetime.datetime] = ...
    end_date: bb.Attribute[datetime.datetime] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OutdatedLinkViewCreateReportDetails_validator: bv.Validator = ...

class OutdatedLinkViewCreateReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OutdatedLinkViewCreateReportType_validator: bv.Validator = ...

class OutdatedLinkViewReportFailedDetails(bb.Struct):
    def __init__(self,
                 failure_reason: team.TeamReportFailureReason = ...) -> None: ...
    failure_reason: bb.Attribute[team.TeamReportFailureReason] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OutdatedLinkViewReportFailedDetails_validator: bv.Validator = ...

class OutdatedLinkViewReportFailedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OutdatedLinkViewReportFailedType_validator: bv.Validator = ...

class PaperAccessType(bb.Union):
    commenter: PaperAccessType = ...
    editor: PaperAccessType = ...
    viewer: PaperAccessType = ...
    other: PaperAccessType = ...

    def is_commenter(self) -> bool: ...

    def is_editor(self) -> bool: ...

    def is_viewer(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperAccessType_validator: bv.Validator = ...

class PaperAdminExportStartDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperAdminExportStartDetails_validator: bv.Validator = ...

class PaperAdminExportStartType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperAdminExportStartType_validator: bv.Validator = ...

class PaperChangeDeploymentPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: team_policies.PaperDeploymentPolicy = ...,
                 previous_value: Optional[team_policies.PaperDeploymentPolicy] = ...) -> None: ...
    new_value: bb.Attribute[team_policies.PaperDeploymentPolicy] = ...
    previous_value: bb.Attribute[Optional[team_policies.PaperDeploymentPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperChangeDeploymentPolicyDetails_validator: bv.Validator = ...

class PaperChangeDeploymentPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperChangeDeploymentPolicyType_validator: bv.Validator = ...

class PaperChangeMemberLinkPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: PaperMemberPolicy = ...) -> None: ...
    new_value: bb.Attribute[PaperMemberPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperChangeMemberLinkPolicyDetails_validator: bv.Validator = ...

class PaperChangeMemberLinkPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperChangeMemberLinkPolicyType_validator: bv.Validator = ...

class PaperChangeMemberPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: PaperMemberPolicy = ...,
                 previous_value: Optional[PaperMemberPolicy] = ...) -> None: ...
    new_value: bb.Attribute[PaperMemberPolicy] = ...
    previous_value: bb.Attribute[Optional[PaperMemberPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperChangeMemberPolicyDetails_validator: bv.Validator = ...

class PaperChangeMemberPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperChangeMemberPolicyType_validator: bv.Validator = ...

class PaperChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: team_policies.PaperEnabledPolicy = ...,
                 previous_value: Optional[team_policies.PaperEnabledPolicy] = ...) -> None: ...
    new_value: bb.Attribute[team_policies.PaperEnabledPolicy] = ...
    previous_value: bb.Attribute[Optional[team_policies.PaperEnabledPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperChangePolicyDetails_validator: bv.Validator = ...

class PaperChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperChangePolicyType_validator: bv.Validator = ...

class PaperContentAddMemberDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentAddMemberDetails_validator: bv.Validator = ...

class PaperContentAddMemberType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentAddMemberType_validator: bv.Validator = ...

class PaperContentAddToFolderDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 target_asset_index: int = ...,
                 parent_asset_index: int = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    target_asset_index: bb.Attribute[int] = ...
    parent_asset_index: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentAddToFolderDetails_validator: bv.Validator = ...

class PaperContentAddToFolderType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentAddToFolderType_validator: bv.Validator = ...

class PaperContentArchiveDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentArchiveDetails_validator: bv.Validator = ...

class PaperContentArchiveType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentArchiveType_validator: bv.Validator = ...

class PaperContentCreateDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentCreateDetails_validator: bv.Validator = ...

class PaperContentCreateType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentCreateType_validator: bv.Validator = ...

class PaperContentPermanentlyDeleteDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentPermanentlyDeleteDetails_validator: bv.Validator = ...

class PaperContentPermanentlyDeleteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentPermanentlyDeleteType_validator: bv.Validator = ...

class PaperContentRemoveFromFolderDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 target_asset_index: Optional[int] = ...,
                 parent_asset_index: Optional[int] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    target_asset_index: bb.Attribute[Optional[int]] = ...
    parent_asset_index: bb.Attribute[Optional[int]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentRemoveFromFolderDetails_validator: bv.Validator = ...

class PaperContentRemoveFromFolderType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentRemoveFromFolderType_validator: bv.Validator = ...

class PaperContentRemoveMemberDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentRemoveMemberDetails_validator: bv.Validator = ...

class PaperContentRemoveMemberType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentRemoveMemberType_validator: bv.Validator = ...

class PaperContentRenameDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentRenameDetails_validator: bv.Validator = ...

class PaperContentRenameType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentRenameType_validator: bv.Validator = ...

class PaperContentRestoreDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentRestoreDetails_validator: bv.Validator = ...

class PaperContentRestoreType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperContentRestoreType_validator: bv.Validator = ...

class PaperDefaultFolderPolicy(bb.Union):
    everyone_in_team: PaperDefaultFolderPolicy = ...
    invite_only: PaperDefaultFolderPolicy = ...
    other: PaperDefaultFolderPolicy = ...

    def is_everyone_in_team(self) -> bool: ...

    def is_invite_only(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDefaultFolderPolicy_validator: bv.Validator = ...

class PaperDefaultFolderPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: PaperDefaultFolderPolicy = ...,
                 previous_value: PaperDefaultFolderPolicy = ...) -> None: ...
    new_value: bb.Attribute[PaperDefaultFolderPolicy] = ...
    previous_value: bb.Attribute[PaperDefaultFolderPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDefaultFolderPolicyChangedDetails_validator: bv.Validator = ...

class PaperDefaultFolderPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDefaultFolderPolicyChangedType_validator: bv.Validator = ...

class PaperDesktopPolicy(bb.Union):
    disabled: PaperDesktopPolicy = ...
    enabled: PaperDesktopPolicy = ...
    other: PaperDesktopPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDesktopPolicy_validator: bv.Validator = ...

class PaperDesktopPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: PaperDesktopPolicy = ...,
                 previous_value: PaperDesktopPolicy = ...) -> None: ...
    new_value: bb.Attribute[PaperDesktopPolicy] = ...
    previous_value: bb.Attribute[PaperDesktopPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDesktopPolicyChangedDetails_validator: bv.Validator = ...

class PaperDesktopPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDesktopPolicyChangedType_validator: bv.Validator = ...

class PaperDocAddCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocAddCommentDetails_validator: bv.Validator = ...

class PaperDocAddCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocAddCommentType_validator: bv.Validator = ...

class PaperDocChangeMemberRoleDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 access_type: PaperAccessType = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    access_type: bb.Attribute[PaperAccessType] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocChangeMemberRoleDetails_validator: bv.Validator = ...

class PaperDocChangeMemberRoleType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocChangeMemberRoleType_validator: bv.Validator = ...

class PaperDocChangeSharingPolicyDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 public_sharing_policy: Optional[Text] = ...,
                 team_sharing_policy: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    public_sharing_policy: bb.Attribute[Optional[Text]] = ...
    team_sharing_policy: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocChangeSharingPolicyDetails_validator: bv.Validator = ...

class PaperDocChangeSharingPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocChangeSharingPolicyType_validator: bv.Validator = ...

class PaperDocChangeSubscriptionDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 new_subscription_level: Text = ...,
                 previous_subscription_level: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    new_subscription_level: bb.Attribute[Text] = ...
    previous_subscription_level: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocChangeSubscriptionDetails_validator: bv.Validator = ...

class PaperDocChangeSubscriptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocChangeSubscriptionType_validator: bv.Validator = ...

class PaperDocDeleteCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocDeleteCommentDetails_validator: bv.Validator = ...

class PaperDocDeleteCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocDeleteCommentType_validator: bv.Validator = ...

class PaperDocDeletedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocDeletedDetails_validator: bv.Validator = ...

class PaperDocDeletedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocDeletedType_validator: bv.Validator = ...

class PaperDocDownloadDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 export_file_format: PaperDownloadFormat = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    export_file_format: bb.Attribute[PaperDownloadFormat] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocDownloadDetails_validator: bv.Validator = ...

class PaperDocDownloadType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocDownloadType_validator: bv.Validator = ...

class PaperDocEditCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocEditCommentDetails_validator: bv.Validator = ...

class PaperDocEditCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocEditCommentType_validator: bv.Validator = ...

class PaperDocEditDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocEditDetails_validator: bv.Validator = ...

class PaperDocEditType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocEditType_validator: bv.Validator = ...

class PaperDocFollowedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocFollowedDetails_validator: bv.Validator = ...

class PaperDocFollowedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocFollowedType_validator: bv.Validator = ...

class PaperDocMentionDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocMentionDetails_validator: bv.Validator = ...

class PaperDocMentionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocMentionType_validator: bv.Validator = ...

class PaperDocOwnershipChangedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 new_owner_user_id: Text = ...,
                 old_owner_user_id: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    new_owner_user_id: bb.Attribute[Text] = ...
    old_owner_user_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocOwnershipChangedDetails_validator: bv.Validator = ...

class PaperDocOwnershipChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocOwnershipChangedType_validator: bv.Validator = ...

class PaperDocRequestAccessDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocRequestAccessDetails_validator: bv.Validator = ...

class PaperDocRequestAccessType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocRequestAccessType_validator: bv.Validator = ...

class PaperDocResolveCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocResolveCommentDetails_validator: bv.Validator = ...

class PaperDocResolveCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocResolveCommentType_validator: bv.Validator = ...

class PaperDocRevertDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocRevertDetails_validator: bv.Validator = ...

class PaperDocRevertType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocRevertType_validator: bv.Validator = ...

class PaperDocSlackShareDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocSlackShareDetails_validator: bv.Validator = ...

class PaperDocSlackShareType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocSlackShareType_validator: bv.Validator = ...

class PaperDocTeamInviteDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocTeamInviteDetails_validator: bv.Validator = ...

class PaperDocTeamInviteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocTeamInviteType_validator: bv.Validator = ...

class PaperDocTrashedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocTrashedDetails_validator: bv.Validator = ...

class PaperDocTrashedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocTrashedType_validator: bv.Validator = ...

class PaperDocUnresolveCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocUnresolveCommentDetails_validator: bv.Validator = ...

class PaperDocUnresolveCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocUnresolveCommentType_validator: bv.Validator = ...

class PaperDocUntrashedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocUntrashedDetails_validator: bv.Validator = ...

class PaperDocUntrashedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocUntrashedType_validator: bv.Validator = ...

class PaperDocViewDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocViewDetails_validator: bv.Validator = ...

class PaperDocViewType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocViewType_validator: bv.Validator = ...

class PaperDocumentLogInfo(bb.Struct):
    def __init__(self,
                 doc_id: Text = ...,
                 doc_title: Text = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    doc_title: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocumentLogInfo_validator: bv.Validator = ...

class PaperDownloadFormat(bb.Union):
    docx: PaperDownloadFormat = ...
    html: PaperDownloadFormat = ...
    markdown: PaperDownloadFormat = ...
    pdf: PaperDownloadFormat = ...
    other: PaperDownloadFormat = ...

    def is_docx(self) -> bool: ...

    def is_html(self) -> bool: ...

    def is_markdown(self) -> bool: ...

    def is_pdf(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDownloadFormat_validator: bv.Validator = ...

class PaperEnabledUsersGroupAdditionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperEnabledUsersGroupAdditionDetails_validator: bv.Validator = ...

class PaperEnabledUsersGroupAdditionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperEnabledUsersGroupAdditionType_validator: bv.Validator = ...

class PaperEnabledUsersGroupRemovalDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperEnabledUsersGroupRemovalDetails_validator: bv.Validator = ...

class PaperEnabledUsersGroupRemovalType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperEnabledUsersGroupRemovalType_validator: bv.Validator = ...

class PaperExternalViewAllowDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperExternalViewAllowDetails_validator: bv.Validator = ...

class PaperExternalViewAllowType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperExternalViewAllowType_validator: bv.Validator = ...

class PaperExternalViewDefaultTeamDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperExternalViewDefaultTeamDetails_validator: bv.Validator = ...

class PaperExternalViewDefaultTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperExternalViewDefaultTeamType_validator: bv.Validator = ...

class PaperExternalViewForbidDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperExternalViewForbidDetails_validator: bv.Validator = ...

class PaperExternalViewForbidType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperExternalViewForbidType_validator: bv.Validator = ...

class PaperFolderChangeSubscriptionDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 new_subscription_level: Text = ...,
                 previous_subscription_level: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    new_subscription_level: bb.Attribute[Text] = ...
    previous_subscription_level: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderChangeSubscriptionDetails_validator: bv.Validator = ...

class PaperFolderChangeSubscriptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderChangeSubscriptionType_validator: bv.Validator = ...

class PaperFolderDeletedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderDeletedDetails_validator: bv.Validator = ...

class PaperFolderDeletedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderDeletedType_validator: bv.Validator = ...

class PaperFolderFollowedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderFollowedDetails_validator: bv.Validator = ...

class PaperFolderFollowedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderFollowedType_validator: bv.Validator = ...

class PaperFolderLogInfo(bb.Struct):
    def __init__(self,
                 folder_id: Text = ...,
                 folder_name: Text = ...) -> None: ...
    folder_id: bb.Attribute[Text] = ...
    folder_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderLogInfo_validator: bv.Validator = ...

class PaperFolderTeamInviteDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderTeamInviteDetails_validator: bv.Validator = ...

class PaperFolderTeamInviteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderTeamInviteType_validator: bv.Validator = ...

class PaperMemberPolicy(bb.Union):
    anyone_with_link: PaperMemberPolicy = ...
    only_team: PaperMemberPolicy = ...
    team_and_explicitly_shared: PaperMemberPolicy = ...
    other: PaperMemberPolicy = ...

    def is_anyone_with_link(self) -> bool: ...

    def is_only_team(self) -> bool: ...

    def is_team_and_explicitly_shared(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperMemberPolicy_validator: bv.Validator = ...

class PaperPublishedLinkChangePermissionDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 new_permission_level: Text = ...,
                 previous_permission_level: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    new_permission_level: bb.Attribute[Text] = ...
    previous_permission_level: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperPublishedLinkChangePermissionDetails_validator: bv.Validator = ...

class PaperPublishedLinkChangePermissionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperPublishedLinkChangePermissionType_validator: bv.Validator = ...

class PaperPublishedLinkCreateDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperPublishedLinkCreateDetails_validator: bv.Validator = ...

class PaperPublishedLinkCreateType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperPublishedLinkCreateType_validator: bv.Validator = ...

class PaperPublishedLinkDisabledDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperPublishedLinkDisabledDetails_validator: bv.Validator = ...

class PaperPublishedLinkDisabledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperPublishedLinkDisabledType_validator: bv.Validator = ...

class PaperPublishedLinkViewDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperPublishedLinkViewDetails_validator: bv.Validator = ...

class PaperPublishedLinkViewType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperPublishedLinkViewType_validator: bv.Validator = ...

class ParticipantLogInfo(bb.Union):
    other: ParticipantLogInfo = ...

    def is_group(self) -> bool: ...

    def is_user(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def group(cls, val: GroupLogInfo) -> ParticipantLogInfo: ...

    @classmethod
    def user(cls, val: UserLogInfo) -> ParticipantLogInfo: ...

    def get_group(self) -> GroupLogInfo: ...

    def get_user(self) -> UserLogInfo: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ParticipantLogInfo_validator: bv.Validator = ...

class PassPolicy(bb.Union):
    allow: PassPolicy = ...
    disabled: PassPolicy = ...
    enabled: PassPolicy = ...
    other: PassPolicy = ...

    def is_allow(self) -> bool: ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PassPolicy_validator: bv.Validator = ...

class PasswordChangeDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordChangeDetails_validator: bv.Validator = ...

class PasswordChangeType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordChangeType_validator: bv.Validator = ...

class PasswordResetAllDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordResetAllDetails_validator: bv.Validator = ...

class PasswordResetAllType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordResetAllType_validator: bv.Validator = ...

class PasswordResetDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordResetDetails_validator: bv.Validator = ...

class PasswordResetType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordResetType_validator: bv.Validator = ...

class PasswordStrengthRequirementsChangePolicyDetails(bb.Struct):
    def __init__(self,
                 previous_value: team_policies.PasswordStrengthPolicy = ...,
                 new_value: team_policies.PasswordStrengthPolicy = ...) -> None: ...
    previous_value: bb.Attribute[team_policies.PasswordStrengthPolicy] = ...
    new_value: bb.Attribute[team_policies.PasswordStrengthPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordStrengthRequirementsChangePolicyDetails_validator: bv.Validator = ...

class PasswordStrengthRequirementsChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordStrengthRequirementsChangePolicyType_validator: bv.Validator = ...

class PathLogInfo(bb.Struct):
    def __init__(self,
                 namespace_relative: NamespaceRelativePathLogInfo = ...,
                 contextual: Optional[Text] = ...) -> None: ...
    namespace_relative: bb.Attribute[NamespaceRelativePathLogInfo] = ...
    contextual: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PathLogInfo_validator: bv.Validator = ...

class PendingSecondaryEmailAddedDetails(bb.Struct):
    def __init__(self,
                 secondary_email: Text = ...) -> None: ...
    secondary_email: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PendingSecondaryEmailAddedDetails_validator: bv.Validator = ...

class PendingSecondaryEmailAddedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PendingSecondaryEmailAddedType_validator: bv.Validator = ...

class PermanentDeleteChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: ContentPermanentDeletePolicy = ...,
                 previous_value: Optional[ContentPermanentDeletePolicy] = ...) -> None: ...
    new_value: bb.Attribute[ContentPermanentDeletePolicy] = ...
    previous_value: bb.Attribute[Optional[ContentPermanentDeletePolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PermanentDeleteChangePolicyDetails_validator: bv.Validator = ...

class PermanentDeleteChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PermanentDeleteChangePolicyType_validator: bv.Validator = ...

class PlacementRestriction(bb.Union):
    australia_only: PlacementRestriction = ...
    europe_only: PlacementRestriction = ...
    japan_only: PlacementRestriction = ...
    none: PlacementRestriction = ...
    uk_only: PlacementRestriction = ...
    other: PlacementRestriction = ...

    def is_australia_only(self) -> bool: ...

    def is_europe_only(self) -> bool: ...

    def is_japan_only(self) -> bool: ...

    def is_none(self) -> bool: ...

    def is_uk_only(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PlacementRestriction_validator: bv.Validator = ...

class PolicyType(bb.Union):
    disposition: PolicyType = ...
    retention: PolicyType = ...
    other: PolicyType = ...

    def is_disposition(self) -> bool: ...

    def is_retention(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PolicyType_validator: bv.Validator = ...

class PrimaryTeamRequestAcceptedDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_by: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PrimaryTeamRequestAcceptedDetails_validator: bv.Validator = ...

class PrimaryTeamRequestCanceledDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_by: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PrimaryTeamRequestCanceledDetails_validator: bv.Validator = ...

class PrimaryTeamRequestExpiredDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_by: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PrimaryTeamRequestExpiredDetails_validator: bv.Validator = ...

class PrimaryTeamRequestReminderDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_to: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_to: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PrimaryTeamRequestReminderDetails_validator: bv.Validator = ...

class QuickActionType(bb.Union):
    delete_shared_link: QuickActionType = ...
    reset_password: QuickActionType = ...
    restore_file_or_folder: QuickActionType = ...
    unlink_app: QuickActionType = ...
    unlink_device: QuickActionType = ...
    unlink_session: QuickActionType = ...
    other: QuickActionType = ...

    def is_delete_shared_link(self) -> bool: ...

    def is_reset_password(self) -> bool: ...

    def is_restore_file_or_folder(self) -> bool: ...

    def is_unlink_app(self) -> bool: ...

    def is_unlink_device(self) -> bool: ...

    def is_unlink_session(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

QuickActionType_validator: bv.Validator = ...

class RecipientsConfiguration(bb.Struct):
    def __init__(self,
                 recipient_setting_type: Optional[AlertRecipientsSettingType] = ...,
                 emails: Optional[List[Text]] = ...,
                 groups: Optional[List[Text]] = ...) -> None: ...
    recipient_setting_type: bb.Attribute[Optional[AlertRecipientsSettingType]] = ...
    emails: bb.Attribute[Optional[List[Text]]] = ...
    groups: bb.Attribute[Optional[List[Text]]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RecipientsConfiguration_validator: bv.Validator = ...

class RelocateAssetReferencesLogInfo(bb.Struct):
    def __init__(self,
                 src_asset_index: int = ...,
                 dest_asset_index: int = ...) -> None: ...
    src_asset_index: bb.Attribute[int] = ...
    dest_asset_index: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RelocateAssetReferencesLogInfo_validator: bv.Validator = ...

class ResellerLogInfo(bb.Struct):
    def __init__(self,
                 reseller_name: Text = ...,
                 reseller_email: Text = ...) -> None: ...
    reseller_name: bb.Attribute[Text] = ...
    reseller_email: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ResellerLogInfo_validator: bv.Validator = ...

class ResellerRole(bb.Union):
    not_reseller: ResellerRole = ...
    reseller_admin: ResellerRole = ...
    other: ResellerRole = ...

    def is_not_reseller(self) -> bool: ...

    def is_reseller_admin(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ResellerRole_validator: bv.Validator = ...

class ResellerSupportChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: ResellerSupportPolicy = ...,
                 previous_value: ResellerSupportPolicy = ...) -> None: ...
    new_value: bb.Attribute[ResellerSupportPolicy] = ...
    previous_value: bb.Attribute[ResellerSupportPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ResellerSupportChangePolicyDetails_validator: bv.Validator = ...

class ResellerSupportChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ResellerSupportChangePolicyType_validator: bv.Validator = ...

class ResellerSupportPolicy(bb.Union):
    disabled: ResellerSupportPolicy = ...
    enabled: ResellerSupportPolicy = ...
    other: ResellerSupportPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ResellerSupportPolicy_validator: bv.Validator = ...

class ResellerSupportSessionEndDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ResellerSupportSessionEndDetails_validator: bv.Validator = ...

class ResellerSupportSessionEndType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ResellerSupportSessionEndType_validator: bv.Validator = ...

class ResellerSupportSessionStartDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ResellerSupportSessionStartDetails_validator: bv.Validator = ...

class ResellerSupportSessionStartType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ResellerSupportSessionStartType_validator: bv.Validator = ...

class RewindFolderDetails(bb.Struct):
    def __init__(self,
                 rewind_folder_target_ts_ms: datetime.datetime = ...) -> None: ...
    rewind_folder_target_ts_ms: bb.Attribute[datetime.datetime] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RewindFolderDetails_validator: bv.Validator = ...

class RewindFolderType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RewindFolderType_validator: bv.Validator = ...

class RewindPolicy(bb.Union):
    admins_only: RewindPolicy = ...
    everyone: RewindPolicy = ...
    other: RewindPolicy = ...

    def is_admins_only(self) -> bool: ...

    def is_everyone(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RewindPolicy_validator: bv.Validator = ...

class RewindPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: RewindPolicy = ...,
                 previous_value: RewindPolicy = ...) -> None: ...
    new_value: bb.Attribute[RewindPolicy] = ...
    previous_value: bb.Attribute[RewindPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RewindPolicyChangedDetails_validator: bv.Validator = ...

class RewindPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RewindPolicyChangedType_validator: bv.Validator = ...

class SecondaryEmailDeletedDetails(bb.Struct):
    def __init__(self,
                 secondary_email: Text = ...) -> None: ...
    secondary_email: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryEmailDeletedDetails_validator: bv.Validator = ...

class SecondaryEmailDeletedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryEmailDeletedType_validator: bv.Validator = ...

class SecondaryEmailVerifiedDetails(bb.Struct):
    def __init__(self,
                 secondary_email: Text = ...) -> None: ...
    secondary_email: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryEmailVerifiedDetails_validator: bv.Validator = ...

class SecondaryEmailVerifiedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryEmailVerifiedType_validator: bv.Validator = ...

class SecondaryMailsPolicy(bb.Union):
    disabled: SecondaryMailsPolicy = ...
    enabled: SecondaryMailsPolicy = ...
    other: SecondaryMailsPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryMailsPolicy_validator: bv.Validator = ...

class SecondaryMailsPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 previous_value: SecondaryMailsPolicy = ...,
                 new_value: SecondaryMailsPolicy = ...) -> None: ...
    previous_value: bb.Attribute[SecondaryMailsPolicy] = ...
    new_value: bb.Attribute[SecondaryMailsPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryMailsPolicyChangedDetails_validator: bv.Validator = ...

class SecondaryMailsPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryMailsPolicyChangedType_validator: bv.Validator = ...

class SecondaryTeamRequestAcceptedDetails(bb.Struct):
    def __init__(self,
                 primary_team: Text = ...,
                 sent_by: Text = ...) -> None: ...
    primary_team: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryTeamRequestAcceptedDetails_validator: bv.Validator = ...

class SecondaryTeamRequestCanceledDetails(bb.Struct):
    def __init__(self,
                 sent_to: Text = ...,
                 sent_by: Text = ...) -> None: ...
    sent_to: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryTeamRequestCanceledDetails_validator: bv.Validator = ...

class SecondaryTeamRequestExpiredDetails(bb.Struct):
    def __init__(self,
                 sent_to: Text = ...) -> None: ...
    sent_to: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryTeamRequestExpiredDetails_validator: bv.Validator = ...

class SecondaryTeamRequestReminderDetails(bb.Struct):
    def __init__(self,
                 sent_to: Text = ...) -> None: ...
    sent_to: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SecondaryTeamRequestReminderDetails_validator: bv.Validator = ...

class SendForSignaturePolicy(bb.Union):
    disabled: SendForSignaturePolicy = ...
    enabled: SendForSignaturePolicy = ...
    other: SendForSignaturePolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SendForSignaturePolicy_validator: bv.Validator = ...

class SendForSignaturePolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: SendForSignaturePolicy = ...,
                 previous_value: SendForSignaturePolicy = ...) -> None: ...
    new_value: bb.Attribute[SendForSignaturePolicy] = ...
    previous_value: bb.Attribute[SendForSignaturePolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SendForSignaturePolicyChangedDetails_validator: bv.Validator = ...

class SendForSignaturePolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SendForSignaturePolicyChangedType_validator: bv.Validator = ...

class SfAddGroupDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...,
                 team_name: Text = ...,
                 sharing_permission: Optional[Text] = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    team_name: bb.Attribute[Text] = ...
    sharing_permission: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfAddGroupDetails_validator: bv.Validator = ...

class SfAddGroupType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfAddGroupType_validator: bv.Validator = ...

class SfAllowNonMembersToViewSharedLinksDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...,
                 shared_folder_type: Optional[Text] = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    shared_folder_type: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfAllowNonMembersToViewSharedLinksDetails_validator: bv.Validator = ...

class SfAllowNonMembersToViewSharedLinksType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfAllowNonMembersToViewSharedLinksType_validator: bv.Validator = ...

class SfExternalInviteWarnDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...,
                 new_sharing_permission: Optional[Text] = ...,
                 previous_sharing_permission: Optional[Text] = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    new_sharing_permission: bb.Attribute[Optional[Text]] = ...
    previous_sharing_permission: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfExternalInviteWarnDetails_validator: bv.Validator = ...

class SfExternalInviteWarnType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfExternalInviteWarnType_validator: bv.Validator = ...

class SfFbInviteChangeRoleDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...,
                 previous_sharing_permission: Optional[Text] = ...,
                 new_sharing_permission: Optional[Text] = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    previous_sharing_permission: bb.Attribute[Optional[Text]] = ...
    new_sharing_permission: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfFbInviteChangeRoleDetails_validator: bv.Validator = ...

class SfFbInviteChangeRoleType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfFbInviteChangeRoleType_validator: bv.Validator = ...

class SfFbInviteDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...,
                 sharing_permission: Optional[Text] = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    sharing_permission: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfFbInviteDetails_validator: bv.Validator = ...

class SfFbInviteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfFbInviteType_validator: bv.Validator = ...

class SfFbUninviteDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfFbUninviteDetails_validator: bv.Validator = ...

class SfFbUninviteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfFbUninviteType_validator: bv.Validator = ...

class SfInviteGroupDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfInviteGroupDetails_validator: bv.Validator = ...

class SfInviteGroupType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfInviteGroupType_validator: bv.Validator = ...

class SfTeamGrantAccessDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamGrantAccessDetails_validator: bv.Validator = ...

class SfTeamGrantAccessType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamGrantAccessType_validator: bv.Validator = ...

class SfTeamInviteChangeRoleDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...,
                 new_sharing_permission: Optional[Text] = ...,
                 previous_sharing_permission: Optional[Text] = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    new_sharing_permission: bb.Attribute[Optional[Text]] = ...
    previous_sharing_permission: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamInviteChangeRoleDetails_validator: bv.Validator = ...

class SfTeamInviteChangeRoleType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamInviteChangeRoleType_validator: bv.Validator = ...

class SfTeamInviteDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...,
                 sharing_permission: Optional[Text] = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    sharing_permission: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamInviteDetails_validator: bv.Validator = ...

class SfTeamInviteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamInviteType_validator: bv.Validator = ...

class SfTeamJoinDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamJoinDetails_validator: bv.Validator = ...

class SfTeamJoinFromOobLinkDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...,
                 token_key: Optional[Text] = ...,
                 sharing_permission: Optional[Text] = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    token_key: bb.Attribute[Optional[Text]] = ...
    sharing_permission: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamJoinFromOobLinkDetails_validator: bv.Validator = ...

class SfTeamJoinFromOobLinkType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamJoinFromOobLinkType_validator: bv.Validator = ...

class SfTeamJoinType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamJoinType_validator: bv.Validator = ...

class SfTeamUninviteDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...,
                 original_folder_name: Text = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    original_folder_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamUninviteDetails_validator: bv.Validator = ...

class SfTeamUninviteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SfTeamUninviteType_validator: bv.Validator = ...

class SharedContentAddInviteesDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 invitees: List[Text] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    invitees: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentAddInviteesDetails_validator: bv.Validator = ...

class SharedContentAddInviteesType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentAddInviteesType_validator: bv.Validator = ...

class SharedContentAddLinkExpiryDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[datetime.datetime] = ...) -> None: ...
    new_value: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentAddLinkExpiryDetails_validator: bv.Validator = ...

class SharedContentAddLinkExpiryType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentAddLinkExpiryType_validator: bv.Validator = ...

class SharedContentAddLinkPasswordDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentAddLinkPasswordDetails_validator: bv.Validator = ...

class SharedContentAddLinkPasswordType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentAddLinkPasswordType_validator: bv.Validator = ...

class SharedContentAddMemberDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentAddMemberDetails_validator: bv.Validator = ...

class SharedContentAddMemberType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentAddMemberType_validator: bv.Validator = ...

class SharedContentChangeDownloadsPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: DownloadPolicyType = ...,
                 previous_value: Optional[DownloadPolicyType] = ...) -> None: ...
    new_value: bb.Attribute[DownloadPolicyType] = ...
    previous_value: bb.Attribute[Optional[DownloadPolicyType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeDownloadsPolicyDetails_validator: bv.Validator = ...

class SharedContentChangeDownloadsPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeDownloadsPolicyType_validator: bv.Validator = ...

class SharedContentChangeInviteeRoleDetails(bb.Struct):
    def __init__(self,
                 new_access_level: sharing.AccessLevel = ...,
                 invitee: Text = ...,
                 previous_access_level: Optional[sharing.AccessLevel] = ...) -> None: ...
    new_access_level: bb.Attribute[sharing.AccessLevel] = ...
    invitee: bb.Attribute[Text] = ...
    previous_access_level: bb.Attribute[Optional[sharing.AccessLevel]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeInviteeRoleDetails_validator: bv.Validator = ...

class SharedContentChangeInviteeRoleType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeInviteeRoleType_validator: bv.Validator = ...

class SharedContentChangeLinkAudienceDetails(bb.Struct):
    def __init__(self,
                 new_value: sharing.LinkAudience = ...,
                 previous_value: Optional[sharing.LinkAudience] = ...) -> None: ...
    new_value: bb.Attribute[sharing.LinkAudience] = ...
    previous_value: bb.Attribute[Optional[sharing.LinkAudience]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeLinkAudienceDetails_validator: bv.Validator = ...

class SharedContentChangeLinkAudienceType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeLinkAudienceType_validator: bv.Validator = ...

class SharedContentChangeLinkExpiryDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[datetime.datetime] = ...,
                 previous_value: Optional[datetime.datetime] = ...) -> None: ...
    new_value: bb.Attribute[Optional[datetime.datetime]] = ...
    previous_value: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeLinkExpiryDetails_validator: bv.Validator = ...

class SharedContentChangeLinkExpiryType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeLinkExpiryType_validator: bv.Validator = ...

class SharedContentChangeLinkPasswordDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeLinkPasswordDetails_validator: bv.Validator = ...

class SharedContentChangeLinkPasswordType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeLinkPasswordType_validator: bv.Validator = ...

class SharedContentChangeMemberRoleDetails(bb.Struct):
    def __init__(self,
                 new_access_level: sharing.AccessLevel = ...,
                 previous_access_level: Optional[sharing.AccessLevel] = ...) -> None: ...
    new_access_level: bb.Attribute[sharing.AccessLevel] = ...
    previous_access_level: bb.Attribute[Optional[sharing.AccessLevel]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeMemberRoleDetails_validator: bv.Validator = ...

class SharedContentChangeMemberRoleType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeMemberRoleType_validator: bv.Validator = ...

class SharedContentChangeViewerInfoPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: sharing.ViewerInfoPolicy = ...,
                 previous_value: Optional[sharing.ViewerInfoPolicy] = ...) -> None: ...
    new_value: bb.Attribute[sharing.ViewerInfoPolicy] = ...
    previous_value: bb.Attribute[Optional[sharing.ViewerInfoPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeViewerInfoPolicyDetails_validator: bv.Validator = ...

class SharedContentChangeViewerInfoPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentChangeViewerInfoPolicyType_validator: bv.Validator = ...

class SharedContentClaimInvitationDetails(bb.Struct):
    def __init__(self,
                 shared_content_link: Optional[Text] = ...) -> None: ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentClaimInvitationDetails_validator: bv.Validator = ...

class SharedContentClaimInvitationType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentClaimInvitationType_validator: bv.Validator = ...

class SharedContentCopyDetails(bb.Struct):
    def __init__(self,
                 shared_content_link: Text = ...,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 destination_path: Text = ...,
                 shared_content_owner: Optional[UserLogInfo] = ...) -> None: ...
    shared_content_link: bb.Attribute[Text] = ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    destination_path: bb.Attribute[Text] = ...
    shared_content_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentCopyDetails_validator: bv.Validator = ...

class SharedContentCopyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentCopyType_validator: bv.Validator = ...

class SharedContentDownloadDetails(bb.Struct):
    def __init__(self,
                 shared_content_link: Text = ...,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_owner: Optional[UserLogInfo] = ...) -> None: ...
    shared_content_link: bb.Attribute[Text] = ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentDownloadDetails_validator: bv.Validator = ...

class SharedContentDownloadType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentDownloadType_validator: bv.Validator = ...

class SharedContentRelinquishMembershipDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRelinquishMembershipDetails_validator: bv.Validator = ...

class SharedContentRelinquishMembershipType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRelinquishMembershipType_validator: bv.Validator = ...

class SharedContentRemoveInviteesDetails(bb.Struct):
    def __init__(self,
                 invitees: List[Text] = ...) -> None: ...
    invitees: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRemoveInviteesDetails_validator: bv.Validator = ...

class SharedContentRemoveInviteesType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRemoveInviteesType_validator: bv.Validator = ...

class SharedContentRemoveLinkExpiryDetails(bb.Struct):
    def __init__(self,
                 previous_value: Optional[datetime.datetime] = ...) -> None: ...
    previous_value: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRemoveLinkExpiryDetails_validator: bv.Validator = ...

class SharedContentRemoveLinkExpiryType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRemoveLinkExpiryType_validator: bv.Validator = ...

class SharedContentRemoveLinkPasswordDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRemoveLinkPasswordDetails_validator: bv.Validator = ...

class SharedContentRemoveLinkPasswordType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRemoveLinkPasswordType_validator: bv.Validator = ...

class SharedContentRemoveMemberDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: Optional[sharing.AccessLevel] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[Optional[sharing.AccessLevel]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRemoveMemberDetails_validator: bv.Validator = ...

class SharedContentRemoveMemberType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRemoveMemberType_validator: bv.Validator = ...

class SharedContentRequestAccessDetails(bb.Struct):
    def __init__(self,
                 shared_content_link: Optional[Text] = ...) -> None: ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRequestAccessDetails_validator: bv.Validator = ...

class SharedContentRequestAccessType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRequestAccessType_validator: bv.Validator = ...

class SharedContentRestoreInviteesDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 invitees: List[Text] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    invitees: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRestoreInviteesDetails_validator: bv.Validator = ...

class SharedContentRestoreInviteesType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRestoreInviteesType_validator: bv.Validator = ...

class SharedContentRestoreMemberDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRestoreMemberDetails_validator: bv.Validator = ...

class SharedContentRestoreMemberType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentRestoreMemberType_validator: bv.Validator = ...

class SharedContentUnshareDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentUnshareDetails_validator: bv.Validator = ...

class SharedContentUnshareType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentUnshareType_validator: bv.Validator = ...

class SharedContentViewDetails(bb.Struct):
    def __init__(self,
                 shared_content_link: Text = ...,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_owner: Optional[UserLogInfo] = ...) -> None: ...
    shared_content_link: bb.Attribute[Text] = ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentViewDetails_validator: bv.Validator = ...

class SharedContentViewType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedContentViewType_validator: bv.Validator = ...

class SharedFolderChangeLinkPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: sharing.SharedLinkPolicy = ...,
                 previous_value: Optional[sharing.SharedLinkPolicy] = ...) -> None: ...
    new_value: bb.Attribute[sharing.SharedLinkPolicy] = ...
    previous_value: bb.Attribute[Optional[sharing.SharedLinkPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderChangeLinkPolicyDetails_validator: bv.Validator = ...

class SharedFolderChangeLinkPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderChangeLinkPolicyType_validator: bv.Validator = ...

class SharedFolderChangeMembersInheritancePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: SharedFolderMembersInheritancePolicy = ...,
                 previous_value: Optional[SharedFolderMembersInheritancePolicy] = ...) -> None: ...
    new_value: bb.Attribute[SharedFolderMembersInheritancePolicy] = ...
    previous_value: bb.Attribute[Optional[SharedFolderMembersInheritancePolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderChangeMembersInheritancePolicyDetails_validator: bv.Validator = ...

class SharedFolderChangeMembersInheritancePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderChangeMembersInheritancePolicyType_validator: bv.Validator = ...

class SharedFolderChangeMembersManagementPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: sharing.AclUpdatePolicy = ...,
                 previous_value: Optional[sharing.AclUpdatePolicy] = ...) -> None: ...
    new_value: bb.Attribute[sharing.AclUpdatePolicy] = ...
    previous_value: bb.Attribute[Optional[sharing.AclUpdatePolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderChangeMembersManagementPolicyDetails_validator: bv.Validator = ...

class SharedFolderChangeMembersManagementPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderChangeMembersManagementPolicyType_validator: bv.Validator = ...

class SharedFolderChangeMembersPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: sharing.MemberPolicy = ...,
                 previous_value: Optional[sharing.MemberPolicy] = ...) -> None: ...
    new_value: bb.Attribute[sharing.MemberPolicy] = ...
    previous_value: bb.Attribute[Optional[sharing.MemberPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderChangeMembersPolicyDetails_validator: bv.Validator = ...

class SharedFolderChangeMembersPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderChangeMembersPolicyType_validator: bv.Validator = ...

class SharedFolderCreateDetails(bb.Struct):
    def __init__(self,
                 target_ns_id: Optional[Text] = ...) -> None: ...
    target_ns_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderCreateDetails_validator: bv.Validator = ...

class SharedFolderCreateType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderCreateType_validator: bv.Validator = ...

class SharedFolderDeclineInvitationDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderDeclineInvitationDetails_validator: bv.Validator = ...

class SharedFolderDeclineInvitationType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderDeclineInvitationType_validator: bv.Validator = ...

class SharedFolderMembersInheritancePolicy(bb.Union):
    dont_inherit_members: SharedFolderMembersInheritancePolicy = ...
    inherit_members: SharedFolderMembersInheritancePolicy = ...
    other: SharedFolderMembersInheritancePolicy = ...

    def is_dont_inherit_members(self) -> bool: ...

    def is_inherit_members(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderMembersInheritancePolicy_validator: bv.Validator = ...

class SharedFolderMountDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderMountDetails_validator: bv.Validator = ...

class SharedFolderMountType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderMountType_validator: bv.Validator = ...

class SharedFolderNestDetails(bb.Struct):
    def __init__(self,
                 previous_parent_ns_id: Optional[Text] = ...,
                 new_parent_ns_id: Optional[Text] = ...,
                 previous_ns_path: Optional[Text] = ...,
                 new_ns_path: Optional[Text] = ...) -> None: ...
    previous_parent_ns_id: bb.Attribute[Optional[Text]] = ...
    new_parent_ns_id: bb.Attribute[Optional[Text]] = ...
    previous_ns_path: bb.Attribute[Optional[Text]] = ...
    new_ns_path: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderNestDetails_validator: bv.Validator = ...

class SharedFolderNestType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderNestType_validator: bv.Validator = ...

class SharedFolderTransferOwnershipDetails(bb.Struct):
    def __init__(self,
                 new_owner_email: Text = ...,
                 previous_owner_email: Optional[Text] = ...) -> None: ...
    new_owner_email: bb.Attribute[Text] = ...
    previous_owner_email: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderTransferOwnershipDetails_validator: bv.Validator = ...

class SharedFolderTransferOwnershipType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderTransferOwnershipType_validator: bv.Validator = ...

class SharedFolderUnmountDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderUnmountDetails_validator: bv.Validator = ...

class SharedFolderUnmountType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderUnmountType_validator: bv.Validator = ...

class SharedLinkAccessLevel(bb.Union):
    none: SharedLinkAccessLevel = ...
    reader: SharedLinkAccessLevel = ...
    writer: SharedLinkAccessLevel = ...
    other: SharedLinkAccessLevel = ...

    def is_none(self) -> bool: ...

    def is_reader(self) -> bool: ...

    def is_writer(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkAccessLevel_validator: bv.Validator = ...

class SharedLinkAddExpiryDetails(bb.Struct):
    def __init__(self,
                 new_value: datetime.datetime = ...) -> None: ...
    new_value: bb.Attribute[datetime.datetime] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkAddExpiryDetails_validator: bv.Validator = ...

class SharedLinkAddExpiryType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkAddExpiryType_validator: bv.Validator = ...

class SharedLinkChangeExpiryDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[datetime.datetime] = ...,
                 previous_value: Optional[datetime.datetime] = ...) -> None: ...
    new_value: bb.Attribute[Optional[datetime.datetime]] = ...
    previous_value: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkChangeExpiryDetails_validator: bv.Validator = ...

class SharedLinkChangeExpiryType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkChangeExpiryType_validator: bv.Validator = ...

class SharedLinkChangeVisibilityDetails(bb.Struct):
    def __init__(self,
                 new_value: SharedLinkVisibility = ...,
                 previous_value: Optional[SharedLinkVisibility] = ...) -> None: ...
    new_value: bb.Attribute[SharedLinkVisibility] = ...
    previous_value: bb.Attribute[Optional[SharedLinkVisibility]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkChangeVisibilityDetails_validator: bv.Validator = ...

class SharedLinkChangeVisibilityType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkChangeVisibilityType_validator: bv.Validator = ...

class SharedLinkCopyDetails(bb.Struct):
    def __init__(self,
                 shared_link_owner: Optional[UserLogInfo] = ...) -> None: ...
    shared_link_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkCopyDetails_validator: bv.Validator = ...

class SharedLinkCopyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkCopyType_validator: bv.Validator = ...

class SharedLinkCreateDetails(bb.Struct):
    def __init__(self,
                 shared_link_access_level: Optional[SharedLinkAccessLevel] = ...) -> None: ...
    shared_link_access_level: bb.Attribute[Optional[SharedLinkAccessLevel]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkCreateDetails_validator: bv.Validator = ...

class SharedLinkCreateType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkCreateType_validator: bv.Validator = ...

class SharedLinkDisableDetails(bb.Struct):
    def __init__(self,
                 shared_link_owner: Optional[UserLogInfo] = ...) -> None: ...
    shared_link_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkDisableDetails_validator: bv.Validator = ...

class SharedLinkDisableType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkDisableType_validator: bv.Validator = ...

class SharedLinkDownloadDetails(bb.Struct):
    def __init__(self,
                 shared_link_owner: Optional[UserLogInfo] = ...) -> None: ...
    shared_link_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkDownloadDetails_validator: bv.Validator = ...

class SharedLinkDownloadType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkDownloadType_validator: bv.Validator = ...

class SharedLinkRemoveExpiryDetails(bb.Struct):
    def __init__(self,
                 previous_value: Optional[datetime.datetime] = ...) -> None: ...
    previous_value: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkRemoveExpiryDetails_validator: bv.Validator = ...

class SharedLinkRemoveExpiryType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkRemoveExpiryType_validator: bv.Validator = ...

class SharedLinkSettingsAddExpirationDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_link: Optional[Text] = ...,
                 new_value: Optional[datetime.datetime] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    new_value: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsAddExpirationDetails_validator: bv.Validator = ...

class SharedLinkSettingsAddExpirationType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsAddExpirationType_validator: bv.Validator = ...

class SharedLinkSettingsAddPasswordDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_link: Optional[Text] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsAddPasswordDetails_validator: bv.Validator = ...

class SharedLinkSettingsAddPasswordType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsAddPasswordType_validator: bv.Validator = ...

class SharedLinkSettingsAllowDownloadDisabledDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_link: Optional[Text] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsAllowDownloadDisabledDetails_validator: bv.Validator = ...

class SharedLinkSettingsAllowDownloadDisabledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsAllowDownloadDisabledType_validator: bv.Validator = ...

class SharedLinkSettingsAllowDownloadEnabledDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_link: Optional[Text] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsAllowDownloadEnabledDetails_validator: bv.Validator = ...

class SharedLinkSettingsAllowDownloadEnabledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsAllowDownloadEnabledType_validator: bv.Validator = ...

class SharedLinkSettingsChangeAudienceDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 new_value: sharing.LinkAudience = ...,
                 shared_content_link: Optional[Text] = ...,
                 previous_value: Optional[sharing.LinkAudience] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    new_value: bb.Attribute[sharing.LinkAudience] = ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    previous_value: bb.Attribute[Optional[sharing.LinkAudience]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsChangeAudienceDetails_validator: bv.Validator = ...

class SharedLinkSettingsChangeAudienceType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsChangeAudienceType_validator: bv.Validator = ...

class SharedLinkSettingsChangeExpirationDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_link: Optional[Text] = ...,
                 new_value: Optional[datetime.datetime] = ...,
                 previous_value: Optional[datetime.datetime] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    new_value: bb.Attribute[Optional[datetime.datetime]] = ...
    previous_value: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsChangeExpirationDetails_validator: bv.Validator = ...

class SharedLinkSettingsChangeExpirationType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsChangeExpirationType_validator: bv.Validator = ...

class SharedLinkSettingsChangePasswordDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_link: Optional[Text] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsChangePasswordDetails_validator: bv.Validator = ...

class SharedLinkSettingsChangePasswordType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsChangePasswordType_validator: bv.Validator = ...

class SharedLinkSettingsRemoveExpirationDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_link: Optional[Text] = ...,
                 previous_value: Optional[datetime.datetime] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    previous_value: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsRemoveExpirationDetails_validator: bv.Validator = ...

class SharedLinkSettingsRemoveExpirationType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsRemoveExpirationType_validator: bv.Validator = ...

class SharedLinkSettingsRemovePasswordDetails(bb.Struct):
    def __init__(self,
                 shared_content_access_level: sharing.AccessLevel = ...,
                 shared_content_link: Optional[Text] = ...) -> None: ...
    shared_content_access_level: bb.Attribute[sharing.AccessLevel] = ...
    shared_content_link: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsRemovePasswordDetails_validator: bv.Validator = ...

class SharedLinkSettingsRemovePasswordType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkSettingsRemovePasswordType_validator: bv.Validator = ...

class SharedLinkShareDetails(bb.Struct):
    def __init__(self,
                 shared_link_owner: Optional[UserLogInfo] = ...,
                 external_users: Optional[List[ExternalUserLogInfo]] = ...) -> None: ...
    shared_link_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    external_users: bb.Attribute[Optional[List[ExternalUserLogInfo]]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkShareDetails_validator: bv.Validator = ...

class SharedLinkShareType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkShareType_validator: bv.Validator = ...

class SharedLinkViewDetails(bb.Struct):
    def __init__(self,
                 shared_link_owner: Optional[UserLogInfo] = ...) -> None: ...
    shared_link_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkViewDetails_validator: bv.Validator = ...

class SharedLinkViewType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkViewType_validator: bv.Validator = ...

class SharedLinkVisibility(bb.Union):
    no_one: SharedLinkVisibility = ...
    password: SharedLinkVisibility = ...
    public: SharedLinkVisibility = ...
    team_only: SharedLinkVisibility = ...
    other: SharedLinkVisibility = ...

    def is_no_one(self) -> bool: ...

    def is_password(self) -> bool: ...

    def is_public(self) -> bool: ...

    def is_team_only(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkVisibility_validator: bv.Validator = ...

class SharedNoteOpenedDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedNoteOpenedDetails_validator: bv.Validator = ...

class SharedNoteOpenedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedNoteOpenedType_validator: bv.Validator = ...

class SharingChangeFolderJoinPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: SharingFolderJoinPolicy = ...,
                 previous_value: Optional[SharingFolderJoinPolicy] = ...) -> None: ...
    new_value: bb.Attribute[SharingFolderJoinPolicy] = ...
    previous_value: bb.Attribute[Optional[SharingFolderJoinPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeFolderJoinPolicyDetails_validator: bv.Validator = ...

class SharingChangeFolderJoinPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeFolderJoinPolicyType_validator: bv.Validator = ...

class SharingChangeLinkAllowChangeExpirationPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: EnforceLinkPasswordPolicy = ...,
                 previous_value: Optional[EnforceLinkPasswordPolicy] = ...) -> None: ...
    new_value: bb.Attribute[EnforceLinkPasswordPolicy] = ...
    previous_value: bb.Attribute[Optional[EnforceLinkPasswordPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeLinkAllowChangeExpirationPolicyDetails_validator: bv.Validator = ...

class SharingChangeLinkAllowChangeExpirationPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeLinkAllowChangeExpirationPolicyType_validator: bv.Validator = ...

class SharingChangeLinkDefaultExpirationPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: DefaultLinkExpirationDaysPolicy = ...,
                 previous_value: Optional[DefaultLinkExpirationDaysPolicy] = ...) -> None: ...
    new_value: bb.Attribute[DefaultLinkExpirationDaysPolicy] = ...
    previous_value: bb.Attribute[Optional[DefaultLinkExpirationDaysPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeLinkDefaultExpirationPolicyDetails_validator: bv.Validator = ...

class SharingChangeLinkDefaultExpirationPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeLinkDefaultExpirationPolicyType_validator: bv.Validator = ...

class SharingChangeLinkEnforcePasswordPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: ChangeLinkExpirationPolicy = ...,
                 previous_value: Optional[ChangeLinkExpirationPolicy] = ...) -> None: ...
    new_value: bb.Attribute[ChangeLinkExpirationPolicy] = ...
    previous_value: bb.Attribute[Optional[ChangeLinkExpirationPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeLinkEnforcePasswordPolicyDetails_validator: bv.Validator = ...

class SharingChangeLinkEnforcePasswordPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeLinkEnforcePasswordPolicyType_validator: bv.Validator = ...

class SharingChangeLinkPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: SharingLinkPolicy = ...,
                 previous_value: Optional[SharingLinkPolicy] = ...) -> None: ...
    new_value: bb.Attribute[SharingLinkPolicy] = ...
    previous_value: bb.Attribute[Optional[SharingLinkPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeLinkPolicyDetails_validator: bv.Validator = ...

class SharingChangeLinkPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeLinkPolicyType_validator: bv.Validator = ...

class SharingChangeMemberPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: SharingMemberPolicy = ...,
                 previous_value: Optional[SharingMemberPolicy] = ...) -> None: ...
    new_value: bb.Attribute[SharingMemberPolicy] = ...
    previous_value: bb.Attribute[Optional[SharingMemberPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeMemberPolicyDetails_validator: bv.Validator = ...

class SharingChangeMemberPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingChangeMemberPolicyType_validator: bv.Validator = ...

class SharingFolderJoinPolicy(bb.Union):
    from_anyone: SharingFolderJoinPolicy = ...
    from_team_only: SharingFolderJoinPolicy = ...
    other: SharingFolderJoinPolicy = ...

    def is_from_anyone(self) -> bool: ...

    def is_from_team_only(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingFolderJoinPolicy_validator: bv.Validator = ...

class SharingLinkPolicy(bb.Union):
    default_no_one: SharingLinkPolicy = ...
    default_private: SharingLinkPolicy = ...
    default_public: SharingLinkPolicy = ...
    only_private: SharingLinkPolicy = ...
    other: SharingLinkPolicy = ...

    def is_default_no_one(self) -> bool: ...

    def is_default_private(self) -> bool: ...

    def is_default_public(self) -> bool: ...

    def is_only_private(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingLinkPolicy_validator: bv.Validator = ...

class SharingMemberPolicy(bb.Union):
    allow: SharingMemberPolicy = ...
    forbid: SharingMemberPolicy = ...
    forbid_with_exclusions: SharingMemberPolicy = ...
    other: SharingMemberPolicy = ...

    def is_allow(self) -> bool: ...

    def is_forbid(self) -> bool: ...

    def is_forbid_with_exclusions(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingMemberPolicy_validator: bv.Validator = ...

class ShmodelDisableDownloadsDetails(bb.Struct):
    def __init__(self,
                 shared_link_owner: Optional[UserLogInfo] = ...) -> None: ...
    shared_link_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShmodelDisableDownloadsDetails_validator: bv.Validator = ...

class ShmodelDisableDownloadsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShmodelDisableDownloadsType_validator: bv.Validator = ...

class ShmodelEnableDownloadsDetails(bb.Struct):
    def __init__(self,
                 shared_link_owner: Optional[UserLogInfo] = ...) -> None: ...
    shared_link_owner: bb.Attribute[Optional[UserLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShmodelEnableDownloadsDetails_validator: bv.Validator = ...

class ShmodelEnableDownloadsType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShmodelEnableDownloadsType_validator: bv.Validator = ...

class ShmodelGroupShareDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShmodelGroupShareDetails_validator: bv.Validator = ...

class ShmodelGroupShareType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShmodelGroupShareType_validator: bv.Validator = ...

class ShowcaseAccessGrantedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseAccessGrantedDetails_validator: bv.Validator = ...

class ShowcaseAccessGrantedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseAccessGrantedType_validator: bv.Validator = ...

class ShowcaseAddMemberDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseAddMemberDetails_validator: bv.Validator = ...

class ShowcaseAddMemberType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseAddMemberType_validator: bv.Validator = ...

class ShowcaseArchivedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseArchivedDetails_validator: bv.Validator = ...

class ShowcaseArchivedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseArchivedType_validator: bv.Validator = ...

class ShowcaseChangeDownloadPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: ShowcaseDownloadPolicy = ...,
                 previous_value: ShowcaseDownloadPolicy = ...) -> None: ...
    new_value: bb.Attribute[ShowcaseDownloadPolicy] = ...
    previous_value: bb.Attribute[ShowcaseDownloadPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseChangeDownloadPolicyDetails_validator: bv.Validator = ...

class ShowcaseChangeDownloadPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseChangeDownloadPolicyType_validator: bv.Validator = ...

class ShowcaseChangeEnabledPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: ShowcaseEnabledPolicy = ...,
                 previous_value: ShowcaseEnabledPolicy = ...) -> None: ...
    new_value: bb.Attribute[ShowcaseEnabledPolicy] = ...
    previous_value: bb.Attribute[ShowcaseEnabledPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseChangeEnabledPolicyDetails_validator: bv.Validator = ...

class ShowcaseChangeEnabledPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseChangeEnabledPolicyType_validator: bv.Validator = ...

class ShowcaseChangeExternalSharingPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: ShowcaseExternalSharingPolicy = ...,
                 previous_value: ShowcaseExternalSharingPolicy = ...) -> None: ...
    new_value: bb.Attribute[ShowcaseExternalSharingPolicy] = ...
    previous_value: bb.Attribute[ShowcaseExternalSharingPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseChangeExternalSharingPolicyDetails_validator: bv.Validator = ...

class ShowcaseChangeExternalSharingPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseChangeExternalSharingPolicyType_validator: bv.Validator = ...

class ShowcaseCreatedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseCreatedDetails_validator: bv.Validator = ...

class ShowcaseCreatedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseCreatedType_validator: bv.Validator = ...

class ShowcaseDeleteCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseDeleteCommentDetails_validator: bv.Validator = ...

class ShowcaseDeleteCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseDeleteCommentType_validator: bv.Validator = ...

class ShowcaseDocumentLogInfo(bb.Struct):
    def __init__(self,
                 showcase_id: Text = ...,
                 showcase_title: Text = ...) -> None: ...
    showcase_id: bb.Attribute[Text] = ...
    showcase_title: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseDocumentLogInfo_validator: bv.Validator = ...

class ShowcaseDownloadPolicy(bb.Union):
    disabled: ShowcaseDownloadPolicy = ...
    enabled: ShowcaseDownloadPolicy = ...
    other: ShowcaseDownloadPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseDownloadPolicy_validator: bv.Validator = ...

class ShowcaseEditCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseEditCommentDetails_validator: bv.Validator = ...

class ShowcaseEditCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseEditCommentType_validator: bv.Validator = ...

class ShowcaseEditedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseEditedDetails_validator: bv.Validator = ...

class ShowcaseEditedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseEditedType_validator: bv.Validator = ...

class ShowcaseEnabledPolicy(bb.Union):
    disabled: ShowcaseEnabledPolicy = ...
    enabled: ShowcaseEnabledPolicy = ...
    other: ShowcaseEnabledPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseEnabledPolicy_validator: bv.Validator = ...

class ShowcaseExternalSharingPolicy(bb.Union):
    disabled: ShowcaseExternalSharingPolicy = ...
    enabled: ShowcaseExternalSharingPolicy = ...
    other: ShowcaseExternalSharingPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseExternalSharingPolicy_validator: bv.Validator = ...

class ShowcaseFileAddedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseFileAddedDetails_validator: bv.Validator = ...

class ShowcaseFileAddedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseFileAddedType_validator: bv.Validator = ...

class ShowcaseFileDownloadDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 download_type: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    download_type: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseFileDownloadDetails_validator: bv.Validator = ...

class ShowcaseFileDownloadType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseFileDownloadType_validator: bv.Validator = ...

class ShowcaseFileRemovedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseFileRemovedDetails_validator: bv.Validator = ...

class ShowcaseFileRemovedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseFileRemovedType_validator: bv.Validator = ...

class ShowcaseFileViewDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseFileViewDetails_validator: bv.Validator = ...

class ShowcaseFileViewType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseFileViewType_validator: bv.Validator = ...

class ShowcasePermanentlyDeletedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcasePermanentlyDeletedDetails_validator: bv.Validator = ...

class ShowcasePermanentlyDeletedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcasePermanentlyDeletedType_validator: bv.Validator = ...

class ShowcasePostCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcasePostCommentDetails_validator: bv.Validator = ...

class ShowcasePostCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcasePostCommentType_validator: bv.Validator = ...

class ShowcaseRemoveMemberDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseRemoveMemberDetails_validator: bv.Validator = ...

class ShowcaseRemoveMemberType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseRemoveMemberType_validator: bv.Validator = ...

class ShowcaseRenamedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseRenamedDetails_validator: bv.Validator = ...

class ShowcaseRenamedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseRenamedType_validator: bv.Validator = ...

class ShowcaseRequestAccessDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseRequestAccessDetails_validator: bv.Validator = ...

class ShowcaseRequestAccessType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseRequestAccessType_validator: bv.Validator = ...

class ShowcaseResolveCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseResolveCommentDetails_validator: bv.Validator = ...

class ShowcaseResolveCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseResolveCommentType_validator: bv.Validator = ...

class ShowcaseRestoredDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseRestoredDetails_validator: bv.Validator = ...

class ShowcaseRestoredType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseRestoredType_validator: bv.Validator = ...

class ShowcaseTrashedDeprecatedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseTrashedDeprecatedDetails_validator: bv.Validator = ...

class ShowcaseTrashedDeprecatedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseTrashedDeprecatedType_validator: bv.Validator = ...

class ShowcaseTrashedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseTrashedDetails_validator: bv.Validator = ...

class ShowcaseTrashedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseTrashedType_validator: bv.Validator = ...

class ShowcaseUnresolveCommentDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...,
                 comment_text: Optional[Text] = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    comment_text: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseUnresolveCommentDetails_validator: bv.Validator = ...

class ShowcaseUnresolveCommentType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseUnresolveCommentType_validator: bv.Validator = ...

class ShowcaseUntrashedDeprecatedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseUntrashedDeprecatedDetails_validator: bv.Validator = ...

class ShowcaseUntrashedDeprecatedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseUntrashedDeprecatedType_validator: bv.Validator = ...

class ShowcaseUntrashedDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseUntrashedDetails_validator: bv.Validator = ...

class ShowcaseUntrashedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseUntrashedType_validator: bv.Validator = ...

class ShowcaseViewDetails(bb.Struct):
    def __init__(self,
                 event_uuid: Text = ...) -> None: ...
    event_uuid: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseViewDetails_validator: bv.Validator = ...

class ShowcaseViewType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseViewType_validator: bv.Validator = ...

class SignInAsSessionEndDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SignInAsSessionEndDetails_validator: bv.Validator = ...

class SignInAsSessionEndType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SignInAsSessionEndType_validator: bv.Validator = ...

class SignInAsSessionStartDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SignInAsSessionStartDetails_validator: bv.Validator = ...

class SignInAsSessionStartType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SignInAsSessionStartType_validator: bv.Validator = ...

class SmartSyncChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[team_policies.SmartSyncPolicy] = ...,
                 previous_value: Optional[team_policies.SmartSyncPolicy] = ...) -> None: ...
    new_value: bb.Attribute[Optional[team_policies.SmartSyncPolicy]] = ...
    previous_value: bb.Attribute[Optional[team_policies.SmartSyncPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncChangePolicyDetails_validator: bv.Validator = ...

class SmartSyncChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncChangePolicyType_validator: bv.Validator = ...

class SmartSyncCreateAdminPrivilegeReportDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncCreateAdminPrivilegeReportDetails_validator: bv.Validator = ...

class SmartSyncCreateAdminPrivilegeReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncCreateAdminPrivilegeReportType_validator: bv.Validator = ...

class SmartSyncNotOptOutDetails(bb.Struct):
    def __init__(self,
                 previous_value: SmartSyncOptOutPolicy = ...,
                 new_value: SmartSyncOptOutPolicy = ...) -> None: ...
    previous_value: bb.Attribute[SmartSyncOptOutPolicy] = ...
    new_value: bb.Attribute[SmartSyncOptOutPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncNotOptOutDetails_validator: bv.Validator = ...

class SmartSyncNotOptOutType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncNotOptOutType_validator: bv.Validator = ...

class SmartSyncOptOutDetails(bb.Struct):
    def __init__(self,
                 previous_value: SmartSyncOptOutPolicy = ...,
                 new_value: SmartSyncOptOutPolicy = ...) -> None: ...
    previous_value: bb.Attribute[SmartSyncOptOutPolicy] = ...
    new_value: bb.Attribute[SmartSyncOptOutPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncOptOutDetails_validator: bv.Validator = ...

class SmartSyncOptOutPolicy(bb.Union):
    default: SmartSyncOptOutPolicy = ...
    opted_out: SmartSyncOptOutPolicy = ...
    other: SmartSyncOptOutPolicy = ...

    def is_default(self) -> bool: ...

    def is_opted_out(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncOptOutPolicy_validator: bv.Validator = ...

class SmartSyncOptOutType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncOptOutType_validator: bv.Validator = ...

class SmarterSmartSyncPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 previous_value: team_policies.SmarterSmartSyncPolicyState = ...,
                 new_value: team_policies.SmarterSmartSyncPolicyState = ...) -> None: ...
    previous_value: bb.Attribute[team_policies.SmarterSmartSyncPolicyState] = ...
    new_value: bb.Attribute[team_policies.SmarterSmartSyncPolicyState] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmarterSmartSyncPolicyChangedDetails_validator: bv.Validator = ...

class SmarterSmartSyncPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmarterSmartSyncPolicyChangedType_validator: bv.Validator = ...

class SpaceCapsType(bb.Union):
    hard: SpaceCapsType = ...
    off: SpaceCapsType = ...
    soft: SpaceCapsType = ...
    other: SpaceCapsType = ...

    def is_hard(self) -> bool: ...

    def is_off(self) -> bool: ...

    def is_soft(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SpaceCapsType_validator: bv.Validator = ...

class SpaceLimitsStatus(bb.Union):
    near_quota: SpaceLimitsStatus = ...
    over_quota: SpaceLimitsStatus = ...
    within_quota: SpaceLimitsStatus = ...
    other: SpaceLimitsStatus = ...

    def is_near_quota(self) -> bool: ...

    def is_over_quota(self) -> bool: ...

    def is_within_quota(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SpaceLimitsStatus_validator: bv.Validator = ...

class SsoAddCertDetails(bb.Struct):
    def __init__(self,
                 certificate_details: Certificate = ...) -> None: ...
    certificate_details: bb.Attribute[Certificate] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoAddCertDetails_validator: bv.Validator = ...

class SsoAddCertType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoAddCertType_validator: bv.Validator = ...

class SsoAddLoginUrlDetails(bb.Struct):
    def __init__(self,
                 new_value: Text = ...) -> None: ...
    new_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoAddLoginUrlDetails_validator: bv.Validator = ...

class SsoAddLoginUrlType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoAddLoginUrlType_validator: bv.Validator = ...

class SsoAddLogoutUrlDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[Text] = ...) -> None: ...
    new_value: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoAddLogoutUrlDetails_validator: bv.Validator = ...

class SsoAddLogoutUrlType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoAddLogoutUrlType_validator: bv.Validator = ...

class SsoChangeCertDetails(bb.Struct):
    def __init__(self,
                 new_certificate_details: Certificate = ...,
                 previous_certificate_details: Optional[Certificate] = ...) -> None: ...
    new_certificate_details: bb.Attribute[Certificate] = ...
    previous_certificate_details: bb.Attribute[Optional[Certificate]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangeCertDetails_validator: bv.Validator = ...

class SsoChangeCertType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangeCertType_validator: bv.Validator = ...

class SsoChangeLoginUrlDetails(bb.Struct):
    def __init__(self,
                 previous_value: Text = ...,
                 new_value: Text = ...) -> None: ...
    previous_value: bb.Attribute[Text] = ...
    new_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangeLoginUrlDetails_validator: bv.Validator = ...

class SsoChangeLoginUrlType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangeLoginUrlType_validator: bv.Validator = ...

class SsoChangeLogoutUrlDetails(bb.Struct):
    def __init__(self,
                 previous_value: Optional[Text] = ...,
                 new_value: Optional[Text] = ...) -> None: ...
    previous_value: bb.Attribute[Optional[Text]] = ...
    new_value: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangeLogoutUrlDetails_validator: bv.Validator = ...

class SsoChangeLogoutUrlType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangeLogoutUrlType_validator: bv.Validator = ...

class SsoChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: team_policies.SsoPolicy = ...,
                 previous_value: Optional[team_policies.SsoPolicy] = ...) -> None: ...
    new_value: bb.Attribute[team_policies.SsoPolicy] = ...
    previous_value: bb.Attribute[Optional[team_policies.SsoPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangePolicyDetails_validator: bv.Validator = ...

class SsoChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangePolicyType_validator: bv.Validator = ...

class SsoChangeSamlIdentityModeDetails(bb.Struct):
    def __init__(self,
                 previous_value: int = ...,
                 new_value: int = ...) -> None: ...
    previous_value: bb.Attribute[int] = ...
    new_value: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangeSamlIdentityModeDetails_validator: bv.Validator = ...

class SsoChangeSamlIdentityModeType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoChangeSamlIdentityModeType_validator: bv.Validator = ...

class SsoErrorDetails(bb.Struct):
    def __init__(self,
                 error_details: FailureDetailsLogInfo = ...) -> None: ...
    error_details: bb.Attribute[FailureDetailsLogInfo] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoErrorDetails_validator: bv.Validator = ...

class SsoErrorType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoErrorType_validator: bv.Validator = ...

class SsoRemoveCertDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoRemoveCertDetails_validator: bv.Validator = ...

class SsoRemoveCertType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoRemoveCertType_validator: bv.Validator = ...

class SsoRemoveLoginUrlDetails(bb.Struct):
    def __init__(self,
                 previous_value: Text = ...) -> None: ...
    previous_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoRemoveLoginUrlDetails_validator: bv.Validator = ...

class SsoRemoveLoginUrlType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoRemoveLoginUrlType_validator: bv.Validator = ...

class SsoRemoveLogoutUrlDetails(bb.Struct):
    def __init__(self,
                 previous_value: Text = ...) -> None: ...
    previous_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoRemoveLogoutUrlDetails_validator: bv.Validator = ...

class SsoRemoveLogoutUrlType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoRemoveLogoutUrlType_validator: bv.Validator = ...

class StartedEnterpriseAdminSessionDetails(bb.Struct):
    def __init__(self,
                 federation_extra_details: FedExtraDetails = ...) -> None: ...
    federation_extra_details: bb.Attribute[FedExtraDetails] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

StartedEnterpriseAdminSessionDetails_validator: bv.Validator = ...

class StartedEnterpriseAdminSessionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

StartedEnterpriseAdminSessionType_validator: bv.Validator = ...

class TeamActivityCreateReportDetails(bb.Struct):
    def __init__(self,
                 start_date: datetime.datetime = ...,
                 end_date: datetime.datetime = ...) -> None: ...
    start_date: bb.Attribute[datetime.datetime] = ...
    end_date: bb.Attribute[datetime.datetime] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamActivityCreateReportDetails_validator: bv.Validator = ...

class TeamActivityCreateReportFailDetails(bb.Struct):
    def __init__(self,
                 failure_reason: team.TeamReportFailureReason = ...) -> None: ...
    failure_reason: bb.Attribute[team.TeamReportFailureReason] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamActivityCreateReportFailDetails_validator: bv.Validator = ...

class TeamActivityCreateReportFailType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamActivityCreateReportFailType_validator: bv.Validator = ...

class TeamActivityCreateReportType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamActivityCreateReportType_validator: bv.Validator = ...

class TeamBrandingPolicy(bb.Union):
    disabled: TeamBrandingPolicy = ...
    enabled: TeamBrandingPolicy = ...
    other: TeamBrandingPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamBrandingPolicy_validator: bv.Validator = ...

class TeamBrandingPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: TeamBrandingPolicy = ...,
                 previous_value: TeamBrandingPolicy = ...) -> None: ...
    new_value: bb.Attribute[TeamBrandingPolicy] = ...
    previous_value: bb.Attribute[TeamBrandingPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamBrandingPolicyChangedDetails_validator: bv.Validator = ...

class TeamBrandingPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamBrandingPolicyChangedType_validator: bv.Validator = ...

class TeamDetails(bb.Struct):
    def __init__(self,
                 team: Text = ...) -> None: ...
    team: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamDetails_validator: bv.Validator = ...

class TeamEvent(bb.Struct):
    def __init__(self,
                 timestamp: datetime.datetime = ...,
                 event_category: EventCategory = ...,
                 event_type: EventType = ...,
                 details: EventDetails = ...,
                 actor: Optional[ActorLogInfo] = ...,
                 origin: Optional[OriginLogInfo] = ...,
                 involve_non_team_member: Optional[bool] = ...,
                 context: Optional[ContextLogInfo] = ...,
                 participants: Optional[List[ParticipantLogInfo]] = ...,
                 assets: Optional[List[AssetLogInfo]] = ...) -> None: ...
    timestamp: bb.Attribute[datetime.datetime] = ...
    event_category: bb.Attribute[EventCategory] = ...
    event_type: bb.Attribute[EventType] = ...
    details: bb.Attribute[EventDetails] = ...
    actor: bb.Attribute[Optional[ActorLogInfo]] = ...
    origin: bb.Attribute[Optional[OriginLogInfo]] = ...
    involve_non_team_member: bb.Attribute[Optional[bool]] = ...
    context: bb.Attribute[Optional[ContextLogInfo]] = ...
    participants: bb.Attribute[Optional[List[ParticipantLogInfo]]] = ...
    assets: bb.Attribute[Optional[List[AssetLogInfo]]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamEvent_validator: bv.Validator = ...

class TeamExtensionsPolicy(bb.Union):
    disabled: TeamExtensionsPolicy = ...
    enabled: TeamExtensionsPolicy = ...
    other: TeamExtensionsPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamExtensionsPolicy_validator: bv.Validator = ...

class TeamExtensionsPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: TeamExtensionsPolicy = ...,
                 previous_value: TeamExtensionsPolicy = ...) -> None: ...
    new_value: bb.Attribute[TeamExtensionsPolicy] = ...
    previous_value: bb.Attribute[TeamExtensionsPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamExtensionsPolicyChangedDetails_validator: bv.Validator = ...

class TeamExtensionsPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamExtensionsPolicyChangedType_validator: bv.Validator = ...

class TeamFolderChangeStatusDetails(bb.Struct):
    def __init__(self,
                 new_value: team.TeamFolderStatus = ...,
                 previous_value: Optional[team.TeamFolderStatus] = ...) -> None: ...
    new_value: bb.Attribute[team.TeamFolderStatus] = ...
    previous_value: bb.Attribute[Optional[team.TeamFolderStatus]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderChangeStatusDetails_validator: bv.Validator = ...

class TeamFolderChangeStatusType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderChangeStatusType_validator: bv.Validator = ...

class TeamFolderCreateDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderCreateDetails_validator: bv.Validator = ...

class TeamFolderCreateType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderCreateType_validator: bv.Validator = ...

class TeamFolderDowngradeDetails(bb.Struct):
    def __init__(self,
                 target_asset_index: int = ...) -> None: ...
    target_asset_index: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderDowngradeDetails_validator: bv.Validator = ...

class TeamFolderDowngradeType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderDowngradeType_validator: bv.Validator = ...

class TeamFolderPermanentlyDeleteDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderPermanentlyDeleteDetails_validator: bv.Validator = ...

class TeamFolderPermanentlyDeleteType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderPermanentlyDeleteType_validator: bv.Validator = ...

class TeamFolderRenameDetails(bb.Struct):
    def __init__(self,
                 previous_folder_name: Text = ...,
                 new_folder_name: Text = ...) -> None: ...
    previous_folder_name: bb.Attribute[Text] = ...
    new_folder_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderRenameDetails_validator: bv.Validator = ...

class TeamFolderRenameType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamFolderRenameType_validator: bv.Validator = ...

class TeamInviteDetails(bb.Struct):
    def __init__(self,
                 invite_method: InviteMethod = ...,
                 additional_license_purchase: Optional[bool] = ...) -> None: ...
    invite_method: bb.Attribute[InviteMethod] = ...
    additional_license_purchase: bb.Attribute[Optional[bool]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamInviteDetails_validator: bv.Validator = ...

class TeamLinkedAppLogInfo(AppLogInfo):
    def __init__(self,
                 app_id: Optional[Text] = ...,
                 display_name: Optional[Text] = ...) -> None: ...
    app_id: bb.Attribute[Optional[Text]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamLinkedAppLogInfo_validator: bv.Validator = ...

class TeamLogInfo(bb.Struct):
    def __init__(self,
                 display_name: Text = ...) -> None: ...
    display_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamLogInfo_validator: bv.Validator = ...

class TeamMemberLogInfo(UserLogInfo):
    def __init__(self,
                 account_id: Optional[Text] = ...,
                 display_name: Optional[Text] = ...,
                 email: Optional[Text] = ...,
                 team_member_id: Optional[Text] = ...,
                 member_external_id: Optional[Text] = ...,
                 team: Optional[TeamLogInfo] = ...) -> None: ...
    account_id: bb.Attribute[Optional[Text]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    email: bb.Attribute[Optional[Text]] = ...
    team_member_id: bb.Attribute[Optional[Text]] = ...
    member_external_id: bb.Attribute[Optional[Text]] = ...
    team: bb.Attribute[Optional[TeamLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMemberLogInfo_validator: bv.Validator = ...

class TeamMembershipType(bb.Union):
    free: TeamMembershipType = ...
    full: TeamMembershipType = ...
    other: TeamMembershipType = ...

    def is_free(self) -> bool: ...

    def is_full(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMembershipType_validator: bv.Validator = ...

class TeamMergeFromDetails(bb.Struct):
    def __init__(self,
                 team_name: Text = ...) -> None: ...
    team_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeFromDetails_validator: bv.Validator = ...

class TeamMergeFromType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeFromType_validator: bv.Validator = ...

class TeamMergeRequestAcceptedDetails(bb.Struct):
    def __init__(self,
                 request_accepted_details: TeamMergeRequestAcceptedExtraDetails = ...) -> None: ...
    request_accepted_details: bb.Attribute[TeamMergeRequestAcceptedExtraDetails] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestAcceptedDetails_validator: bv.Validator = ...

class TeamMergeRequestAcceptedExtraDetails(bb.Union):
    other: TeamMergeRequestAcceptedExtraDetails = ...

    def is_primary_team(self) -> bool: ...

    def is_secondary_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def primary_team(cls, val: PrimaryTeamRequestAcceptedDetails) -> TeamMergeRequestAcceptedExtraDetails: ...

    @classmethod
    def secondary_team(cls, val: SecondaryTeamRequestAcceptedDetails) -> TeamMergeRequestAcceptedExtraDetails: ...

    def get_primary_team(self) -> PrimaryTeamRequestAcceptedDetails: ...

    def get_secondary_team(self) -> SecondaryTeamRequestAcceptedDetails: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestAcceptedExtraDetails_validator: bv.Validator = ...

class TeamMergeRequestAcceptedShownToPrimaryTeamDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_by: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestAcceptedShownToPrimaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestAcceptedShownToPrimaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestAcceptedShownToPrimaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestAcceptedShownToSecondaryTeamDetails(bb.Struct):
    def __init__(self,
                 primary_team: Text = ...,
                 sent_by: Text = ...) -> None: ...
    primary_team: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestAcceptedShownToSecondaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestAcceptedShownToSecondaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestAcceptedShownToSecondaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestAcceptedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestAcceptedType_validator: bv.Validator = ...

class TeamMergeRequestAutoCanceledDetails(bb.Struct):
    def __init__(self,
                 details: Optional[Text] = ...) -> None: ...
    details: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestAutoCanceledDetails_validator: bv.Validator = ...

class TeamMergeRequestAutoCanceledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestAutoCanceledType_validator: bv.Validator = ...

class TeamMergeRequestCanceledDetails(bb.Struct):
    def __init__(self,
                 request_canceled_details: TeamMergeRequestCanceledExtraDetails = ...) -> None: ...
    request_canceled_details: bb.Attribute[TeamMergeRequestCanceledExtraDetails] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestCanceledDetails_validator: bv.Validator = ...

class TeamMergeRequestCanceledExtraDetails(bb.Union):
    other: TeamMergeRequestCanceledExtraDetails = ...

    def is_primary_team(self) -> bool: ...

    def is_secondary_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def primary_team(cls, val: PrimaryTeamRequestCanceledDetails) -> TeamMergeRequestCanceledExtraDetails: ...

    @classmethod
    def secondary_team(cls, val: SecondaryTeamRequestCanceledDetails) -> TeamMergeRequestCanceledExtraDetails: ...

    def get_primary_team(self) -> PrimaryTeamRequestCanceledDetails: ...

    def get_secondary_team(self) -> SecondaryTeamRequestCanceledDetails: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestCanceledExtraDetails_validator: bv.Validator = ...

class TeamMergeRequestCanceledShownToPrimaryTeamDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_by: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestCanceledShownToPrimaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestCanceledShownToPrimaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestCanceledShownToPrimaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestCanceledShownToSecondaryTeamDetails(bb.Struct):
    def __init__(self,
                 sent_to: Text = ...,
                 sent_by: Text = ...) -> None: ...
    sent_to: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestCanceledShownToSecondaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestCanceledShownToSecondaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestCanceledShownToSecondaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestCanceledType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestCanceledType_validator: bv.Validator = ...

class TeamMergeRequestExpiredDetails(bb.Struct):
    def __init__(self,
                 request_expired_details: TeamMergeRequestExpiredExtraDetails = ...) -> None: ...
    request_expired_details: bb.Attribute[TeamMergeRequestExpiredExtraDetails] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestExpiredDetails_validator: bv.Validator = ...

class TeamMergeRequestExpiredExtraDetails(bb.Union):
    other: TeamMergeRequestExpiredExtraDetails = ...

    def is_primary_team(self) -> bool: ...

    def is_secondary_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def primary_team(cls, val: PrimaryTeamRequestExpiredDetails) -> TeamMergeRequestExpiredExtraDetails: ...

    @classmethod
    def secondary_team(cls, val: SecondaryTeamRequestExpiredDetails) -> TeamMergeRequestExpiredExtraDetails: ...

    def get_primary_team(self) -> PrimaryTeamRequestExpiredDetails: ...

    def get_secondary_team(self) -> SecondaryTeamRequestExpiredDetails: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestExpiredExtraDetails_validator: bv.Validator = ...

class TeamMergeRequestExpiredShownToPrimaryTeamDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_by: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestExpiredShownToPrimaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestExpiredShownToPrimaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestExpiredShownToPrimaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestExpiredShownToSecondaryTeamDetails(bb.Struct):
    def __init__(self,
                 sent_to: Text = ...) -> None: ...
    sent_to: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestExpiredShownToSecondaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestExpiredShownToSecondaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestExpiredShownToSecondaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestExpiredType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestExpiredType_validator: bv.Validator = ...

class TeamMergeRequestRejectedShownToPrimaryTeamDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_by: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestRejectedShownToPrimaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestRejectedShownToPrimaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestRejectedShownToPrimaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestRejectedShownToSecondaryTeamDetails(bb.Struct):
    def __init__(self,
                 sent_by: Text = ...) -> None: ...
    sent_by: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestRejectedShownToSecondaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestRejectedShownToSecondaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestRejectedShownToSecondaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestReminderDetails(bb.Struct):
    def __init__(self,
                 request_reminder_details: TeamMergeRequestReminderExtraDetails = ...) -> None: ...
    request_reminder_details: bb.Attribute[TeamMergeRequestReminderExtraDetails] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestReminderDetails_validator: bv.Validator = ...

class TeamMergeRequestReminderExtraDetails(bb.Union):
    other: TeamMergeRequestReminderExtraDetails = ...

    def is_primary_team(self) -> bool: ...

    def is_secondary_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def primary_team(cls, val: PrimaryTeamRequestReminderDetails) -> TeamMergeRequestReminderExtraDetails: ...

    @classmethod
    def secondary_team(cls, val: SecondaryTeamRequestReminderDetails) -> TeamMergeRequestReminderExtraDetails: ...

    def get_primary_team(self) -> PrimaryTeamRequestReminderDetails: ...

    def get_secondary_team(self) -> SecondaryTeamRequestReminderDetails: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestReminderExtraDetails_validator: bv.Validator = ...

class TeamMergeRequestReminderShownToPrimaryTeamDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_to: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_to: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestReminderShownToPrimaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestReminderShownToPrimaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestReminderShownToPrimaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestReminderShownToSecondaryTeamDetails(bb.Struct):
    def __init__(self,
                 sent_to: Text = ...) -> None: ...
    sent_to: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestReminderShownToSecondaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestReminderShownToSecondaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestReminderShownToSecondaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestReminderType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestReminderType_validator: bv.Validator = ...

class TeamMergeRequestRevokedDetails(bb.Struct):
    def __init__(self,
                 team: Text = ...) -> None: ...
    team: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestRevokedDetails_validator: bv.Validator = ...

class TeamMergeRequestRevokedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestRevokedType_validator: bv.Validator = ...

class TeamMergeRequestSentShownToPrimaryTeamDetails(bb.Struct):
    def __init__(self,
                 secondary_team: Text = ...,
                 sent_to: Text = ...) -> None: ...
    secondary_team: bb.Attribute[Text] = ...
    sent_to: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestSentShownToPrimaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestSentShownToPrimaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestSentShownToPrimaryTeamType_validator: bv.Validator = ...

class TeamMergeRequestSentShownToSecondaryTeamDetails(bb.Struct):
    def __init__(self,
                 sent_to: Text = ...) -> None: ...
    sent_to: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestSentShownToSecondaryTeamDetails_validator: bv.Validator = ...

class TeamMergeRequestSentShownToSecondaryTeamType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeRequestSentShownToSecondaryTeamType_validator: bv.Validator = ...

class TeamMergeToDetails(bb.Struct):
    def __init__(self,
                 team_name: Text = ...) -> None: ...
    team_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeToDetails_validator: bv.Validator = ...

class TeamMergeToType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMergeToType_validator: bv.Validator = ...

class TeamName(bb.Struct):
    def __init__(self,
                 team_display_name: Text = ...,
                 team_legal_name: Text = ...) -> None: ...
    team_display_name: bb.Attribute[Text] = ...
    team_legal_name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamName_validator: bv.Validator = ...

class TeamProfileAddBackgroundDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileAddBackgroundDetails_validator: bv.Validator = ...

class TeamProfileAddBackgroundType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileAddBackgroundType_validator: bv.Validator = ...

class TeamProfileAddLogoDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileAddLogoDetails_validator: bv.Validator = ...

class TeamProfileAddLogoType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileAddLogoType_validator: bv.Validator = ...

class TeamProfileChangeBackgroundDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileChangeBackgroundDetails_validator: bv.Validator = ...

class TeamProfileChangeBackgroundType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileChangeBackgroundType_validator: bv.Validator = ...

class TeamProfileChangeDefaultLanguageDetails(bb.Struct):
    def __init__(self,
                 new_value: Text = ...,
                 previous_value: Text = ...) -> None: ...
    new_value: bb.Attribute[Text] = ...
    previous_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileChangeDefaultLanguageDetails_validator: bv.Validator = ...

class TeamProfileChangeDefaultLanguageType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileChangeDefaultLanguageType_validator: bv.Validator = ...

class TeamProfileChangeLogoDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileChangeLogoDetails_validator: bv.Validator = ...

class TeamProfileChangeLogoType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileChangeLogoType_validator: bv.Validator = ...

class TeamProfileChangeNameDetails(bb.Struct):
    def __init__(self,
                 new_value: TeamName = ...,
                 previous_value: Optional[TeamName] = ...) -> None: ...
    new_value: bb.Attribute[TeamName] = ...
    previous_value: bb.Attribute[Optional[TeamName]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileChangeNameDetails_validator: bv.Validator = ...

class TeamProfileChangeNameType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileChangeNameType_validator: bv.Validator = ...

class TeamProfileRemoveBackgroundDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileRemoveBackgroundDetails_validator: bv.Validator = ...

class TeamProfileRemoveBackgroundType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileRemoveBackgroundType_validator: bv.Validator = ...

class TeamProfileRemoveLogoDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileRemoveLogoDetails_validator: bv.Validator = ...

class TeamProfileRemoveLogoType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamProfileRemoveLogoType_validator: bv.Validator = ...

class TeamSelectiveSyncPolicy(bb.Union):
    disabled: TeamSelectiveSyncPolicy = ...
    enabled: TeamSelectiveSyncPolicy = ...
    other: TeamSelectiveSyncPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamSelectiveSyncPolicy_validator: bv.Validator = ...

class TeamSelectiveSyncPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: TeamSelectiveSyncPolicy = ...,
                 previous_value: TeamSelectiveSyncPolicy = ...) -> None: ...
    new_value: bb.Attribute[TeamSelectiveSyncPolicy] = ...
    previous_value: bb.Attribute[TeamSelectiveSyncPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamSelectiveSyncPolicyChangedDetails_validator: bv.Validator = ...

class TeamSelectiveSyncPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamSelectiveSyncPolicyChangedType_validator: bv.Validator = ...

class TeamSelectiveSyncSettingsChangedDetails(bb.Struct):
    def __init__(self,
                 previous_value: files.SyncSetting = ...,
                 new_value: files.SyncSetting = ...) -> None: ...
    previous_value: bb.Attribute[files.SyncSetting] = ...
    new_value: bb.Attribute[files.SyncSetting] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamSelectiveSyncSettingsChangedDetails_validator: bv.Validator = ...

class TeamSelectiveSyncSettingsChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamSelectiveSyncSettingsChangedType_validator: bv.Validator = ...

class TeamSharingWhitelistSubjectsChangedDetails(bb.Struct):
    def __init__(self,
                 added_whitelist_subjects: List[Text] = ...,
                 removed_whitelist_subjects: List[Text] = ...) -> None: ...
    added_whitelist_subjects: bb.Attribute[List[Text]] = ...
    removed_whitelist_subjects: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamSharingWhitelistSubjectsChangedDetails_validator: bv.Validator = ...

class TeamSharingWhitelistSubjectsChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamSharingWhitelistSubjectsChangedType_validator: bv.Validator = ...

class TfaAddBackupPhoneDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaAddBackupPhoneDetails_validator: bv.Validator = ...

class TfaAddBackupPhoneType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaAddBackupPhoneType_validator: bv.Validator = ...

class TfaAddExceptionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaAddExceptionDetails_validator: bv.Validator = ...

class TfaAddExceptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaAddExceptionType_validator: bv.Validator = ...

class TfaAddSecurityKeyDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaAddSecurityKeyDetails_validator: bv.Validator = ...

class TfaAddSecurityKeyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaAddSecurityKeyType_validator: bv.Validator = ...

class TfaChangeBackupPhoneDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaChangeBackupPhoneDetails_validator: bv.Validator = ...

class TfaChangeBackupPhoneType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaChangeBackupPhoneType_validator: bv.Validator = ...

class TfaChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: team_policies.TwoStepVerificationPolicy = ...,
                 previous_value: Optional[team_policies.TwoStepVerificationPolicy] = ...) -> None: ...
    new_value: bb.Attribute[team_policies.TwoStepVerificationPolicy] = ...
    previous_value: bb.Attribute[Optional[team_policies.TwoStepVerificationPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaChangePolicyDetails_validator: bv.Validator = ...

class TfaChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaChangePolicyType_validator: bv.Validator = ...

class TfaChangeStatusDetails(bb.Struct):
    def __init__(self,
                 new_value: TfaConfiguration = ...,
                 previous_value: Optional[TfaConfiguration] = ...,
                 used_rescue_code: Optional[bool] = ...) -> None: ...
    new_value: bb.Attribute[TfaConfiguration] = ...
    previous_value: bb.Attribute[Optional[TfaConfiguration]] = ...
    used_rescue_code: bb.Attribute[Optional[bool]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaChangeStatusDetails_validator: bv.Validator = ...

class TfaChangeStatusType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaChangeStatusType_validator: bv.Validator = ...

class TfaConfiguration(bb.Union):
    authenticator: TfaConfiguration = ...
    disabled: TfaConfiguration = ...
    enabled: TfaConfiguration = ...
    sms: TfaConfiguration = ...
    other: TfaConfiguration = ...

    def is_authenticator(self) -> bool: ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_sms(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaConfiguration_validator: bv.Validator = ...

class TfaRemoveBackupPhoneDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaRemoveBackupPhoneDetails_validator: bv.Validator = ...

class TfaRemoveBackupPhoneType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaRemoveBackupPhoneType_validator: bv.Validator = ...

class TfaRemoveExceptionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaRemoveExceptionDetails_validator: bv.Validator = ...

class TfaRemoveExceptionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaRemoveExceptionType_validator: bv.Validator = ...

class TfaRemoveSecurityKeyDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaRemoveSecurityKeyDetails_validator: bv.Validator = ...

class TfaRemoveSecurityKeyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaRemoveSecurityKeyType_validator: bv.Validator = ...

class TfaResetDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaResetDetails_validator: bv.Validator = ...

class TfaResetType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TfaResetType_validator: bv.Validator = ...

class TimeUnit(bb.Union):
    days: TimeUnit = ...
    hours: TimeUnit = ...
    milliseconds: TimeUnit = ...
    minutes: TimeUnit = ...
    months: TimeUnit = ...
    seconds: TimeUnit = ...
    weeks: TimeUnit = ...
    years: TimeUnit = ...
    other: TimeUnit = ...

    def is_days(self) -> bool: ...

    def is_hours(self) -> bool: ...

    def is_milliseconds(self) -> bool: ...

    def is_minutes(self) -> bool: ...

    def is_months(self) -> bool: ...

    def is_seconds(self) -> bool: ...

    def is_weeks(self) -> bool: ...

    def is_years(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TimeUnit_validator: bv.Validator = ...

class TrustedNonTeamMemberLogInfo(UserLogInfo):
    def __init__(self,
                 trusted_non_team_member_type: TrustedNonTeamMemberType = ...,
                 account_id: Optional[Text] = ...,
                 display_name: Optional[Text] = ...,
                 email: Optional[Text] = ...,
                 team: Optional[TeamLogInfo] = ...) -> None: ...
    trusted_non_team_member_type: bb.Attribute[TrustedNonTeamMemberType] = ...
    account_id: bb.Attribute[Optional[Text]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    email: bb.Attribute[Optional[Text]] = ...
    team: bb.Attribute[Optional[TeamLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TrustedNonTeamMemberLogInfo_validator: bv.Validator = ...

class TrustedNonTeamMemberType(bb.Union):
    enterprise_admin: TrustedNonTeamMemberType = ...
    multi_instance_admin: TrustedNonTeamMemberType = ...
    other: TrustedNonTeamMemberType = ...

    def is_enterprise_admin(self) -> bool: ...

    def is_multi_instance_admin(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TrustedNonTeamMemberType_validator: bv.Validator = ...

class TrustedTeamsRequestAction(bb.Union):
    accepted: TrustedTeamsRequestAction = ...
    declined: TrustedTeamsRequestAction = ...
    expired: TrustedTeamsRequestAction = ...
    invited: TrustedTeamsRequestAction = ...
    revoked: TrustedTeamsRequestAction = ...
    other: TrustedTeamsRequestAction = ...

    def is_accepted(self) -> bool: ...

    def is_declined(self) -> bool: ...

    def is_expired(self) -> bool: ...

    def is_invited(self) -> bool: ...

    def is_revoked(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TrustedTeamsRequestAction_validator: bv.Validator = ...

class TrustedTeamsRequestState(bb.Union):
    invited: TrustedTeamsRequestState = ...
    linked: TrustedTeamsRequestState = ...
    unlinked: TrustedTeamsRequestState = ...
    other: TrustedTeamsRequestState = ...

    def is_invited(self) -> bool: ...

    def is_linked(self) -> bool: ...

    def is_unlinked(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TrustedTeamsRequestState_validator: bv.Validator = ...

class TwoAccountChangePolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: TwoAccountPolicy = ...,
                 previous_value: Optional[TwoAccountPolicy] = ...) -> None: ...
    new_value: bb.Attribute[TwoAccountPolicy] = ...
    previous_value: bb.Attribute[Optional[TwoAccountPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TwoAccountChangePolicyDetails_validator: bv.Validator = ...

class TwoAccountChangePolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TwoAccountChangePolicyType_validator: bv.Validator = ...

class TwoAccountPolicy(bb.Union):
    disabled: TwoAccountPolicy = ...
    enabled: TwoAccountPolicy = ...
    other: TwoAccountPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TwoAccountPolicy_validator: bv.Validator = ...

class UndoNamingConventionDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UndoNamingConventionDetails_validator: bv.Validator = ...

class UndoNamingConventionType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UndoNamingConventionType_validator: bv.Validator = ...

class UndoOrganizeFolderWithTidyDetails(bb.Struct):
    def __init__(self) -> None: ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UndoOrganizeFolderWithTidyDetails_validator: bv.Validator = ...

class UndoOrganizeFolderWithTidyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UndoOrganizeFolderWithTidyType_validator: bv.Validator = ...

class UserLinkedAppLogInfo(AppLogInfo):
    def __init__(self,
                 app_id: Optional[Text] = ...,
                 display_name: Optional[Text] = ...) -> None: ...
    app_id: bb.Attribute[Optional[Text]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserLinkedAppLogInfo_validator: bv.Validator = ...

class UserNameLogInfo(bb.Struct):
    def __init__(self,
                 given_name: Text = ...,
                 surname: Text = ...,
                 locale: Optional[Text] = ...) -> None: ...
    given_name: bb.Attribute[Text] = ...
    surname: bb.Attribute[Text] = ...
    locale: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserNameLogInfo_validator: bv.Validator = ...

class UserOrTeamLinkedAppLogInfo(AppLogInfo):
    def __init__(self,
                 app_id: Optional[Text] = ...,
                 display_name: Optional[Text] = ...) -> None: ...
    app_id: bb.Attribute[Optional[Text]] = ...
    display_name: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserOrTeamLinkedAppLogInfo_validator: bv.Validator = ...

class UserTagsAddedDetails(bb.Struct):
    def __init__(self,
                 values: List[Text] = ...) -> None: ...
    values: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserTagsAddedDetails_validator: bv.Validator = ...

class UserTagsAddedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserTagsAddedType_validator: bv.Validator = ...

class UserTagsRemovedDetails(bb.Struct):
    def __init__(self,
                 values: List[Text] = ...) -> None: ...
    values: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserTagsRemovedDetails_validator: bv.Validator = ...

class UserTagsRemovedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserTagsRemovedType_validator: bv.Validator = ...

class ViewerInfoPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 previous_value: PassPolicy = ...,
                 new_value: PassPolicy = ...) -> None: ...
    previous_value: bb.Attribute[PassPolicy] = ...
    new_value: bb.Attribute[PassPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ViewerInfoPolicyChangedDetails_validator: bv.Validator = ...

class ViewerInfoPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ViewerInfoPolicyChangedType_validator: bv.Validator = ...

class WatermarkingPolicy(bb.Union):
    disabled: WatermarkingPolicy = ...
    enabled: WatermarkingPolicy = ...
    other: WatermarkingPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WatermarkingPolicy_validator: bv.Validator = ...

class WatermarkingPolicyChangedDetails(bb.Struct):
    def __init__(self,
                 new_value: WatermarkingPolicy = ...,
                 previous_value: WatermarkingPolicy = ...) -> None: ...
    new_value: bb.Attribute[WatermarkingPolicy] = ...
    previous_value: bb.Attribute[WatermarkingPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WatermarkingPolicyChangedDetails_validator: bv.Validator = ...

class WatermarkingPolicyChangedType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WatermarkingPolicyChangedType_validator: bv.Validator = ...

class WebDeviceSessionLogInfo(DeviceSessionLogInfo):
    def __init__(self,
                 user_agent: Text = ...,
                 os: Text = ...,
                 browser: Text = ...,
                 ip_address: Optional[Text] = ...,
                 created: Optional[datetime.datetime] = ...,
                 updated: Optional[datetime.datetime] = ...,
                 session_info: Optional[WebSessionLogInfo] = ...) -> None: ...
    user_agent: bb.Attribute[Text] = ...
    os: bb.Attribute[Text] = ...
    browser: bb.Attribute[Text] = ...
    ip_address: bb.Attribute[Optional[Text]] = ...
    created: bb.Attribute[Optional[datetime.datetime]] = ...
    updated: bb.Attribute[Optional[datetime.datetime]] = ...
    session_info: bb.Attribute[Optional[WebSessionLogInfo]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebDeviceSessionLogInfo_validator: bv.Validator = ...

class WebSessionLogInfo(SessionLogInfo):
    def __init__(self,
                 session_id: Optional[Text] = ...) -> None: ...
    session_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebSessionLogInfo_validator: bv.Validator = ...

class WebSessionsChangeActiveSessionLimitDetails(bb.Struct):
    def __init__(self,
                 previous_value: Text = ...,
                 new_value: Text = ...) -> None: ...
    previous_value: bb.Attribute[Text] = ...
    new_value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebSessionsChangeActiveSessionLimitDetails_validator: bv.Validator = ...

class WebSessionsChangeActiveSessionLimitType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebSessionsChangeActiveSessionLimitType_validator: bv.Validator = ...

class WebSessionsChangeFixedLengthPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[WebSessionsFixedLengthPolicy] = ...,
                 previous_value: Optional[WebSessionsFixedLengthPolicy] = ...) -> None: ...
    new_value: bb.Attribute[Optional[WebSessionsFixedLengthPolicy]] = ...
    previous_value: bb.Attribute[Optional[WebSessionsFixedLengthPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebSessionsChangeFixedLengthPolicyDetails_validator: bv.Validator = ...

class WebSessionsChangeFixedLengthPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebSessionsChangeFixedLengthPolicyType_validator: bv.Validator = ...

class WebSessionsChangeIdleLengthPolicyDetails(bb.Struct):
    def __init__(self,
                 new_value: Optional[WebSessionsIdleLengthPolicy] = ...,
                 previous_value: Optional[WebSessionsIdleLengthPolicy] = ...) -> None: ...
    new_value: bb.Attribute[Optional[WebSessionsIdleLengthPolicy]] = ...
    previous_value: bb.Attribute[Optional[WebSessionsIdleLengthPolicy]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebSessionsChangeIdleLengthPolicyDetails_validator: bv.Validator = ...

class WebSessionsChangeIdleLengthPolicyType(bb.Struct):
    def __init__(self,
                 description: Text = ...) -> None: ...
    description: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebSessionsChangeIdleLengthPolicyType_validator: bv.Validator = ...

class WebSessionsFixedLengthPolicy(bb.Union):
    undefined: WebSessionsFixedLengthPolicy = ...
    other: WebSessionsFixedLengthPolicy = ...

    def is_defined(self) -> bool: ...

    def is_undefined(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def defined(cls, val: DurationLogInfo) -> WebSessionsFixedLengthPolicy: ...

    def get_defined(self) -> DurationLogInfo: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebSessionsFixedLengthPolicy_validator: bv.Validator = ...

class WebSessionsIdleLengthPolicy(bb.Union):
    undefined: WebSessionsIdleLengthPolicy = ...
    other: WebSessionsIdleLengthPolicy = ...

    def is_defined(self) -> bool: ...

    def is_undefined(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def defined(cls, val: DurationLogInfo) -> WebSessionsIdleLengthPolicy: ...

    def get_defined(self) -> DurationLogInfo: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

WebSessionsIdleLengthPolicy_validator: bv.Validator = ...

AppId_validator: bv.Validator = ...
EmailAddress_validator: bv.Validator = ...
FilePath_validator: bv.Validator = ...
IpAddress_validator: bv.Validator = ...
NamespaceId_validator: bv.Validator = ...
RequestId_validator: bv.Validator = ...
TeamEventList_validator: bv.Validator = ...
get_events: bb.Route = ...
get_events_continue: bb.Route = ...

