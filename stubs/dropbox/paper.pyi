# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file

from typing import (
    Callable,
    List,
    Optional,
    Text,
    Type,
    TypeVar,
)

import datetime
from stone.backends.python_rsrc import stone_base as bb  # type: ignore
from stone.backends.python_rsrc import stone_validators as bv  # type: ignore

from dropbox import common  # type: ignore
from dropbox import sharing  # type: ignore

T = TypeVar('T', bound=bb.AnnotationType)
U = TypeVar('U')

class AddMember(bb.Struct):
    def __init__(self,
                 member: sharing.MemberSelector = ...,
                 permission_level: Optional[PaperDocPermissionLevel] = ...) -> None: ...
    member: bb.Attribute[sharing.MemberSelector] = ...
    permission_level: bb.Attribute[PaperDocPermissionLevel] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AddMember_validator: bv.Validator = ...

class RefPaperDoc(bb.Struct):
    def __init__(self,
                 doc_id: Text = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RefPaperDoc_validator: bv.Validator = ...

class AddPaperDocUser(RefPaperDoc):
    def __init__(self,
                 doc_id: Text = ...,
                 members: List[AddMember] = ...,
                 custom_message: Optional[Text] = ...,
                 quiet: Optional[bool] = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    members: bb.Attribute[List[AddMember]] = ...
    custom_message: bb.Attribute[Optional[Text]] = ...
    quiet: bb.Attribute[bool] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AddPaperDocUser_validator: bv.Validator = ...

class AddPaperDocUserMemberResult(bb.Struct):
    def __init__(self,
                 member: sharing.MemberSelector = ...,
                 result: AddPaperDocUserResult = ...) -> None: ...
    member: bb.Attribute[sharing.MemberSelector] = ...
    result: bb.Attribute[AddPaperDocUserResult] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AddPaperDocUserMemberResult_validator: bv.Validator = ...

class AddPaperDocUserResult(bb.Union):
    success: AddPaperDocUserResult = ...
    unknown_error: AddPaperDocUserResult = ...
    sharing_outside_team_disabled: AddPaperDocUserResult = ...
    daily_limit_reached: AddPaperDocUserResult = ...
    user_is_owner: AddPaperDocUserResult = ...
    failed_user_data_retrieval: AddPaperDocUserResult = ...
    permission_already_granted: AddPaperDocUserResult = ...
    other: AddPaperDocUserResult = ...

    def is_success(self) -> bool: ...

    def is_unknown_error(self) -> bool: ...

    def is_sharing_outside_team_disabled(self) -> bool: ...

    def is_daily_limit_reached(self) -> bool: ...

    def is_user_is_owner(self) -> bool: ...

    def is_failed_user_data_retrieval(self) -> bool: ...

    def is_permission_already_granted(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AddPaperDocUserResult_validator: bv.Validator = ...

class Cursor(bb.Struct):
    def __init__(self,
                 value: Text = ...,
                 expiration: Optional[datetime.datetime] = ...) -> None: ...
    value: bb.Attribute[Text] = ...
    expiration: bb.Attribute[Optional[datetime.datetime]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

Cursor_validator: bv.Validator = ...

class PaperApiBaseError(bb.Union):
    insufficient_permissions: PaperApiBaseError = ...
    other: PaperApiBaseError = ...

    def is_insufficient_permissions(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperApiBaseError_validator: bv.Validator = ...

class DocLookupError(PaperApiBaseError):
    doc_not_found: DocLookupError = ...

    def is_doc_not_found(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DocLookupError_validator: bv.Validator = ...

class DocSubscriptionLevel(bb.Union):
    default: DocSubscriptionLevel = ...
    ignore: DocSubscriptionLevel = ...
    every: DocSubscriptionLevel = ...
    no_email: DocSubscriptionLevel = ...

    def is_default(self) -> bool: ...

    def is_ignore(self) -> bool: ...

    def is_every(self) -> bool: ...

    def is_no_email(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DocSubscriptionLevel_validator: bv.Validator = ...

class ExportFormat(bb.Union):
    html: ExportFormat = ...
    markdown: ExportFormat = ...
    other: ExportFormat = ...

    def is_html(self) -> bool: ...

    def is_markdown(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExportFormat_validator: bv.Validator = ...

class Folder(bb.Struct):
    def __init__(self,
                 id: Text = ...,
                 name: Text = ...) -> None: ...
    id: bb.Attribute[Text] = ...
    name: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

Folder_validator: bv.Validator = ...

class FolderSharingPolicyType(bb.Union):
    team: FolderSharingPolicyType = ...
    invite_only: FolderSharingPolicyType = ...

    def is_team(self) -> bool: ...

    def is_invite_only(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FolderSharingPolicyType_validator: bv.Validator = ...

class FolderSubscriptionLevel(bb.Union):
    none: FolderSubscriptionLevel = ...
    activity_only: FolderSubscriptionLevel = ...
    daily_emails: FolderSubscriptionLevel = ...
    weekly_emails: FolderSubscriptionLevel = ...

    def is_none(self) -> bool: ...

    def is_activity_only(self) -> bool: ...

    def is_daily_emails(self) -> bool: ...

    def is_weekly_emails(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FolderSubscriptionLevel_validator: bv.Validator = ...

class FoldersContainingPaperDoc(bb.Struct):
    def __init__(self,
                 folder_sharing_policy_type: Optional[FolderSharingPolicyType] = ...,
                 folders: Optional[List[Folder]] = ...) -> None: ...
    folder_sharing_policy_type: bb.Attribute[Optional[FolderSharingPolicyType]] = ...
    folders: bb.Attribute[Optional[List[Folder]]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FoldersContainingPaperDoc_validator: bv.Validator = ...

class ImportFormat(bb.Union):
    html: ImportFormat = ...
    markdown: ImportFormat = ...
    plain_text: ImportFormat = ...
    other: ImportFormat = ...

    def is_html(self) -> bool: ...

    def is_markdown(self) -> bool: ...

    def is_plain_text(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ImportFormat_validator: bv.Validator = ...

class InviteeInfoWithPermissionLevel(bb.Struct):
    def __init__(self,
                 invitee: sharing.InviteeInfo = ...,
                 permission_level: PaperDocPermissionLevel = ...) -> None: ...
    invitee: bb.Attribute[sharing.InviteeInfo] = ...
    permission_level: bb.Attribute[PaperDocPermissionLevel] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

InviteeInfoWithPermissionLevel_validator: bv.Validator = ...

class ListDocsCursorError(bb.Union):
    other: ListDocsCursorError = ...

    def is_cursor_error(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def cursor_error(cls, val: PaperApiCursorError) -> ListDocsCursorError: ...

    def get_cursor_error(self) -> PaperApiCursorError: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListDocsCursorError_validator: bv.Validator = ...

class ListPaperDocsArgs(bb.Struct):
    def __init__(self,
                 filter_by: Optional[ListPaperDocsFilterBy] = ...,
                 sort_by: Optional[ListPaperDocsSortBy] = ...,
                 sort_order: Optional[ListPaperDocsSortOrder] = ...,
                 limit: Optional[int] = ...) -> None: ...
    filter_by: bb.Attribute[ListPaperDocsFilterBy] = ...
    sort_by: bb.Attribute[ListPaperDocsSortBy] = ...
    sort_order: bb.Attribute[ListPaperDocsSortOrder] = ...
    limit: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListPaperDocsArgs_validator: bv.Validator = ...

class ListPaperDocsContinueArgs(bb.Struct):
    def __init__(self,
                 cursor: Text = ...) -> None: ...
    cursor: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListPaperDocsContinueArgs_validator: bv.Validator = ...

class ListPaperDocsFilterBy(bb.Union):
    docs_accessed: ListPaperDocsFilterBy = ...
    docs_created: ListPaperDocsFilterBy = ...
    other: ListPaperDocsFilterBy = ...

    def is_docs_accessed(self) -> bool: ...

    def is_docs_created(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListPaperDocsFilterBy_validator: bv.Validator = ...

class ListPaperDocsResponse(bb.Struct):
    def __init__(self,
                 doc_ids: List[Text] = ...,
                 cursor: Cursor = ...,
                 has_more: bool = ...) -> None: ...
    doc_ids: bb.Attribute[List[Text]] = ...
    cursor: bb.Attribute[Cursor] = ...
    has_more: bb.Attribute[bool] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListPaperDocsResponse_validator: bv.Validator = ...

class ListPaperDocsSortBy(bb.Union):
    accessed: ListPaperDocsSortBy = ...
    modified: ListPaperDocsSortBy = ...
    created: ListPaperDocsSortBy = ...
    other: ListPaperDocsSortBy = ...

    def is_accessed(self) -> bool: ...

    def is_modified(self) -> bool: ...

    def is_created(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListPaperDocsSortBy_validator: bv.Validator = ...

class ListPaperDocsSortOrder(bb.Union):
    ascending: ListPaperDocsSortOrder = ...
    descending: ListPaperDocsSortOrder = ...
    other: ListPaperDocsSortOrder = ...

    def is_ascending(self) -> bool: ...

    def is_descending(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListPaperDocsSortOrder_validator: bv.Validator = ...

class ListUsersCursorError(PaperApiBaseError):
    doc_not_found: ListUsersCursorError = ...

    def is_doc_not_found(self) -> bool: ...

    def is_cursor_error(self) -> bool: ...

    @classmethod
    def cursor_error(cls, val: PaperApiCursorError) -> ListUsersCursorError: ...

    def get_cursor_error(self) -> PaperApiCursorError: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListUsersCursorError_validator: bv.Validator = ...

class ListUsersOnFolderArgs(RefPaperDoc):
    def __init__(self,
                 doc_id: Text = ...,
                 limit: Optional[int] = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    limit: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListUsersOnFolderArgs_validator: bv.Validator = ...

class ListUsersOnFolderContinueArgs(RefPaperDoc):
    def __init__(self,
                 doc_id: Text = ...,
                 cursor: Text = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    cursor: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListUsersOnFolderContinueArgs_validator: bv.Validator = ...

class ListUsersOnFolderResponse(bb.Struct):
    def __init__(self,
                 invitees: List[sharing.InviteeInfo] = ...,
                 users: List[sharing.UserInfo] = ...,
                 cursor: Cursor = ...,
                 has_more: bool = ...) -> None: ...
    invitees: bb.Attribute[List[sharing.InviteeInfo]] = ...
    users: bb.Attribute[List[sharing.UserInfo]] = ...
    cursor: bb.Attribute[Cursor] = ...
    has_more: bb.Attribute[bool] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListUsersOnFolderResponse_validator: bv.Validator = ...

class ListUsersOnPaperDocArgs(RefPaperDoc):
    def __init__(self,
                 doc_id: Text = ...,
                 limit: Optional[int] = ...,
                 filter_by: Optional[UserOnPaperDocFilter] = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    limit: bb.Attribute[int] = ...
    filter_by: bb.Attribute[UserOnPaperDocFilter] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListUsersOnPaperDocArgs_validator: bv.Validator = ...

class ListUsersOnPaperDocContinueArgs(RefPaperDoc):
    def __init__(self,
                 doc_id: Text = ...,
                 cursor: Text = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    cursor: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListUsersOnPaperDocContinueArgs_validator: bv.Validator = ...

class ListUsersOnPaperDocResponse(bb.Struct):
    def __init__(self,
                 invitees: List[InviteeInfoWithPermissionLevel] = ...,
                 users: List[UserInfoWithPermissionLevel] = ...,
                 doc_owner: sharing.UserInfo = ...,
                 cursor: Cursor = ...,
                 has_more: bool = ...) -> None: ...
    invitees: bb.Attribute[List[InviteeInfoWithPermissionLevel]] = ...
    users: bb.Attribute[List[UserInfoWithPermissionLevel]] = ...
    doc_owner: bb.Attribute[sharing.UserInfo] = ...
    cursor: bb.Attribute[Cursor] = ...
    has_more: bb.Attribute[bool] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListUsersOnPaperDocResponse_validator: bv.Validator = ...

class PaperApiCursorError(bb.Union):
    expired_cursor: PaperApiCursorError = ...
    invalid_cursor: PaperApiCursorError = ...
    wrong_user_in_cursor: PaperApiCursorError = ...
    reset: PaperApiCursorError = ...
    other: PaperApiCursorError = ...

    def is_expired_cursor(self) -> bool: ...

    def is_invalid_cursor(self) -> bool: ...

    def is_wrong_user_in_cursor(self) -> bool: ...

    def is_reset(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperApiCursorError_validator: bv.Validator = ...

class PaperDocCreateArgs(bb.Struct):
    def __init__(self,
                 import_format: ImportFormat = ...,
                 parent_folder_id: Optional[Text] = ...) -> None: ...
    import_format: bb.Attribute[ImportFormat] = ...
    parent_folder_id: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocCreateArgs_validator: bv.Validator = ...

class PaperDocCreateError(PaperApiBaseError):
    content_malformed: PaperDocCreateError = ...
    folder_not_found: PaperDocCreateError = ...
    doc_length_exceeded: PaperDocCreateError = ...
    image_size_exceeded: PaperDocCreateError = ...

    def is_content_malformed(self) -> bool: ...

    def is_folder_not_found(self) -> bool: ...

    def is_doc_length_exceeded(self) -> bool: ...

    def is_image_size_exceeded(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocCreateError_validator: bv.Validator = ...

class PaperDocCreateUpdateResult(bb.Struct):
    def __init__(self,
                 doc_id: Text = ...,
                 revision: int = ...,
                 title: Text = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    revision: bb.Attribute[int] = ...
    title: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocCreateUpdateResult_validator: bv.Validator = ...

class PaperDocExport(RefPaperDoc):
    def __init__(self,
                 doc_id: Text = ...,
                 export_format: ExportFormat = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    export_format: bb.Attribute[ExportFormat] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocExport_validator: bv.Validator = ...

class PaperDocExportResult(bb.Struct):
    def __init__(self,
                 owner: Text = ...,
                 title: Text = ...,
                 revision: int = ...,
                 mime_type: Text = ...) -> None: ...
    owner: bb.Attribute[Text] = ...
    title: bb.Attribute[Text] = ...
    revision: bb.Attribute[int] = ...
    mime_type: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocExportResult_validator: bv.Validator = ...

class PaperDocPermissionLevel(bb.Union):
    edit: PaperDocPermissionLevel = ...
    view_and_comment: PaperDocPermissionLevel = ...
    other: PaperDocPermissionLevel = ...

    def is_edit(self) -> bool: ...

    def is_view_and_comment(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocPermissionLevel_validator: bv.Validator = ...

class PaperDocSharingPolicy(RefPaperDoc):
    def __init__(self,
                 doc_id: Text = ...,
                 sharing_policy: SharingPolicy = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    sharing_policy: bb.Attribute[SharingPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocSharingPolicy_validator: bv.Validator = ...

class PaperDocUpdateArgs(RefPaperDoc):
    def __init__(self,
                 doc_id: Text = ...,
                 doc_update_policy: PaperDocUpdatePolicy = ...,
                 revision: int = ...,
                 import_format: ImportFormat = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    doc_update_policy: bb.Attribute[PaperDocUpdatePolicy] = ...
    revision: bb.Attribute[int] = ...
    import_format: bb.Attribute[ImportFormat] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocUpdateArgs_validator: bv.Validator = ...

class PaperDocUpdateError(DocLookupError):
    content_malformed: PaperDocUpdateError = ...
    revision_mismatch: PaperDocUpdateError = ...
    doc_length_exceeded: PaperDocUpdateError = ...
    image_size_exceeded: PaperDocUpdateError = ...
    doc_archived: PaperDocUpdateError = ...
    doc_deleted: PaperDocUpdateError = ...

    def is_content_malformed(self) -> bool: ...

    def is_revision_mismatch(self) -> bool: ...

    def is_doc_length_exceeded(self) -> bool: ...

    def is_image_size_exceeded(self) -> bool: ...

    def is_doc_archived(self) -> bool: ...

    def is_doc_deleted(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocUpdateError_validator: bv.Validator = ...

class PaperDocUpdatePolicy(bb.Union):
    append: PaperDocUpdatePolicy = ...
    prepend: PaperDocUpdatePolicy = ...
    overwrite_all: PaperDocUpdatePolicy = ...
    other: PaperDocUpdatePolicy = ...

    def is_append(self) -> bool: ...

    def is_prepend(self) -> bool: ...

    def is_overwrite_all(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDocUpdatePolicy_validator: bv.Validator = ...

class PaperFolderCreateArg(bb.Struct):
    def __init__(self,
                 name: Text = ...,
                 parent_folder_id: Optional[Text] = ...,
                 is_team_folder: Optional[bool] = ...) -> None: ...
    name: bb.Attribute[Text] = ...
    parent_folder_id: bb.Attribute[Optional[Text]] = ...
    is_team_folder: bb.Attribute[Optional[bool]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderCreateArg_validator: bv.Validator = ...

class PaperFolderCreateError(PaperApiBaseError):
    folder_not_found: PaperFolderCreateError = ...
    invalid_folder_id: PaperFolderCreateError = ...

    def is_folder_not_found(self) -> bool: ...

    def is_invalid_folder_id(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderCreateError_validator: bv.Validator = ...

class PaperFolderCreateResult(bb.Struct):
    def __init__(self,
                 folder_id: Text = ...) -> None: ...
    folder_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperFolderCreateResult_validator: bv.Validator = ...

class RemovePaperDocUser(RefPaperDoc):
    def __init__(self,
                 doc_id: Text = ...,
                 member: sharing.MemberSelector = ...) -> None: ...
    doc_id: bb.Attribute[Text] = ...
    member: bb.Attribute[sharing.MemberSelector] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RemovePaperDocUser_validator: bv.Validator = ...

class SharingPolicy(bb.Struct):
    def __init__(self,
                 public_sharing_policy: Optional[SharingPublicPolicyType] = ...,
                 team_sharing_policy: Optional[SharingTeamPolicyType] = ...) -> None: ...
    public_sharing_policy: bb.Attribute[Optional[SharingPublicPolicyType]] = ...
    team_sharing_policy: bb.Attribute[Optional[SharingTeamPolicyType]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingPolicy_validator: bv.Validator = ...

class SharingTeamPolicyType(bb.Union):
    people_with_link_can_edit: SharingTeamPolicyType = ...
    people_with_link_can_view_and_comment: SharingTeamPolicyType = ...
    invite_only: SharingTeamPolicyType = ...

    def is_people_with_link_can_edit(self) -> bool: ...

    def is_people_with_link_can_view_and_comment(self) -> bool: ...

    def is_invite_only(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingTeamPolicyType_validator: bv.Validator = ...

class SharingPublicPolicyType(SharingTeamPolicyType):
    disabled: SharingPublicPolicyType = ...

    def is_disabled(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharingPublicPolicyType_validator: bv.Validator = ...

class UserInfoWithPermissionLevel(bb.Struct):
    def __init__(self,
                 user: sharing.UserInfo = ...,
                 permission_level: PaperDocPermissionLevel = ...) -> None: ...
    user: bb.Attribute[sharing.UserInfo] = ...
    permission_level: bb.Attribute[PaperDocPermissionLevel] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserInfoWithPermissionLevel_validator: bv.Validator = ...

class UserOnPaperDocFilter(bb.Union):
    visited: UserOnPaperDocFilter = ...
    shared: UserOnPaperDocFilter = ...
    other: UserOnPaperDocFilter = ...

    def is_visited(self) -> bool: ...

    def is_shared(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UserOnPaperDocFilter_validator: bv.Validator = ...

PaperDocId_validator: bv.Validator = ...
docs_archive: bb.Route = ...
docs_create: bb.Route = ...
docs_download: bb.Route = ...
docs_folder_users_list: bb.Route = ...
docs_folder_users_list_continue: bb.Route = ...
docs_get_folder_info: bb.Route = ...
docs_list: bb.Route = ...
docs_list_continue: bb.Route = ...
docs_permanently_delete: bb.Route = ...
docs_sharing_policy_get: bb.Route = ...
docs_sharing_policy_set: bb.Route = ...
docs_update: bb.Route = ...
docs_users_add: bb.Route = ...
docs_users_list: bb.Route = ...
docs_users_list_continue: bb.Route = ...
docs_users_remove: bb.Route = ...
folders_create: bb.Route = ...

