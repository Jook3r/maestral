# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file

from typing import (
    Callable,
    List,
    Optional,
    Text,
    Type,
    TypeVar,
)

import datetime
from stone.backends.python_rsrc import stone_base as bb  # type: ignore
from stone.backends.python_rsrc import stone_validators as bv  # type: ignore

from dropbox import common  # type: ignore
from dropbox import files  # type: ignore

T = TypeVar('T', bound=bb.AnnotationType)
U = TypeVar('U')

class GeneralFileRequestsError(bb.Union):
    disabled_for_team: GeneralFileRequestsError = ...
    other: GeneralFileRequestsError = ...

    def is_disabled_for_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GeneralFileRequestsError_validator: bv.Validator = ...

class CountFileRequestsError(GeneralFileRequestsError):
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CountFileRequestsError_validator: bv.Validator = ...

class CountFileRequestsResult(bb.Struct):
    def __init__(self,
                 file_request_count: int = ...) -> None: ...
    file_request_count: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CountFileRequestsResult_validator: bv.Validator = ...

class CreateFileRequestArgs(bb.Struct):
    def __init__(self,
                 title: Text = ...,
                 destination: Text = ...,
                 deadline: Optional[FileRequestDeadline] = ...,
                 open: Optional[bool] = ...,
                 description: Optional[Text] = ...) -> None: ...
    title: bb.Attribute[Text] = ...
    destination: bb.Attribute[Text] = ...
    deadline: bb.Attribute[Optional[FileRequestDeadline]] = ...
    open: bb.Attribute[bool] = ...
    description: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CreateFileRequestArgs_validator: bv.Validator = ...

class FileRequestError(GeneralFileRequestsError):
    not_found: FileRequestError = ...
    not_a_folder: FileRequestError = ...
    app_lacks_access: FileRequestError = ...
    no_permission: FileRequestError = ...
    email_unverified: FileRequestError = ...
    validation_error: FileRequestError = ...

    def is_not_found(self) -> bool: ...

    def is_not_a_folder(self) -> bool: ...

    def is_app_lacks_access(self) -> bool: ...

    def is_no_permission(self) -> bool: ...

    def is_email_unverified(self) -> bool: ...

    def is_validation_error(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestError_validator: bv.Validator = ...

class CreateFileRequestError(FileRequestError):
    invalid_location: CreateFileRequestError = ...
    rate_limit: CreateFileRequestError = ...

    def is_invalid_location(self) -> bool: ...

    def is_rate_limit(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CreateFileRequestError_validator: bv.Validator = ...

class DeleteAllClosedFileRequestsError(FileRequestError):
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeleteAllClosedFileRequestsError_validator: bv.Validator = ...

class DeleteAllClosedFileRequestsResult(bb.Struct):
    def __init__(self,
                 file_requests: List[FileRequest] = ...) -> None: ...
    file_requests: bb.Attribute[List[FileRequest]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeleteAllClosedFileRequestsResult_validator: bv.Validator = ...

class DeleteFileRequestArgs(bb.Struct):
    def __init__(self,
                 ids: List[Text] = ...) -> None: ...
    ids: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeleteFileRequestArgs_validator: bv.Validator = ...

class DeleteFileRequestError(FileRequestError):
    file_request_open: DeleteFileRequestError = ...

    def is_file_request_open(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeleteFileRequestError_validator: bv.Validator = ...

class DeleteFileRequestsResult(bb.Struct):
    def __init__(self,
                 file_requests: List[FileRequest] = ...) -> None: ...
    file_requests: bb.Attribute[List[FileRequest]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

DeleteFileRequestsResult_validator: bv.Validator = ...

class FileRequest(bb.Struct):
    def __init__(self,
                 id: Text = ...,
                 url: Text = ...,
                 title: Text = ...,
                 created: datetime.datetime = ...,
                 is_open: bool = ...,
                 file_count: int = ...,
                 destination: Optional[Text] = ...,
                 deadline: Optional[FileRequestDeadline] = ...,
                 description: Optional[Text] = ...) -> None: ...
    id: bb.Attribute[Text] = ...
    url: bb.Attribute[Text] = ...
    title: bb.Attribute[Text] = ...
    created: bb.Attribute[datetime.datetime] = ...
    is_open: bb.Attribute[bool] = ...
    file_count: bb.Attribute[int] = ...
    destination: bb.Attribute[Optional[Text]] = ...
    deadline: bb.Attribute[Optional[FileRequestDeadline]] = ...
    description: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequest_validator: bv.Validator = ...

class FileRequestDeadline(bb.Struct):
    def __init__(self,
                 deadline: datetime.datetime = ...,
                 allow_late_uploads: Optional[GracePeriod] = ...) -> None: ...
    deadline: bb.Attribute[datetime.datetime] = ...
    allow_late_uploads: bb.Attribute[Optional[GracePeriod]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileRequestDeadline_validator: bv.Validator = ...

class GetFileRequestArgs(bb.Struct):
    def __init__(self,
                 id: Text = ...) -> None: ...
    id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GetFileRequestArgs_validator: bv.Validator = ...

class GetFileRequestError(FileRequestError):
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GetFileRequestError_validator: bv.Validator = ...

class GracePeriod(bb.Union):
    one_day: GracePeriod = ...
    two_days: GracePeriod = ...
    seven_days: GracePeriod = ...
    thirty_days: GracePeriod = ...
    always: GracePeriod = ...
    other: GracePeriod = ...

    def is_one_day(self) -> bool: ...

    def is_two_days(self) -> bool: ...

    def is_seven_days(self) -> bool: ...

    def is_thirty_days(self) -> bool: ...

    def is_always(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GracePeriod_validator: bv.Validator = ...

class ListFileRequestsArg(bb.Struct):
    def __init__(self,
                 limit: Optional[int] = ...) -> None: ...
    limit: bb.Attribute[int] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListFileRequestsArg_validator: bv.Validator = ...

class ListFileRequestsContinueArg(bb.Struct):
    def __init__(self,
                 cursor: Text = ...) -> None: ...
    cursor: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListFileRequestsContinueArg_validator: bv.Validator = ...

class ListFileRequestsContinueError(GeneralFileRequestsError):
    invalid_cursor: ListFileRequestsContinueError = ...

    def is_invalid_cursor(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListFileRequestsContinueError_validator: bv.Validator = ...

class ListFileRequestsError(GeneralFileRequestsError):
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListFileRequestsError_validator: bv.Validator = ...

class ListFileRequestsResult(bb.Struct):
    def __init__(self,
                 file_requests: List[FileRequest] = ...) -> None: ...
    file_requests: bb.Attribute[List[FileRequest]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListFileRequestsResult_validator: bv.Validator = ...

class ListFileRequestsV2Result(bb.Struct):
    def __init__(self,
                 file_requests: List[FileRequest] = ...,
                 cursor: Text = ...,
                 has_more: bool = ...) -> None: ...
    file_requests: bb.Attribute[List[FileRequest]] = ...
    cursor: bb.Attribute[Text] = ...
    has_more: bb.Attribute[bool] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListFileRequestsV2Result_validator: bv.Validator = ...

class UpdateFileRequestArgs(bb.Struct):
    def __init__(self,
                 id: Text = ...,
                 title: Optional[Text] = ...,
                 destination: Optional[Text] = ...,
                 deadline: Optional[UpdateFileRequestDeadline] = ...,
                 open: Optional[bool] = ...,
                 description: Optional[Text] = ...) -> None: ...
    id: bb.Attribute[Text] = ...
    title: bb.Attribute[Optional[Text]] = ...
    destination: bb.Attribute[Optional[Text]] = ...
    deadline: bb.Attribute[UpdateFileRequestDeadline] = ...
    open: bb.Attribute[Optional[bool]] = ...
    description: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UpdateFileRequestArgs_validator: bv.Validator = ...

class UpdateFileRequestDeadline(bb.Union):
    no_update: UpdateFileRequestDeadline = ...
    other: UpdateFileRequestDeadline = ...

    def is_no_update(self) -> bool: ...

    def is_update(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def update(cls, val: Optional[FileRequestDeadline]) -> UpdateFileRequestDeadline: ...

    def get_update(self) -> Optional[FileRequestDeadline]: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UpdateFileRequestDeadline_validator: bv.Validator = ...

class UpdateFileRequestError(FileRequestError):
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UpdateFileRequestError_validator: bv.Validator = ...

FileRequestId_validator: bv.Validator = ...
FileRequestValidationError_validator: bv.Validator = ...
count: bb.Route = ...
create: bb.Route = ...
delete: bb.Route = ...
delete_all_closed: bb.Route = ...
get: bb.Route = ...
list_v2: bb.Route = ...
list: bb.Route = ...
list_continue: bb.Route = ...
update: bb.Route = ...

