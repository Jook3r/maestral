# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file

from typing import (
    Callable,
    List,
    Optional,
    Text,
    Type,
    TypeVar,
)
from stone.backends.python_rsrc import stone_base as bb  # type: ignore
from stone.backends.python_rsrc import stone_validators as bv  # type: ignore

T = TypeVar('T', bound=bb.AnnotationType)
U = TypeVar('U')

class AddPropertiesArg(bb.Struct):
    def __init__(self,
                 path: Text = ...,
                 property_groups: List[PropertyGroup] = ...) -> None: ...
    path: bb.Attribute[Text] = ...
    property_groups: bb.Attribute[List[PropertyGroup]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AddPropertiesArg_validator: bv.Validator = ...

class TemplateError(bb.Union):
    restricted_content: TemplateError = ...
    other: TemplateError = ...

    def is_template_not_found(self) -> bool: ...

    def is_restricted_content(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def template_not_found(cls, val: Text) -> TemplateError: ...

    def get_template_not_found(self) -> Text: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TemplateError_validator: bv.Validator = ...

class PropertiesError(TemplateError):
    unsupported_folder: PropertiesError = ...

    def is_path(self) -> bool: ...

    def is_unsupported_folder(self) -> bool: ...

    @classmethod
    def path(cls, val: LookupError) -> PropertiesError: ...

    def get_path(self) -> LookupError: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertiesError_validator: bv.Validator = ...

class InvalidPropertyGroupError(PropertiesError):
    property_field_too_large: InvalidPropertyGroupError = ...
    does_not_fit_template: InvalidPropertyGroupError = ...
    duplicate_property_groups: InvalidPropertyGroupError = ...

    def is_property_field_too_large(self) -> bool: ...

    def is_does_not_fit_template(self) -> bool: ...

    def is_duplicate_property_groups(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

InvalidPropertyGroupError_validator: bv.Validator = ...

class AddPropertiesError(InvalidPropertyGroupError):
    property_group_already_exists: AddPropertiesError = ...

    def is_property_group_already_exists(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AddPropertiesError_validator: bv.Validator = ...

class PropertyGroupTemplate(bb.Struct):
    def __init__(self,
                 name: Text = ...,
                 description: Text = ...,
                 fields: List[PropertyFieldTemplate] = ...) -> None: ...
    name: bb.Attribute[Text] = ...
    description: bb.Attribute[Text] = ...
    fields: bb.Attribute[List[PropertyFieldTemplate]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertyGroupTemplate_validator: bv.Validator = ...

class AddTemplateArg(PropertyGroupTemplate):
    def __init__(self,
                 name: Text = ...,
                 description: Text = ...,
                 fields: List[PropertyFieldTemplate] = ...) -> None: ...
    name: bb.Attribute[Text] = ...
    description: bb.Attribute[Text] = ...
    fields: bb.Attribute[List[PropertyFieldTemplate]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AddTemplateArg_validator: bv.Validator = ...

class AddTemplateResult(bb.Struct):
    def __init__(self,
                 template_id: Text = ...) -> None: ...
    template_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

AddTemplateResult_validator: bv.Validator = ...

class GetTemplateArg(bb.Struct):
    def __init__(self,
                 template_id: Text = ...) -> None: ...
    template_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GetTemplateArg_validator: bv.Validator = ...

class GetTemplateResult(PropertyGroupTemplate):
    def __init__(self,
                 name: Text = ...,
                 description: Text = ...,
                 fields: List[PropertyFieldTemplate] = ...) -> None: ...
    name: bb.Attribute[Text] = ...
    description: bb.Attribute[Text] = ...
    fields: bb.Attribute[List[PropertyFieldTemplate]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GetTemplateResult_validator: bv.Validator = ...

class ListTemplateResult(bb.Struct):
    def __init__(self,
                 template_ids: List[Text] = ...) -> None: ...
    template_ids: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ListTemplateResult_validator: bv.Validator = ...

class LogicalOperator(bb.Union):
    or_operator: LogicalOperator = ...
    other: LogicalOperator = ...

    def is_or_operator(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LogicalOperator_validator: bv.Validator = ...

class LookUpPropertiesError(bb.Union):
    property_group_not_found: LookUpPropertiesError = ...
    other: LookUpPropertiesError = ...

    def is_property_group_not_found(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LookUpPropertiesError_validator: bv.Validator = ...

class LookupError(bb.Union):
    not_found: LookupError = ...
    not_file: LookupError = ...
    not_folder: LookupError = ...
    restricted_content: LookupError = ...
    other: LookupError = ...

    def is_malformed_path(self) -> bool: ...

    def is_not_found(self) -> bool: ...

    def is_not_file(self) -> bool: ...

    def is_not_folder(self) -> bool: ...

    def is_restricted_content(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def malformed_path(cls, val: Text) -> LookupError: ...

    def get_malformed_path(self) -> Text: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

LookupError_validator: bv.Validator = ...

class ModifyTemplateError(TemplateError):
    conflicting_property_names: ModifyTemplateError = ...
    too_many_properties: ModifyTemplateError = ...
    too_many_templates: ModifyTemplateError = ...
    template_attribute_too_large: ModifyTemplateError = ...

    def is_conflicting_property_names(self) -> bool: ...

    def is_too_many_properties(self) -> bool: ...

    def is_too_many_templates(self) -> bool: ...

    def is_template_attribute_too_large(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ModifyTemplateError_validator: bv.Validator = ...

class OverwritePropertyGroupArg(bb.Struct):
    def __init__(self,
                 path: Text = ...,
                 property_groups: List[PropertyGroup] = ...) -> None: ...
    path: bb.Attribute[Text] = ...
    property_groups: bb.Attribute[List[PropertyGroup]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OverwritePropertyGroupArg_validator: bv.Validator = ...

class PropertiesSearchArg(bb.Struct):
    def __init__(self,
                 queries: List[PropertiesSearchQuery] = ...,
                 template_filter: Optional[TemplateFilter] = ...) -> None: ...
    queries: bb.Attribute[List[PropertiesSearchQuery]] = ...
    template_filter: bb.Attribute[TemplateFilter] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertiesSearchArg_validator: bv.Validator = ...

class PropertiesSearchContinueArg(bb.Struct):
    def __init__(self,
                 cursor: Text = ...) -> None: ...
    cursor: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertiesSearchContinueArg_validator: bv.Validator = ...

class PropertiesSearchContinueError(bb.Union):
    reset: PropertiesSearchContinueError = ...
    other: PropertiesSearchContinueError = ...

    def is_reset(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertiesSearchContinueError_validator: bv.Validator = ...

class PropertiesSearchError(bb.Union):
    other: PropertiesSearchError = ...

    def is_property_group_lookup(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def property_group_lookup(cls, val: LookUpPropertiesError) -> PropertiesSearchError: ...

    def get_property_group_lookup(self) -> LookUpPropertiesError: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertiesSearchError_validator: bv.Validator = ...

class PropertiesSearchMatch(bb.Struct):
    def __init__(self,
                 id: Text = ...,
                 path: Text = ...,
                 is_deleted: bool = ...,
                 property_groups: List[PropertyGroup] = ...) -> None: ...
    id: bb.Attribute[Text] = ...
    path: bb.Attribute[Text] = ...
    is_deleted: bb.Attribute[bool] = ...
    property_groups: bb.Attribute[List[PropertyGroup]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertiesSearchMatch_validator: bv.Validator = ...

class PropertiesSearchMode(bb.Union):
    other: PropertiesSearchMode = ...

    def is_field_name(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def field_name(cls, val: Text) -> PropertiesSearchMode: ...

    def get_field_name(self) -> Text: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertiesSearchMode_validator: bv.Validator = ...

class PropertiesSearchQuery(bb.Struct):
    def __init__(self,
                 query: Text = ...,
                 mode: PropertiesSearchMode = ...,
                 logical_operator: Optional[LogicalOperator] = ...) -> None: ...
    query: bb.Attribute[Text] = ...
    mode: bb.Attribute[PropertiesSearchMode] = ...
    logical_operator: bb.Attribute[LogicalOperator] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertiesSearchQuery_validator: bv.Validator = ...

class PropertiesSearchResult(bb.Struct):
    def __init__(self,
                 matches: List[PropertiesSearchMatch] = ...,
                 cursor: Optional[Text] = ...) -> None: ...
    matches: bb.Attribute[List[PropertiesSearchMatch]] = ...
    cursor: bb.Attribute[Optional[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertiesSearchResult_validator: bv.Validator = ...

class PropertyField(bb.Struct):
    def __init__(self,
                 name: Text = ...,
                 value: Text = ...) -> None: ...
    name: bb.Attribute[Text] = ...
    value: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertyField_validator: bv.Validator = ...

class PropertyFieldTemplate(bb.Struct):
    def __init__(self,
                 name: Text = ...,
                 description: Text = ...,
                 type: PropertyType = ...) -> None: ...
    name: bb.Attribute[Text] = ...
    description: bb.Attribute[Text] = ...
    type: bb.Attribute[PropertyType] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertyFieldTemplate_validator: bv.Validator = ...

class PropertyGroup(bb.Struct):
    def __init__(self,
                 template_id: Text = ...,
                 fields: List[PropertyField] = ...) -> None: ...
    template_id: bb.Attribute[Text] = ...
    fields: bb.Attribute[List[PropertyField]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertyGroup_validator: bv.Validator = ...

class PropertyGroupUpdate(bb.Struct):
    def __init__(self,
                 template_id: Text = ...,
                 add_or_update_fields: Optional[List[PropertyField]] = ...,
                 remove_fields: Optional[List[Text]] = ...) -> None: ...
    template_id: bb.Attribute[Text] = ...
    add_or_update_fields: bb.Attribute[Optional[List[PropertyField]]] = ...
    remove_fields: bb.Attribute[Optional[List[Text]]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertyGroupUpdate_validator: bv.Validator = ...

class PropertyType(bb.Union):
    string: PropertyType = ...
    other: PropertyType = ...

    def is_string(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PropertyType_validator: bv.Validator = ...

class RemovePropertiesArg(bb.Struct):
    def __init__(self,
                 path: Text = ...,
                 property_template_ids: List[Text] = ...) -> None: ...
    path: bb.Attribute[Text] = ...
    property_template_ids: bb.Attribute[List[Text]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RemovePropertiesArg_validator: bv.Validator = ...

class RemovePropertiesError(PropertiesError):
    def is_property_group_lookup(self) -> bool: ...

    @classmethod
    def property_group_lookup(cls, val: LookUpPropertiesError) -> RemovePropertiesError: ...

    def get_property_group_lookup(self) -> LookUpPropertiesError: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RemovePropertiesError_validator: bv.Validator = ...

class RemoveTemplateArg(bb.Struct):
    def __init__(self,
                 template_id: Text = ...) -> None: ...
    template_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RemoveTemplateArg_validator: bv.Validator = ...

class TemplateFilterBase(bb.Union):
    other: TemplateFilterBase = ...

    def is_filter_some(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def filter_some(cls, val: List[Text]) -> TemplateFilterBase: ...

    def get_filter_some(self) -> List[Text]: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TemplateFilterBase_validator: bv.Validator = ...

class TemplateFilter(TemplateFilterBase):
    filter_none: TemplateFilter = ...

    def is_filter_none(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TemplateFilter_validator: bv.Validator = ...

class TemplateOwnerType(bb.Union):
    user: TemplateOwnerType = ...
    team: TemplateOwnerType = ...
    other: TemplateOwnerType = ...

    def is_user(self) -> bool: ...

    def is_team(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TemplateOwnerType_validator: bv.Validator = ...

class UpdatePropertiesArg(bb.Struct):
    def __init__(self,
                 path: Text = ...,
                 update_property_groups: List[PropertyGroupUpdate] = ...) -> None: ...
    path: bb.Attribute[Text] = ...
    update_property_groups: bb.Attribute[List[PropertyGroupUpdate]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UpdatePropertiesArg_validator: bv.Validator = ...

class UpdatePropertiesError(InvalidPropertyGroupError):
    def is_property_group_lookup(self) -> bool: ...

    @classmethod
    def property_group_lookup(cls, val: LookUpPropertiesError) -> UpdatePropertiesError: ...

    def get_property_group_lookup(self) -> LookUpPropertiesError: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UpdatePropertiesError_validator: bv.Validator = ...

class UpdateTemplateArg(bb.Struct):
    def __init__(self,
                 template_id: Text = ...,
                 name: Optional[Text] = ...,
                 description: Optional[Text] = ...,
                 add_fields: Optional[List[PropertyFieldTemplate]] = ...) -> None: ...
    template_id: bb.Attribute[Text] = ...
    name: bb.Attribute[Optional[Text]] = ...
    description: bb.Attribute[Optional[Text]] = ...
    add_fields: bb.Attribute[Optional[List[PropertyFieldTemplate]]] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UpdateTemplateArg_validator: bv.Validator = ...

class UpdateTemplateResult(bb.Struct):
    def __init__(self,
                 template_id: Text = ...) -> None: ...
    template_id: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

UpdateTemplateResult_validator: bv.Validator = ...

Id_validator: bv.Validator = ...
PathOrId_validator: bv.Validator = ...
PropertiesSearchCursor_validator: bv.Validator = ...
TemplateId_validator: bv.Validator = ...
properties_add: bb.Route = ...
properties_overwrite: bb.Route = ...
properties_remove: bb.Route = ...
properties_search: bb.Route = ...
properties_search_continue: bb.Route = ...
properties_update: bb.Route = ...
templates_add_for_team: bb.Route = ...
templates_add_for_user: bb.Route = ...
templates_get_for_team: bb.Route = ...
templates_get_for_user: bb.Route = ...
templates_list_for_team: bb.Route = ...
templates_list_for_user: bb.Route = ...
templates_remove_for_team: bb.Route = ...
templates_remove_for_user: bb.Route = ...
templates_update_for_team: bb.Route = ...
templates_update_for_user: bb.Route = ...

