# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file

from typing import (
    Callable,
    Text,
    Type,
    TypeVar,
)
from stone.backends.python_rsrc import stone_base as bb  # type: ignore
from stone.backends.python_rsrc import stone_validators as bv  # type: ignore

T = TypeVar('T', bound=bb.AnnotationType)
U = TypeVar('U')

class CameraUploadsPolicyState(bb.Union):
    disabled: CameraUploadsPolicyState = ...
    enabled: CameraUploadsPolicyState = ...
    other: CameraUploadsPolicyState = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

CameraUploadsPolicyState_validator: bv.Validator = ...

class ComputerBackupPolicyState(bb.Union):
    disabled: ComputerBackupPolicyState = ...
    enabled: ComputerBackupPolicyState = ...
    default: ComputerBackupPolicyState = ...
    other: ComputerBackupPolicyState = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_default(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ComputerBackupPolicyState_validator: bv.Validator = ...

class EmmState(bb.Union):
    disabled: EmmState = ...
    optional: EmmState = ...
    required: EmmState = ...
    other: EmmState = ...

    def is_disabled(self) -> bool: ...

    def is_optional(self) -> bool: ...

    def is_required(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

EmmState_validator: bv.Validator = ...

class ExternalDriveBackupPolicyState(bb.Union):
    disabled: ExternalDriveBackupPolicyState = ...
    enabled: ExternalDriveBackupPolicyState = ...
    default: ExternalDriveBackupPolicyState = ...
    other: ExternalDriveBackupPolicyState = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_default(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ExternalDriveBackupPolicyState_validator: bv.Validator = ...

class FileLockingPolicyState(bb.Union):
    disabled: FileLockingPolicyState = ...
    enabled: FileLockingPolicyState = ...
    other: FileLockingPolicyState = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

FileLockingPolicyState_validator: bv.Validator = ...

class GroupCreation(bb.Union):
    admins_and_members: GroupCreation = ...
    admins_only: GroupCreation = ...

    def is_admins_and_members(self) -> bool: ...

    def is_admins_only(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

GroupCreation_validator: bv.Validator = ...

class OfficeAddInPolicy(bb.Union):
    disabled: OfficeAddInPolicy = ...
    enabled: OfficeAddInPolicy = ...
    other: OfficeAddInPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

OfficeAddInPolicy_validator: bv.Validator = ...

class PaperDefaultFolderPolicy(bb.Union):
    everyone_in_team: PaperDefaultFolderPolicy = ...
    invite_only: PaperDefaultFolderPolicy = ...
    other: PaperDefaultFolderPolicy = ...

    def is_everyone_in_team(self) -> bool: ...

    def is_invite_only(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDefaultFolderPolicy_validator: bv.Validator = ...

class PaperDeploymentPolicy(bb.Union):
    full: PaperDeploymentPolicy = ...
    partial: PaperDeploymentPolicy = ...
    other: PaperDeploymentPolicy = ...

    def is_full(self) -> bool: ...

    def is_partial(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDeploymentPolicy_validator: bv.Validator = ...

class PaperDesktopPolicy(bb.Union):
    disabled: PaperDesktopPolicy = ...
    enabled: PaperDesktopPolicy = ...
    other: PaperDesktopPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperDesktopPolicy_validator: bv.Validator = ...

class PaperEnabledPolicy(bb.Union):
    disabled: PaperEnabledPolicy = ...
    enabled: PaperEnabledPolicy = ...
    unspecified: PaperEnabledPolicy = ...
    other: PaperEnabledPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_unspecified(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PaperEnabledPolicy_validator: bv.Validator = ...

class PasswordControlMode(bb.Union):
    disabled: PasswordControlMode = ...
    enabled: PasswordControlMode = ...
    other: PasswordControlMode = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordControlMode_validator: bv.Validator = ...

class PasswordStrengthPolicy(bb.Union):
    minimal_requirements: PasswordStrengthPolicy = ...
    moderate_password: PasswordStrengthPolicy = ...
    strong_password: PasswordStrengthPolicy = ...
    other: PasswordStrengthPolicy = ...

    def is_minimal_requirements(self) -> bool: ...

    def is_moderate_password(self) -> bool: ...

    def is_strong_password(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PasswordStrengthPolicy_validator: bv.Validator = ...

class RolloutMethod(bb.Union):
    unlink_all: RolloutMethod = ...
    unlink_most_inactive: RolloutMethod = ...
    add_member_to_exceptions: RolloutMethod = ...

    def is_unlink_all(self) -> bool: ...

    def is_unlink_most_inactive(self) -> bool: ...

    def is_add_member_to_exceptions(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

RolloutMethod_validator: bv.Validator = ...

class SharedFolderJoinPolicy(bb.Union):
    from_team_only: SharedFolderJoinPolicy = ...
    from_anyone: SharedFolderJoinPolicy = ...
    other: SharedFolderJoinPolicy = ...

    def is_from_team_only(self) -> bool: ...

    def is_from_anyone(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderJoinPolicy_validator: bv.Validator = ...

class SharedFolderMemberPolicy(bb.Union):
    team: SharedFolderMemberPolicy = ...
    anyone: SharedFolderMemberPolicy = ...
    other: SharedFolderMemberPolicy = ...

    def is_team(self) -> bool: ...

    def is_anyone(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedFolderMemberPolicy_validator: bv.Validator = ...

class SharedLinkCreatePolicy(bb.Union):
    default_public: SharedLinkCreatePolicy = ...
    default_team_only: SharedLinkCreatePolicy = ...
    team_only: SharedLinkCreatePolicy = ...
    default_no_one: SharedLinkCreatePolicy = ...
    other: SharedLinkCreatePolicy = ...

    def is_default_public(self) -> bool: ...

    def is_default_team_only(self) -> bool: ...

    def is_team_only(self) -> bool: ...

    def is_default_no_one(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SharedLinkCreatePolicy_validator: bv.Validator = ...

class ShowcaseDownloadPolicy(bb.Union):
    disabled: ShowcaseDownloadPolicy = ...
    enabled: ShowcaseDownloadPolicy = ...
    other: ShowcaseDownloadPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseDownloadPolicy_validator: bv.Validator = ...

class ShowcaseEnabledPolicy(bb.Union):
    disabled: ShowcaseEnabledPolicy = ...
    enabled: ShowcaseEnabledPolicy = ...
    other: ShowcaseEnabledPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseEnabledPolicy_validator: bv.Validator = ...

class ShowcaseExternalSharingPolicy(bb.Union):
    disabled: ShowcaseExternalSharingPolicy = ...
    enabled: ShowcaseExternalSharingPolicy = ...
    other: ShowcaseExternalSharingPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

ShowcaseExternalSharingPolicy_validator: bv.Validator = ...

class SmartSyncPolicy(bb.Union):
    local: SmartSyncPolicy = ...
    on_demand: SmartSyncPolicy = ...
    other: SmartSyncPolicy = ...

    def is_local(self) -> bool: ...

    def is_on_demand(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmartSyncPolicy_validator: bv.Validator = ...

class SmarterSmartSyncPolicyState(bb.Union):
    disabled: SmarterSmartSyncPolicyState = ...
    enabled: SmarterSmartSyncPolicyState = ...
    other: SmarterSmartSyncPolicyState = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SmarterSmartSyncPolicyState_validator: bv.Validator = ...

class SsoPolicy(bb.Union):
    disabled: SsoPolicy = ...
    optional: SsoPolicy = ...
    required: SsoPolicy = ...
    other: SsoPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_optional(self) -> bool: ...

    def is_required(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SsoPolicy_validator: bv.Validator = ...

class SuggestMembersPolicy(bb.Union):
    disabled: SuggestMembersPolicy = ...
    enabled: SuggestMembersPolicy = ...
    other: SuggestMembersPolicy = ...

    def is_disabled(self) -> bool: ...

    def is_enabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SuggestMembersPolicy_validator: bv.Validator = ...

class TeamMemberPolicies(bb.Struct):
    def __init__(self,
                 sharing: TeamSharingPolicies = ...,
                 emm_state: EmmState = ...,
                 office_addin: OfficeAddInPolicy = ...,
                 suggest_members_policy: SuggestMembersPolicy = ...) -> None: ...
    sharing: bb.Attribute[TeamSharingPolicies] = ...
    emm_state: bb.Attribute[EmmState] = ...
    office_addin: bb.Attribute[OfficeAddInPolicy] = ...
    suggest_members_policy: bb.Attribute[SuggestMembersPolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamMemberPolicies_validator: bv.Validator = ...

class TeamSharingPolicies(bb.Struct):
    def __init__(self,
                 shared_folder_member_policy: SharedFolderMemberPolicy = ...,
                 shared_folder_join_policy: SharedFolderJoinPolicy = ...,
                 shared_link_create_policy: SharedLinkCreatePolicy = ...) -> None: ...
    shared_folder_member_policy: bb.Attribute[SharedFolderMemberPolicy] = ...
    shared_folder_join_policy: bb.Attribute[SharedFolderJoinPolicy] = ...
    shared_link_create_policy: bb.Attribute[SharedLinkCreatePolicy] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TeamSharingPolicies_validator: bv.Validator = ...

class TwoStepVerificationPolicy(bb.Union):
    require_tfa_enable: TwoStepVerificationPolicy = ...
    require_tfa_disable: TwoStepVerificationPolicy = ...
    other: TwoStepVerificationPolicy = ...

    def is_require_tfa_enable(self) -> bool: ...

    def is_require_tfa_disable(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TwoStepVerificationPolicy_validator: bv.Validator = ...

class TwoStepVerificationState(bb.Union):
    required: TwoStepVerificationState = ...
    optional: TwoStepVerificationState = ...
    disabled: TwoStepVerificationState = ...
    other: TwoStepVerificationState = ...

    def is_required(self) -> bool: ...

    def is_optional(self) -> bool: ...

    def is_disabled(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

TwoStepVerificationState_validator: bv.Validator = ...

