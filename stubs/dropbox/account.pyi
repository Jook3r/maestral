# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file

from typing import (
    Callable,
    Text,
    Type,
    TypeVar,
)
from stone.backends.python_rsrc import stone_base as bb  # type: ignore
from stone.backends.python_rsrc import stone_validators as bv  # type: ignore

T = TypeVar('T', bound=bb.AnnotationType)
U = TypeVar('U')

class PhotoSourceArg(bb.Union):
    other: PhotoSourceArg = ...

    def is_base64_data(self) -> bool: ...

    def is_other(self) -> bool: ...

    @classmethod
    def base64_data(cls, val: Text) -> PhotoSourceArg: ...

    def get_base64_data(self) -> Text: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

PhotoSourceArg_validator: bv.Validator = ...

class SetProfilePhotoArg(bb.Struct):
    def __init__(self,
                 photo: PhotoSourceArg = ...) -> None: ...
    photo: bb.Attribute[PhotoSourceArg] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SetProfilePhotoArg_validator: bv.Validator = ...

class SetProfilePhotoError(bb.Union):
    file_type_error: SetProfilePhotoError = ...
    file_size_error: SetProfilePhotoError = ...
    dimension_error: SetProfilePhotoError = ...
    thumbnail_error: SetProfilePhotoError = ...
    transient_error: SetProfilePhotoError = ...
    other: SetProfilePhotoError = ...

    def is_file_type_error(self) -> bool: ...

    def is_file_size_error(self) -> bool: ...

    def is_dimension_error(self) -> bool: ...

    def is_thumbnail_error(self) -> bool: ...

    def is_transient_error(self) -> bool: ...

    def is_other(self) -> bool: ...

    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SetProfilePhotoError_validator: bv.Validator = ...

class SetProfilePhotoResult(bb.Struct):
    def __init__(self,
                 profile_photo_url: Text = ...) -> None: ...
    profile_photo_url: bb.Attribute[Text] = ...
    def _process_custom_annotations(
        self,
        annotation_type: Type[T],
        field_path: Text,
        processor: Callable[[T, U], U],
    ) -> None: ...

SetProfilePhotoResult_validator: bv.Validator = ...

set_profile_photo: bb.Route = ...

